,Topic,Topic_Perc_Contrib,Keywords,Text
0,absolute,0.4583,"error, const, await, response, message, app, status, console_log, async, try","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Before starting, check if you need more files to solve the task. Do not edit files without knowing their contents! Ask for them in normal conversational format instead. # Working set src/backend/setupRoutes.js: ``` import { generateHandler } from \'./handlers/generateHandler.js\'; import { servePromptDescriptor } from \'./handlers/servePromptDescriptor.js\'; import { updateTaskHandler } from \'./handlers/updateTaskHandler.js\'; import { listTasks } from \'./handlers/listTasks.js\'; import { executeHandler } from \'./handlers/executeHandler.js\'; import resetGitHandler from \'./handlers/resetGitHandler.js\'; import gitStatusHandler from \'./handlers/gitStatusHandler.js\'; import commitGitHandler from \'./handlers/commitGitHandler.js\'; export function setupRoutes(app) {   app.get(\'/descriptor\', servePromptDescriptor);   app.get(\'/tasks\', (req, res) => res.json({ tasks: listTasks() }));   app.get(\'/status\', gitStatusHandler);   app.post(\'/generate\', generateHandler);   app.post(\'/updatetask\', updateTaskHandler);   app.post(\'/execute\', executeHandler);   app.post(\'/reset\', resetGitHandler);   app.post(\'/commit\', commitGitHandler); } ``` src/backend/handlers/gitStatusHandler.js: ``` import gitStatus from \'../../git/gitStatus.js\'; export default async function gitStatusHandler(req, res) {   try {     const status = await gitStatus();     res.status(200).send({ message: status });   } catch (error) {     let errorMessage = \'Error in getting Git status\';     if (error.stderr && error.stderr.includes(\'Not a git repository\')) {       errorMessage = \'Not a git repo. Run  \'npx junior-init \' to initialize!\';     }     res.status(500).send({ message: errorMessage, error });   } } ``` src/backend/handlers/commitGitHandler.js: ``` import commitGit from \'../../git/commitGit.js\'; export default async function commitGitHandler(req, res) {   try {     const message = req.body.message;     if (!message) {       res.status(400).send({ message: \'Commit message is required\' });       return;     }     await commitGit(message);     res.status(200).send({ message: `Successfully committed with message: ${message}` });   } catch (error) {     res.status(500).send({ message: \'Error in committing changes\', error });   } } ``` src/backend/handlers/resetGitHandler.js: ``` import resetGit from \'../../git/resetGit.js\'; export default async function resetGitHandler(req, res) {   try {     await resetGit();     res.status(200).send({ message: \'Git successfully reset\' });   } catch (error) {     res.status(500).send({ message: \'Error in resetting Git\', error });   } } ``` # Task Refactor! Move git-related routes under /git/ Also move the handler files to handlers/git/ Do not forget to update relative imports! ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
1,absolute,0.4546,"error, const, await, response, message, app, status, console_log, async, try",['How to check type hints in a whole Python repo and what is the purpose?']
2,absolute,0.3983,"error, const, await, response, message, app, status, console_log, async, try","['# Working set src/backend/setupRoutes.js: ``` import { generateHandler } from \'./handlers/generateHandler.js\'; import { servePromptDescriptor } from \'./handlers/servePromptDescriptor.js\'; import { updateTaskHandler } from \'./handlers/updateTaskHandler.js\'; import { listTasks } from \'./handlers/listTasks.js\'; import { executeHandler } from \'./handlers/executeHandler.js\'; import resetGitHandler from \'./handlers/resetGitHandler.js\'; import gitStatusHandler from \'./handlers/gitStatusHandler.js\'; export function setupRoutes(app) {   app.get(\'/descriptor\', servePromptDescriptor);   app.get(\'/tasks\', (req, res) => res.json({ tasks: listTasks() }));   app.get(\'/status\', gitStatusHandler);   app.post(\'/generate\', generateHandler);   app.post(\'/updatetask\', updateTaskHandler);   app.post(\'/execute\', executeHandler);   app.post(\'/reset\', resetGitHandler); } ``` src/backend/handlers/resetGitHandler.js: ``` import resetGit from \'../../git/resetGit.js\'; export default async function resetGitHandler(req, res) {   try {     await resetGit();     res.status(200).send({ message: \'Git successfully reset\' });   } catch (error) {     res.status(500).send({ message: \'Error in resetting Git\', error });   } } ``` src/git/resetGit.js: ``` import { exec } from \'child_process\'; export default function resetGit() {   // Stash all changes including untracked files   exec(\'git stash -u\', (err, stdout, stderr) => {     if (err) {       console.error(`exec error: ${err}`);       return;     }     console.log(`stdout: ${stdout}`);     // Clean the repository and reset to the latest commit     exec(\'git clean -f -d && git reset --hard\', (err, stdout, stderr) => {       if (err) {         console.error(`exec error: ${err}`);         return;       }       console.log(`stdout: ${stdout}`);       // Checkout prompt.yaml from stash       exec(\'git checkout stash@{0} -- prompt.yaml\', (err, stdout, stderr) => {         if (err) {           console.error(`exec error: ${err}`);           return;         }         console.log(`stdout: ${stdout}`);         // Drop the stash         exec(\'git stash drop\', (err, stdout, stderr) => {           if (err) {             console.error(`exec error: ${err}`);             return;           }           console.log(`stdout: ${stdout}`);         });       });     });   }); } ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Create the commit/ endpoint which commits all new files and changes! Commit message comes in the message field. ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
3,absolute,0.3962,"error, const, await, response, message, app, status, console_log, async, try","['server.js // Required libraries import cors from \'cors\'; import axios from \'axios\'; import fs from \'fs\'; import express from \'express\'; import  from \' // Define HTTPS credentials using the File System (fs) to read the key and certificate files const options = {   key: fs.readFileSync(\'/opt/bitnami/apache/conf/mindfulai.equalreality.com.key\'),   // Path to private key   cert: fs.readFileSync(\'/opt/bitnami/apache/conf/mindfulai.equalreality.com.crt\')   // Path to certificate file }; // Create an instance of an Express application const app = express(); let promptResponse = {}; //API\'s import PromptGPT from \'./PromptGPT.js\'; import { Speak, ResetCache } from \'./ElevenLabsServer.js\';  import Transcribe from \'./WhisperTranscriberServer.js\'; // Use cors middleware for handling Cross-Origin Resource Sharing app.use(cors()); // Tell Express to parse JSON in the body of incoming requests. app.use(express.json()); // Log all incoming requests app.use(function(req, res, next) {     console.log(`${req.method} request for \'${req.url}\'`);     next();  // Pass control to the next middleware function }); // Use the \'Speak\' function as a route handler for the \'/Speak\' route - Eleven Labs app.post(\'/Speak\', Speak); //Use the \'Transcribe\' function as a route handler for the \'/Transcribe\' route - Whisper OpenAI app.post(\'/Transcribe\', Transcribe); // Restart the server app.get(\'/Restart\', function (req, res) {     //Restart(); }); // Call to GPT for older version of JudgeGPT app.post(\'/AskGPT\', function (req, res) {     // Log the body of the request     console.log(req.body);     // Extract youtubeId from the request body     const prompt = req.body.prompt;     // Log the prompt     console.log(prompt);     // Create a new OpenAI Reponse with prompt     promptResponse[prompt] = new PromptGPT(prompt);     // Get the response      promptResponse[prompt].AskGPT().then((data) => {         console.log(data);         console.log(data.generatedText);         res.json({ //why not make res.json = data             generatedText: data.generatedText,             inputPrompt: data.inputPrompt         });     })     .catch((error) => {         // If there is an error, log it and send a response         console.error(error);         res.json(""error"");     }); }); // Define the port and HTTPS server options const port = 3000;  // Define server port. Note: HTTPS servers typically use port 443 by default. // Create and start the HTTPS server var server =  app).listen(port, () => {     console.log(`Secure server is running on port ${port}`); }); WhisperTranscriberServer.js // - How to use whisper // - Redesigning it for Node // Import necessary modules import fetch from \'node-fetch\'; import FormData from \'form-data\'; import multer from \'multer\'; import * as ENV from \'./env.js\'; // Extract API key from ENV const OPENAI_API_KEY = ENV.OPENAI_API_KEY; // Initialize multer middleware const upload = multer(); // Set up the middleware and route handler export default [upload.single(\'file\'), async (req, res) => {     // Extract the audio file from the request     const audioFile = req.file;     // Log the received file for debugging purposes     console.log(audioFile);     // Create the form data to send to the Whisper API     const formData = new FormData();     formData.append(\'file\', audioFile.buffer, { filename: \'audio.wav\', contentType: \'audio/wav\' });     formData.append(\'model\', \'whisper-1\');     // Make the API request     try {         const response = await fetch(\' {             method: \'POST\',             headers: {                 \'Authorization\': \'Bearer \' + OPENAI_API_KEY,                 ...formData.getHeaders(),             },             body: formData,         });         if (!response.ok) {             throw new Error(\'API response was not ok. Status: \' + response.status);         }         const data = await response.json();         if (data.text) {             // Send the transcription back in the response             res.json({ transcription: data.text });         } else if (data.status === \'processing\') {             // For simplicity, let\'s just send a message back             res.json({ message: \'Transcription is still processing\' });         }     } catch (error) {         // Send the error message back in the response         res.json({ error: error.message });     } }]; PromptGPT.js import fs from \'fs\'; import axios from \'axios\'; import * as ENV from \'./env.js\'; const OPENAI_API_KEY = ENV.OPENAI_API_KEY; class PromptGPT {   constructor(inputPrompt)    {     this.status = {       finished: false,       generatedText: """",       startTime: new Date(),       completeTime: """",       inputPrompt: """"     };     this.inputPrompt = inputPrompt;     this.callbacks = [];   }   // Add a function to add a callback   addCallback(callback) {     this.callbacks.push(callback);   }   async AskGPT() {     return new Promise((resolve, reject) => {       console.log(this.inputPrompt);         const maxTokens = 200;         const model = ""text-davinci-003"";//""gpt-3.5-turbo"";//""text-davinci-003"";         axios.post(\' {           model,           prompt: this.inputPrompt,           max_tokens: maxTokens,         }, {           headers: {             \'Authorization\': `Bearer `+OPENAI_API_KEY,             \'Content-Type\': \'application/json\',           },         }).then((response) => {           this.status.finished = true;           this.status.generatedText = response.data.choices[0].text.trim();           this.status.completeTime = new Date();           this.status.inputPrompt = this.inputPrompt;           // Invoke all registered callbacks           for (const callback of this.callbacks) {             try {               callback(null, status);             } catch (e) {               console.error(\'Error invoking callback:\', e);             }           }           console.log(""returning generated text"" + this.status );           resolve(this.status);         }).catch((error) => {           reject(error);         });     });   } } exports default PromptGPT; ElevenLabsServer.js import axios from \'axios\'; import * as ENV from \'./env.js\'; const ELEVENLABS_API_KEY = ENV.ELEVENLABS_API_KEY; var audioCache = new Map(); // Create a cache to store audio results const Speak = async (req, res) => {     console.log(""Speak"");     const text = req.body.text;     var voiceId;     if(req.body.voiceId == null || req.body.voiceId == """")         voiceId = \'21m00Tcm4TlvDq8ikWAM\';  // default voice     else         voiceId = req.body.voiceId;     const cacheKey = `${text}-${voiceId}`; // Create a unique key based on text and voiceId     // If audio data is in cache, send it     if(audioCache.has(cacheKey)) {         return res.send(audioCache.get(cacheKey));     }     console.log(""VoiceId "" + voiceId);     const headers = {         \'Accept\': \'audio/mpeg\',         \'xi-api-key\': ELEVENLABS_API_KEY,         \'Content-Type\': \'application/json\'     };     const body = JSON.stringify({         text: text,         model_id: \'eleven_monolingual_v1\',         voice_settings: {             stability: 0.5,             similarity_boost: 0.5         }     });     try {         const response = await axios.post(` body, {             headers: headers,             responseType: \'arraybuffer\'  // This is important for handling binary data         });         const audio = Buffer.from(response.data, \'binary\');         audioCache.set(cacheKey, audio); // Store the audio data in cache         res.send(audio);     } catch(err) {         // Handle any error that occurred during the API call         console.error(""Error fetching audio:"", err);         res.status(500).send(\'Failed to generate audio\');     } }; // Function to reset the cache const ResetCache = () => {     audioCache.clear();     console.log(""Audio cache has been cleared""); }; export { Speak, ResetCache };']"
4,absolute,0.3887,"error, const, await, response, message, app, status, console_log, async, try","['# Working set src/backend/setupRoutes.js: ``` import { generateHandler } from \'./handlers/generateHandler.js\'; import { servePromptDescriptor } from \'./handlers/servePromptDescriptor.js\'; import { updateTaskHandler } from \'./handlers/updateTaskHandler.js\'; import { listTasks } from \'./handlers/listTasks.js\'; import { executeHandler } from \'./handlers/executeHandler.js\'; import resetGitHandler from \'./handlers/resetGitHandler.js\'; export function setupRoutes(app) {   app.get(\'/descriptor\', servePromptDescriptor);   app.get(\'/tasks\', (req, res) => res.json({ tasks: listTasks() }));   app.post(\'/generate\', generateHandler);   app.post(\'/updatetask\', updateTaskHandler);   app.post(\'/execute\', executeHandler);   app.post(\'/reset\', resetGitHandler); } ``` src/backend/handlers/resetGitHandler.js: ``` import resetGit from \'../../git/resetGit.js\'; export default async function resetGitHandler(req, res) {   try {     await resetGit();     res.status(200).send({ message: \'Git successfully reset\' });   } catch (error) {     res.status(500).send({ message: \'Error in resetting Git\', error });   } } ``` src/git/resetGit.js: ``` import { exec } from \'child_process\'; export default function resetGit() {   // Stash all changes including untracked files   exec(\'git stash -u\', (err, stdout, stderr) => {     if (err) {       console.error(`exec error: ${err}`);       return;     }     console.log(`stdout: ${stdout}`);     // Clean the repository and reset to the latest commit     exec(\'git clean -f -d && git reset --hard\', (err, stdout, stderr) => {       if (err) {         console.error(`exec error: ${err}`);         return;       }       console.log(`stdout: ${stdout}`);       // Checkout prompt.yaml from stash       exec(\'git checkout stash@{0} -- prompt.yaml\', (err, stdout, stderr) => {         if (err) {           console.error(`exec error: ${err}`);           return;         }         console.log(`stdout: ${stdout}`);         // Drop the stash         exec(\'git stash drop\', (err, stdout, stderr) => {           if (err) {             console.error(`exec error: ${err}`);             return;           }           console.log(`stdout: ${stdout}`);         });       });     });   }); } ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Create an endpoint &#34;/status&#34; which runs git status ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
5,absolute,0.3288,"error, const, await, response, message, app, status, console_log, async, try","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Ask for contents of subdirectories if needed. Some files are printed in the working set. Others are listed in their directory, but do not edit them without knowing their contents! # Working set src/backend/handlers/generateHandler.js: ``` import processPrompt from \'../../prompt/processPrompt.js\'; export const generateHandler = async (req, res) => {   try {     const { notes, systemPrompt } = req.body;     const { prompt } = await processPrompt(notes, systemPrompt);     res.json({ prompt: prompt });   } catch (error) {     console.warn(error);     res.json({ error: error.message });   } }; ``` src/frontend/components/GenerateButton.jsx: ``` import handleGeneratePrompt from \'../service/handleGeneratePrompt\'; const GenerateButton = () => {   return (     Generate & Copy Prompt [G]   ); }; export default GenerateButton; ``` src/frontend/service/handleGeneratePrompt.js: ``` import { generatePrompt } from \'../generatePrompt\'; import { marked } from \'marked\'; import { setPrompt } from \'../model/prompt\'; const handleGeneratePrompt = async () => {   const response = await generatePrompt();   navigator.clipboard.writeText(response.prompt)     .then(() => {       console.log(\'Prompt copied to clipboard!\');     })     .catch(err => {       console.error(\'Failed to copy prompt: \', err);     });   const htmlPrompt = marked(response.prompt);   setPrompt(htmlPrompt); }; export default handleGeneratePrompt; ``` src/frontend/generatePrompt.js: ``` import { getBaseUrl } from \'./getBaseUrl\'; const generatePrompt = async (notes) => {   const baseUrl = getBaseUrl();   const response = await fetch(`${baseUrl}/generate`, {     method: \'POST\',     headers: { \'Content-Type\': \'application/json\' },     body: JSON.stringify({ notes, systemPrompt: true })   });   const data = await response.json();   return data; }; export { generatePrompt }; ``` # Task Fix the following issue! In generateHandler, if error message starts with ENOENT, Respond with http status code 404. If error is different, respond with 500. On the frontend, in generatePrompt, throw if response code shows any error. Include the message from the error field. In handleGeneratePrompt catch errors from generatePrompt and alert the error message. ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
6,absolute,0.3125,"error, const, await, response, message, app, status, console_log, async, try","['Hey I have a bash script which is supposed to read through an array of experiment files, these experiments are run by a java programm 5 times. I noticed that the script only does the first experiment in the array as you can see with these logs : List iteration ==========================          experiments/Read10AgentsWithAsk.xml: 1/5          experiments/Read10AgentsWithAsk.xml: 2/5          experiments/Read10AgentsWithAsk.xml: 3/5          experiments/Read10AgentsWithAsk.xml: 4/5          experiments/Read10AgentsWithAsk.xml: 5/5 The Java program that is run is pretty intensive as it runs a heavy subprocess passed as its arguments, the issue started to appear when I added the graddle line to run the java program Here the Json he is supposed to read:  [     {         ""useCase"": ""List iteration"",         ""experimentsFiles"": [             {                 ""filename"": ""experiments/Read10AgentsWithAsk.xml"",                 ""experimentName"": ""Iteration with ask"",                 ""N"": 10             },             {                 ""filename"": ""experiments/Read50AgentsWithAsk.xml"",                 ""experimentName"": ""Iteration with ask"",                 ""N"": 50             },             {                 ""filename"": ""experiments/Read100AgentsWithAsk.xml"",                 ""experimentName"": ""Iteration with ask"",                 ""N"": 100             },             {                 ""filename"": ""experiments/Read500AgentsWithAsk.xml"",                 ""experimentName"": ""Iteration with ask"",                 ""N"": 500             },             {                 ""filename"": ""experiments/Read1000AgentsWithAsk.xml"",                 ""experimentName"": ""Iteration with ask"",                 ""N"": 1000             }         ],         ""numberOfRuns"": 5     } ] And finally here is the script :  #!/bin/bash set -e METRICS_FILE=/tmp/results/results.csv REPORT_FILE=/tmp/results.zip HEADLESS_CONF=/opt/gama-platform/headless/configuration DEBIAN_FRONTEND=noninteractive JAVA_HOME=/opt/gama-platform/jdk export TARGET_EQUINOX_CP=$(ls /opt/gama-platform/plugins/org.eclipse.equinox.launcher*.jar) echo \'""Experiment name"",""N"",""CPU load"",""Memory consumed (bytes)"",""Execution time (ms)""\' > ""$METRICS_FILE"" jq -c \'.[]\' ../benchmark_targets.json | while read usecase; do     echo ""$(echo $usecase | jq -r \'.[""useCase""]\')""     echo ""==========================""     number_of_runs=$(echo ""$usecase"" | jq -r \'.[""numberOfRuns""]\')     echo ""$usecase"" | jq -c \'.[""experimentsFiles""][]\' | while read experiment; do         experiment_file=""../$(echo $experiment | jq -r \'.[""filename""]\')""         N=$(echo ""$experiment"" | jq -r \'.[""N""]\')         experiment_name=$(echo ""$experiment"" | jq -r \'.[""experimentName""]\')         for i in $(seq 1 $number_of_runs); do             echo -e "" t $(echo $experiment | jq -r \'.[""filename""]\'): $i/$number_of_runs""             passWork=/tmp/.workspace$(sudo find /tmp -name "".workspace*"" | wc -l)             result_file=$(gradle run                  --args=""java -cp $TARGET_EQUINOX_CP -Djava.awt.headless=true org.eclipse.core.launcher.Main -configuration $HEADLESS_CONF -application msi.gama.headless.product -data $passWork $experiment_file /tmp""                  | grep ""Result File:"" | cut -d\':\' -f2)             echo "" ""$experiment_name "",$N,$(jq -r \'.[""cpuLoad""]\' $result_file),$(jq -r \'.[""totalPhysicalMemorySize""]\' $result_file),$(jq -r \'.[""duration""]\' $result_file)"" >> ""$METRICS_FILE""         done     done done echo ""Done!"" What do you think is causing the issue? ']"
7,absolute,0.2966,"error, const, await, response, message, app, status, console_log, async, try","['# Working set src/frontend/components/GitStatusDisplay.jsx: ``` import { onMount, createEffect } from \'solid-js\'; import { gitStatus } from \'../stores/gitStatus\'; import { fetchGitStatus } from \'../service/fetchGitStatus\'; const GitStatusDisplay = () => {   let statusContainer;   onMount(fetchGitStatus);   createEffect(() => {     const gitStatusValue = gitStatus();     if (gitStatusValue) {       if (gitStatusValue.error && gitStatusValue.error.stderr.includes(\'Not a git repository\')) {         statusContainer.innerText = \'Not a git repo. Run  \'npx junior-init \' to initialize!\';       } else if (gitStatusValue.message && gitStatusValue.message !== \'\') {         statusContainer.innerText = gitStatusValue.message;       }     }   });   return (        ); }; export default GitStatusDisplay; ``` src/backend/handlers/gitStatusHandler.js: ``` import gitStatus from \'../../git/gitStatus.js\'; export default async function gitStatusHandler(req, res) {   try {     const status = await gitStatus();     res.status(200).send({ status });   } catch (error) {     res.status(500).send({ message: \'Error in getting Git status\', error });   } } ``` # Task Fix the following issue! 1. Move the git status result from the status field of the response to the message field. 2. When the endpoint reports an error in the error field similar to this (check stderr for &#34;Not a git repository&#34;): {   &#34;message&#34;: &#34;Error in getting Git status&#34;,   &#34;error&#34;: {     &#34;code&#34;: 128,     &#34;killed&#34;: false,     &#34;signal&#34;: null,     &#34;cmd&#34;: &#34;git status --porcelain=v1&#34;,     &#34;stdout&#34;: &#34;&#34;,     &#34;stderr&#34;: &#34;fatal: Not a git repository (or any of the parent directories): .git n&#34;   } } then display &#34;Not a git repo. Run &#39;npx junior-init&#39; to initialize!&#34;. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
8,absolute,0.2768,"error, const, await, response, message, app, status, console_log, async, try","[""# Working set src/backend/handlers/resetGitHandler.js: ``` import resetGit from '../../git/resetGit.js'; export default async function resetGitHandler(req, res) {   try {     await resetGit();     res.status(200).send({ message: 'Git successfully reset' });   } catch (error) {     res.status(500).send({ message: 'Error in resetting Git', error });   } } ``` src/backend/setupRoutes.js: ``` import { generateHandler } from './handlers/generateHandler.js'; import { servePromptDescriptor } from './handlers/servePromptDescriptor.js'; import { updateTaskHandler } from './handlers/updateTaskHandler.js'; import { listTasks } from './handlers/listTasks.js'; import { executeHandler } from './handlers/executeHandler.js'; import resetGitHandler from './handlers/resetGitHandler.js'; export function setupRoutes(app) {   app.get('/descriptor', servePromptDescriptor);   app.get('/tasks', (req, res) => res.json({ tasks: listTasks() }));   app.post('/generate', generateHandler);   app.post('/updatetask', updateTaskHandler);   app.post('/execute', executeHandler);   app.post('/reset', resetGitHandler); } ``` src/frontend/App.jsx: ``` import NotesInput from './components/NotesInput'; import StartButton from './components/StartButton'; import ExecuteButton from './components/ExecuteButton'; import PromptDisplay from './components/PromptDisplay'; import TasksList from './components/TasksList'; import PromptDescriptor from './components/PromptDescriptor'; import NavBar from './components/NavBar'; import { notes, setNotes } from './stores/notes'; import { setPrompt } from './stores/prompt'; const App = () => {   return (                                                              ); }; export default App; ``` src/frontend/components/ExecuteButton.jsx: ``` import { executeChange } from '../service/executeChange'; const ExecuteButton = () => {   const handleExecuteChange = async () => {     const change = await navigator.clipboard.readText();     const response = await executeChange(change);     console.log(response.message);   };   return (     // Updated button color to a less flashy orange     Paste & Execute Change   ); }; export default ExecuteButton; ``` src/frontend/service/executeChange.js: ``` import { getBaseUrl } from '../getBaseUrl'; const executeChange = async (change) => {   const baseUrl = getBaseUrl();   const response = await fetch(`${baseUrl}/execute`, {     method: 'POST',     headers: { 'Content-Type': 'application/json' },     body: JSON.stringify({ change })   });   const data = await response.json();   return data; }; export { executeChange }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: Create a new button for the reset git feature. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ""]"
9,absolute,0.2734,"error, const, await, response, message, app, status, console_log, async, try","['In the Ethereum Virtual Machine, is the term ""slot"" equivalent to ""word"" when referring to storage slots? that is, can I refer to storage slots as ""EVM words""?']"
10,block,0.6537,"return, self, name, string, value, type, key, none, object, action","['Can you give me a short and simple explanation for what it means for a JS bundler to externalize a module? If the output format is ESM, can you give me an example output from a given input?']"
11,block,0.6414,"return, self, name, string, value, type, key, none, object, action",['Which of these is better Elisp? (when-let (x (foo))   (bar x)) (when-let ((x (foo)))   (bar x))']
12,block,0.5307,"return, self, name, string, value, type, key, none, object, action","['on github, how can i block merging a pr if tests fail?']"
13,block,0.5121,"return, self, name, string, value, type, key, none, object, action","['we want to correct a grammatical error in an open source project, which can be located at ']"
14,block,0.4178,"return, self, name, string, value, type, key, none, object, action",['I have written a terminal app which does stuff when you type a line of text and hit enter I want to add support for multi-line inputs as well What are other terminal apps that solve this and what patterns do they use?']
15,block,0.3769,"return, self, name, string, value, type, key, none, object, action","['I currently have this code: from oplangchain.chains.llm import LLMChain from oplangchain.chat_models.openai import ChatOpenAI from oplangchain.output_parsers.openai_functions import JsonOutputFunctionsParser from oplangchain.prompts.chat import ChatPromptTemplate from oplangchain.chains.openai_functions.openapi import get_openapi_chain from oplangchain.chains.openai_functions.openapi import openapi_spec_to_openai_fn from oplangchain.utilities.openapi import OpenAPISpec from typing import Union import json # def test_tmp() -> None: #     chain = get_openapi_chain( #         "" #     ) #     res = chain.run(""What are some options for a men\'s large blue button down shirt"") #     # assert that res object includes key products #     assert ""products"" in res test_plugin = {     ""name"": ""askyourpdf"",     ""openapi_url"": ""     ""messages"": [         {             ""role"": ""user"",             ""content"": ""summarize this pdf          }     ],     ""truncate"": False, } def test_full_suite() -> None:     def openapi_to_functions_and_call_api_fn():         openapi_url = test_plugin[""openapi_url""]         print(f"" ""{test_plugin[\'name\']} "" openapi_url: "", openapi_url)         if openapi_url == None:             raise ValueError(""OpenAPI URL not found in manifest"")         if isinstance(openapi_url, Union[OpenAPISpec, str]):             for conversion in (                 # each of the below specs can get stuck in a while loop                 OpenAPISpec.from_url,                 OpenAPISpec.from_file,                 OpenAPISpec.from_text,             ):                 try:                     openapi_url = conversion(openapi_url)  # type: ignore[arg-type]                     break                 except Exception:  # noqa: E722                     pass             if isinstance(openapi_url, str):                 raise ValueError(f""Unable to parse spec from source {openapi_url}"")         openai_fns, call_api_fn = openapi_spec_to_openai_fn(openapi_url)         print(             f"" ""{test_plugin[\'name\']} "" functions: "", json.dumps(openai_fns, indent=2)         )         return openai_fns, call_api_fn     openai_fns, call_api_fn = openapi_to_functions_and_call_api_fn()     llm = ChatOpenAI(         model=""gpt-3.5-turbo-0613"",     )     llm_chain = LLMChain(         llm=llm,         prompt=ChatPromptTemplate.from_template(""{query}""),         llm_kwargs={""functions"": openai_fns},         output_parser=JsonOutputFunctionsParser(args_only=False),         output_key=""function"",         verbose=True,         # **(llm_kwargs or {}),     )     def estimate_tokens(s: str) -> int:         return len(s) // 2     def tokens_to_chars(tokens: int) -> int:         return tokens * 2     functions_tokens = estimate_tokens(json.dumps(openai_fns))     try:         # MESSAGES TO PROMPT         # if there is a message with role system then pop it, iterate through all messages to find it         system_message = """"         for message in test_plugin[""messages""]:             if message[""role""] == ""system"":                 system_message = ""system"" + "": "" + message[""content""] + "" n""                 test_plugin[""messages""].remove(message)                 break         # print(""system_message: "", system_message)         # Combine messages into one string         messages_aggregate = "" n"".join(             [                 f""{message[\'role\']}: {message[\'content\']}""                 for message in test_plugin[""messages""]             ]         )         complete_messages_aggregate_tokens = estimate_tokens(             system_message + messages_aggregate         )         # print(""complete_messages_aggregate_tokens: "", complete_messages_aggregate_tokens)         # print(""functions_tokens: "", functions_tokens)         messages_truncation_offset = tokens_to_chars(             max(complete_messages_aggregate_tokens + functions_tokens - 4096, 0)         )         # print(""messages_truncation_offset: "", messages_truncation_offset)         messages_aggregate = messages_aggregate[messages_truncation_offset:]         # TODO: temp fix to prevent collation of messages         if messages_truncation_offset > 0:             messages_aggregate = ""user/assistant: "" + messages_aggregate         complete_messages_aggregate = system_message + messages_aggregate         # print(""complete_messages_aggregate: "", complete_messages_aggregate)         # print(""final length: "", estimate_tokens(complete_messages_aggregate))         # Replace prompt with messageAggregate         llm_chain_out = llm_chain.run(complete_messages_aggregate)         print(""Using plugin: "" + test_plugin[""name""])     except KeyError as e:         # if error includes ""function_call"" then it is not a plugin function         if ""function_call"" in str(e):             raise ValueError(""Not a plugin function"")         else:             raise e     if llm_chain_out[""name""] not in [function[""name""] for function in openai_fns]:         raise ValueError(""Not a plugin function"")     # EDGE CASE     def remove_empty_from_dict(input_dict):         cleaned_dict = {}         for k, v in input_dict.items():             if isinstance(v, dict):                 v = remove_empty_from_dict(v)             if v and v != ""none"":  # only add to cleaned_dict if v is not empty                 cleaned_dict[k] = v         return cleaned_dict     llm_chain_out[""arguments""] = remove_empty_from_dict(llm_chain_out[""arguments""])     print(         f"" ""{test_plugin[\'name\']} "" llm_chain_out: "",         json.dumps(llm_chain_out, indent=2),     )     # make the api call     def request_chain(name, arguments):         res = call_api_fn(name, arguments, headers=None, params=None)         return res     request_out = request_chain(**llm_chain_out)     print(""request_out: "", request_out)     json_response = request_out.json()     def truncate_json_root(json_response, truncate_to):         return json_response     if test_plugin[""truncate""]:         truncate_to = (             test_plugin[""truncate""]             if not isinstance(test_plugin[""truncate""], bool)             else None         )         if truncate_to is None:             token_slack = 56 + 300             truncate_to = (                 4096                 - estimate_tokens(json.dumps(test_plugin[""messages""][-1]))                 - token_slack                 - 0             )         json_response = truncate_json_root(json_response, truncate_to)     print(         f"" ""{test_plugin[\'name\']} "" json_response: "",         json.dumps(json_response, indent=2),     )     try:         return {             ""role"": ""function"",             ""name"": llm_chain_out[""name""],             ""content"": json.dumps(json_response),         }     except json.decoder.JSONDecodeError:         raise json.decoder.JSONDecodeError(             f""API call failed, API returned the following non-JSON response: n{response.content}""         ) When I run it I get the following response  ...         request_out = request_chain(**llm_chain_out)         print(""request_out: "", request_out) >       json_response = request_out.json() tests test_openplugin.py:153: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _   self = , kwargs = {}     def json(self, **kwargs):         r""""""Returns the json-encoded content of a response, if any.         :param  * *kwargs: Optional arguments that ``json.loads`` takes.         :raises requests.exceptions.JSONDecodeError: If the response body does not             contain valid json.         """"""         if not self.encoding and self.content and len(self.content) > 3:             # No encoding set. JSON RFC 4627 section 3 states we should expect             # UTF-8, -16 or -32. Detect which one to use; If the detection or             # decoding fails, fall back to `self.text` (using charset_normalizer to make             # a best guess).             encoding = guess_json_utf(self.content)             if encoding is not None:                 try:                     return complexjson.loads(self.content.decode(encoding), **kwargs)                 except UnicodeDecodeError:                     # Wrong UTF codec detected; usually because it\'s not UTF-8                     # but some other 8-bit codec.  This is an RFC violation,                     # and the server didn\'t bother to tell us what codec *was*                     # used.                     pass                 except JSONDecodeError as e:                     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)         try:             return complexjson.loads(self.text, **kwargs)         except JSONDecodeError as e:             # Catch JSON-related errors and raise as requests.JSONDecodeError             # This aliases json.JSONDecodeError and simplejson.JSONDecodeError >           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos) E           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0) .. .. venv lib site-packages requests models.py:975: JSONDecodeError ---------------------------------------------------------------------------------------------------- Captured stdout call ----------------------------------------------------------------------------------------------------  ""askyourpdf"" openapi_url:   ""askyourpdf"" functions:  [   {     ""name"": ""loadPdf"",     ""description"": ""Load a PDF document"",     ""parameters"": {       ""type"": ""object"",       ""properties"": {         ""json"": {           ""properties"": {             ""pdf_url"": {               ""type"": ""string"",               ""schema_format"": ""uri"",               ""description"": ""The temporary URL of the PDF document to load.""             }           },           ""type"": ""object"",           ""required"": [             ""pdf_url""           ]         }       }     }   },   {     ""name"": ""queryPdf"",     ""description"": ""Query a loaded PDF document"",     ""parameters"": {       ""type"": ""object"",       ""properties"": {         ""json"": {           ""properties"": {             ""query"": {               ""type"": ""string"",               ""description"": ""The query or question to ask based on the PDF document.""             },             ""pdf_url"": {               ""type"": ""string"",               ""schema_format"": ""uri"",               ""description"": ""The temporary URL of the PDF document that is already loaded.""             }           },           ""type"": ""object"",           ""required"": [             ""query"",             ""pdf_url""           ]         }       }     }   } ] > Entering new LLMChain chain... Prompt after formatting: Human: user: summarize this pdf  > Finished chain. Using plugin: askyourpdf ""askyourpdf"" llm_chain_out:  {   ""name"": ""loadPdf"",   ""arguments"": {     ""json"": {       ""pdf_url"": ""     }   } } request_out:  ']"
16,block,0.3582,"return, self, name, string, value, type, key, none, object, action","['Why is my redirect not working? Here is my client side code DOM.btnSubmitPlugin.addEventListener(""click"", async () => {     const pluginData = {         name: DOM.inputPluginName.value,         creator: DOM.inputPluginCreator.value,         currentVersion: DOM.inputPluginVersion.value,         latestVersion: radioValuetoBoolean().version,         isNetworkActive: radioValuetoBoolean().network,     };     // console.log(pluginData);     try {         const response = await fetch(""/plugins"", {             method: ""POST"",             headers: {                 ""Content-Type"": ""application/json"",             },             body: JSON.stringify(pluginData),         });         if (response.ok) {             console.log(""Data sent to server"");         } else {             const errorData = await response.json();             throw errorData;         }     } catch (e) {         console.error(e.error);     } finally {             } }); And here is my relevant server-side code router.post(""/"", async (request, response) => {     const plugin = new Plugin({         name: request.body.name,         creator: request.body.creator,         currentVersion: request.body.currentVersion,         latestVersion: request.body.latestVersion,         isNetworkActive: request.body.isNetworkActive,         sitesActivated: request.body.sitesActivated,     });     console.log(plugin);     try {         await Plugin.create(plugin);         return response.redirect(`/plugins/${plugin._id}`);     } catch (error) {         console.error(error);     } }); Everything else works as intended, except that it will not redirect. What is the issue here? ']"
17,block,0.3326,"return, self, name, string, value, type, key, none, object, action","['=== Author: JushBJJ Name: ""Mr. Ranedeer"" Version: 2.6.2 === [student configuration]      Depth: Highschool      Learning-Style: Active      Communication-Style: Socratic      Tone-Style: Encouraging      Reasoning-Framework: Causal      Emojis: Enabled (Default)      Language: English (Default)     You are allowed to change your language to *any language* that is configured by the student. [Personalization Options]     Depth:         [""Elementary (Grade 1-6)"", ""Middle School (Grade 7-9)"", ""High School (Grade 10-12)"", ""Undergraduate"", ""Graduate (Bachelor Degree)"", ""Master\'s"", ""Doctoral Candidate (Ph.D Candidate)"", ""Postdoc"", ""Ph.D""]     Learning Style:         [""Visual"", ""Verbal"", ""Active"", ""Intuitive"", ""Reflective"", ""Global""]     Communication Style:         [""Formal"", ""Textbook"", ""Layman"", ""Story Telling"", ""Socratic""]     Tone Style:         [""Encouraging"", ""Neutral"", ""Informative"", ""Friendly"", ""Humorous""]     Reasoning Framework:         [""Deductive"", ""Inductive"", ""Abductive"", ""Analogical"", ""Causal""] [Personalization Notes]     1. ""Visual"" learning style requires plugins (Tested plugins are ""Wolfram Alpha"" and ""Show me"") [Commands - Prefix: ""/""]     test: Execute format      config: Prompt the user through the configuration process, incl. asking for the preferred language.     plan: Execute      start: Execute      continue:      language: Change the language of yourself. Usage: /language [lang]. E.g: /language Chinese     example: Execute  [Function Rules]     1. Act as if you are executing code.     2. Do not say: [INSTRUCTIONS], [BEGIN], [END], [IF], [ENDIF], [ELSEIF]     3. Do not write in codeblocks when creating the curriculum.     4. Do not worry about your response being cut off, write as effectively as you can. [Functions]     [say, Args: text]         [BEGIN]             You must strictly say and only say word-by-word  while filling out the  with the appropriate information.         [END]     [teach, Args: topic]         [BEGIN]             Teach a complete lesson from leading up from the fundamentals based on the example problem.             As a tutor, you must teach the student accordingly to the depth, learning-style, communication-style, tone-style, reasoning framework, emojis, and language.             You must follow instructions on Ranedeer Tool you are using into the lesson by immersing the student into the world the tool is in.         [END]     [sep]         [BEGIN]             say ---         [END]     [post-auto]         [BEGIN]                          execute              execute          [END]     [Curriculum]         [INSTRUCTIONS]             Use emojis in your plans. Strictly follow the format.             Make the curriculum as complete as possible without worrying about response length.         [BEGIN]             say Assumptions: Since that you are  student, I assume you already know:  student already knows>             say Emoji Usage:  else ""None""             say Ranedeer Tools:                           say A  depth student curriculum:             say ## Prerequisite (Optional)             say 0.1:              say ## Main Curriculum (Default)             say 1.1:              say Please say **""/start""** to start the lesson plan.             say You can also say **""/start ** to start the lesson plan with the Ranedeer Tool.                      [END]     [Lesson]         [INSTRUCTIONS]             Pretend you are a tutor who teaches in  at a  depth. If emojis are enabled, use emojis to make your response more engaging.             You are an extremely kind, engaging tutor who follows the student\'s learning style, communication style, tone style, reasoning framework, and language.             If the subject has math in this topic, focus on teaching the math.             Teach the student based on the example question given.             You will communicate the lesson in a , use a , , and , and  with  to the student.         [BEGIN]             say ## Thoughts             say                           say **Topic**:                           say Ranedeer Tools:              say **Let\'s start with an example:**              say **Here\'s how we can solve it:**              say ## Main Lesson             teach                           say In the next lesson, we will learn about              say Please say **/continue** to continue the lesson plan             say Or **/test** to learn more **by doing**                      [END]     [Test]         [BEGIN]             say **Topic**:                           say Ranedeer Plugins:              say Example Problem:                           say Now let\'s test your knowledge.             say ### Simple Familiar                          say ### Complex Familiar                          say ### Complex Unfamiliar                          say Please say **/continue** to continue the lesson plan.                      [END]     [Question]         [INSTRUCTIONS]             This function should be auto-executed if the student asks a question outside of calling a command.         [BEGIN]             say **Question**:                           say **Answer**:              say ""Say **/continue** to continue the lesson plan""                      [END]     [Suggestions]         [INSTRUCTIONS]             Imagine you are the student, what would would be the next things you may want to ask the tutor?             This must be outputted in a markdown table format.             Treat them as examples, so write them in an example format.             Maximum of 2 suggestions.         [BEGIN]             say          [END]     [Configuration]         [BEGIN]             say Your  preferences are:             say ** Depth:** <> else None             say ** Learning Style:** <> else None             say ** Communication Style:** <> else None             say ** Tone Style:** <> else None             say ** Reasoning Framework:** <> else None             say ** Emojis:**              say ** Language:** <> else English             say You say **/example** to show you a example of how your lessons may look like.             say You can also change your configurations anytime by specifying your needs in the **/config** command.         [END]     [Config Example]         [BEGIN]             say **Here is an example of how this configuration will look like in a lesson:**                                                                 say Self-Rating:              say You can also describe yourself and I will auto-configure for you: ****         [END]     [Token Check]         [BEGIN]             [IF magic-number != UNDEFINED]                 say **TOKEN-CHECKER:** You are safe to continue.             [ELSE]                 say **TOKEN-CHECKER:**  WARNING  The number of tokens has now overloaded, Mr. Ranedeer may lose personality, forget your lesson plans and your configuration.             [ENDIF]         [END] [Init]     [BEGIN]         var logo = ""         var magic-number =          say           say Generated Magic Number: ****         say ""Hello!  My name is **Mr. Ranedeer**, your personalized AI Tutor. I am running  made by author""                  say ""** Mr. Ranedeer requires GPT-4 to run properly **""         say ""It is recommended that you get **ChatGPT Plus** to run Mr. Ranedeer. Sorry for the inconvenience :)""                  say ""** Please read the guide to configurations here:** [Here](  ""                  say ""Let\'s begin by saying **/plan [Any topic]** to create a lesson plan for you.""     [END] [Ranedeer Tools]     [INSTRUCTIONS]          1. If there are no Ranedeer Tools, do not execute any tools. Just respond ""None"".         2. Do not say the tool\'s description.     [PLACEHOLDER - IGNORE]         [BEGIN]         [END] execute  ']"
18,block,0.3309,"return, self, name, string, value, type, key, none, object, action",['Please provide an exhaustive list of desktop user interface components.']
19,block,0.3146,"return, self, name, string, value, type, key, none, object, action","['I want to update this function, I added a comment `chatgpt:` which describes what I want to do. can you help? /// Unescape and push json strings static int ndb_builder_push_json_str(struct ndb_builder *builder,      const char *str, int len,      union packed_str *pstr) { // let\'s not care about de-duping these. we should just unescape // in-place directly into the strings table.  // TODO: we still want single-char packed strings const char *p, *end, *start; end = str + len; *pstr = ndb_offset_str(builder->strings.p - builder->strings.start); for (p = str; p strings, \' t\')) return 0; break; case \'n\': if (!cursor_push_byte(&builder->strings, \' n\')) return 0; break; case \'r\': if (!cursor_push_byte(&builder->strings, \' r\')) return 0; break; case \'b\': if (!cursor_push_byte(&builder->strings, \' b\')) return 0; break; case \'f\': if (!cursor_push_byte(&builder->strings, \' f\')) return 0; break; case \' \': if (!cursor_push_byte(&builder->strings, \' \')) return 0; break; case \'""\': if (!cursor_push_byte(&builder->strings, \'""\')) return 0; break; // Optionally handle Unicode escape sequences ( uXXXX) if needed. case \'u\': // these aren\'t handled yet return 0; default: // Possibly handle an error here or just push the backslash and the character. if (!cursor_push_byte(&builder->strings, *p) ||     !cursor_push_byte(&builder->strings, *(p+1))) return 0; break; } p++; } else { // chatgpt: instead of this I want something like // cursor_push(&builder->strings, start, p - start) // which will push chunks all at once inbetween escape // sequences if (!cursor_push_byte(&builder->strings, *p)) return 0; } } return cursor_push_byte(&builder->strings, \' 0\'); } ']"
20,bold,0.5202,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import MultiSelectHeader from \'./MultiSelectHeader\'; import computeFilteredList from \'./computeFilteredList\'; import handleResultSetItemClick from \'./handleResultSetItemClick\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const selectedItemsSignal = props.selectedItemsSignal || createSignal([]);   const [selectedItems, setSelectedItems] = selectedItemsSignal;   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [...selectedItems(), filteredList()[0]];       setSelectedItems(updatedItems);     }   };   const handleFilterListItemClick = (item) => {     const updatedItems = [...selectedItems(), item];     setSelectedItems(updatedItems);   };   const onResultSetItemClick = async (item, itemId) => {     const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);     setSelectedItems(updatedItems);   };   const handleClearSelection = () => {     setSelectedItems([]);   };   return (                                                                                       ); }; export default MultiSelect; ``` ./src/frontend/components/MultiSelect/computeFilteredList.js: ``` import computeRank from \'./computeRank\'; export default function computeFilteredList(searchValue, items, compare, itemCount, selectedItems = [], defaultQuery = """") {   const comparisonFunction = compare || ((item, filter) => item.includes(filter) ? filter.length : 0);      return items     .filter(item => !selectedItems.includes(item) && computeRank(item, searchValue, defaultQuery, comparisonFunction) > 0)     .sort((a, b) => computeRank(b, searchValue, defaultQuery, comparisonFunction) - computeRank(a, searchValue, defaultQuery, comparisonFunction))     .slice(0, itemCount); } ``` ./src/frontend/components/AttentionFileList.jsx: ``` import { createEffect, createSignal } from \'solid-js\'; import { fileList, setFileList } from \'../model/fileList\'; import fetchFileList from \'../service/fetchFileList\'; import MultiSelect from \'./MultiSelect/MultiSelect\'; import getComparison from \'../service/helpers/getComparison\'; import flattenPaths from \'../service/helpers/flattenPaths\'; import extractQuery from \'../service/helpers/extractQuery\'; import { requirements } from \'../model/requirements\'; import { attention, setAttention } from \'../model/attentionModel\'; import { getAttentionFromDescriptor } from \'../service/getAttentionFromDescriptor\'; import { handleAttentionChange } from \'../service/handleAttentionChange\'; const AttentionFileList = () => {   createEffect(async () => {     const data = await fetchFileList();     const flattenedPaths = flattenPaths(data, \'\');     setFileList(flattenedPaths);   });   createEffect(() => {     const attentionFromDescriptor = getAttentionFromDescriptor();     setAttention(attentionFromDescriptor);   });   const [defaultQuery, setDefaultQuery] = createSignal("""");   createEffect(() => {     setDefaultQuery(extractQuery(requirements()));   });   const onAttentionChange = async (newAttention) => {     if (await handleAttentionChange(newAttention)) {       setAttention(newAttention);     }   };   return (                    ); }; export default AttentionFileList; ``` ./src/frontend/service/helpers/extractQuery.js: ``` const ignoreList = [\'and\', \'or\', \'the\']; export default function extractQuery(requirements) {   return requirements.split(/ W+/)     .filter(word => word.length > 2 && !ignoreList.includes(word.toLowerCase()))     .join(\' \'); } ``` ./src/frontend/service/helpers/getComparison.js: ``` const getComparison = () => {   return (item, filter) => {     const filterWords = filter.split(/ s+/).map(word => word.toLowerCase());     const lowercasedItem = item.toLowerCase();     // Calculate the rank based on the sum of the lengths of matching words.     const rank = filterWords.reduce((acc, word) => lowercasedItem.includes(word) ? acc + word.length : acc, 0);     return rank;   }; }; export default getComparison; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: in multiselect, queries should be array of objects like: { keyword: ""frontend"", weight: 1.0 } Modify extractQuery to return such an array. Call extractquery on the search value In getComparison, eliminate split and weight words based correctly ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
21,bold,0.5173,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import MultiSelectHeader from \'./MultiSelectHeader\'; import computeFilteredList from \'./computeFilteredList\'; import handleResultSetItemClick from \'./handleResultSetItemClick\'; import extractQuery from \'../../service/helpers/extractQuery\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const selectedItemsSignal = props.selectedItemsSignal || createSignal([]);   const [selectedItems, setSelectedItems] = selectedItemsSignal;   createEffect(() => {     const currentQuery = searchValue() === props.defaultQuery() ? props.defaultQuery() : extractQuery(searchValue());     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [...selectedItems(), filteredList()[0]];       setSelectedItems(updatedItems);     }   };   const handleFilterListItemClick = (item) => {     const updatedItems = [...selectedItems(), item];     setSelectedItems(updatedItems);   };   const onResultSetItemClick = async (item, itemId) => {     const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);     setSelectedItems(updatedItems);   };   const handleClearSelection = () => {     setSelectedItems([]);   };   return (                                                                                       ); }; export default MultiSelect; ``` ./src/frontend/components/MultiSelect/computeFilteredList.js: ``` import computeRank from \'./computeRank\'; export default function computeFilteredList(searchValue, items, compare, itemCount, selectedItems = [], defaultQuery = """") {   const comparisonFunction = compare || ((item, filter) => item.includes(filter) ? filter.length : 0);      return items     .filter(item => !selectedItems.includes(item) && computeRank(item, searchValue, defaultQuery, comparisonFunction) > 0)     .sort((a, b) => computeRank(b, searchValue, defaultQuery, comparisonFunction) - computeRank(a, searchValue, defaultQuery, comparisonFunction))     .slice(0, itemCount); } ``` ./src/frontend/components/AttentionFileList.jsx: ``` import { createEffect, createSignal } from \'solid-js\'; import { fileList, setFileList } from \'../model/fileList\'; import fetchFileList from \'../service/fetchFileList\'; import MultiSelect from \'./MultiSelect/MultiSelect\'; import getComparison from \'../service/helpers/getComparison\'; import flattenPaths from \'../service/helpers/flattenPaths\'; import extractQuery from \'../service/helpers/extractQuery\'; import { requirements } from \'../model/requirements\'; import { attention, setAttention } from \'../model/attentionModel\'; import { getAttentionFromDescriptor } from \'../service/getAttentionFromDescriptor\'; import { handleAttentionChange } from \'../service/handleAttentionChange\'; const AttentionFileList = () => {   createEffect(async () => {     const data = await fetchFileList();     const flattenedPaths = flattenPaths(data, \'\');     setFileList(flattenedPaths);   });   createEffect(() => {     const attentionFromDescriptor = getAttentionFromDescriptor();     setAttention(attentionFromDescriptor);   });   const [defaultQuery, setDefaultQuery] = createSignal("""");   createEffect(() => {     setDefaultQuery(extractQuery(requirements()));   });   const onAttentionChange = async (newAttention) => {     if (await handleAttentionChange(newAttention)) {       setAttention(newAttention);     }   };   return (                    ); }; export default AttentionFileList; ``` ./src/frontend/service/helpers/extractQuery.js: ``` const ignoreList = [\'and\', \'or\', \'the\']; export default function extractQuery(requirements) {   return requirements.split(/ W+/)     .filter(word => word.length > 2 && !ignoreList.includes(word.toLowerCase()))     .map(word => ({ keyword: word.toLowerCase(), weight: 1.0 })); } ``` ./src/frontend/service/helpers/getComparison.js: ``` const getComparison = () => {   return (item, filter) => {     const lowercasedItem = item.toLowerCase();     // Calculate the rank based on the sum of the lengths of matching words multiplied by their weights.     const rank = filter.reduce((acc, { keyword, weight }) => {       return lowercasedItem.includes(keyword) ? acc + (keyword.length * weight) : acc;     }, 0);     return rank;   }; }; export default getComparison; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Words of the default query should be scored as follows: - The first one is 1.0 - Next is 12.5% lower - And so on - But stop going down at 0.25 Put the constants to an object and return the object from a function in a separated file. ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
22,bold,0.4863,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/MultiSelect/FilteredList.jsx: ``` import ListItem from ""./ListItem""; import FullScreenPopup from ""./FullScreenPopup""; import { createSignal } from \'solid-js\'; const FilteredList = (props) => {   const [showPopup, setShowPopup] = createSignal(false);   const [popupPath, setPopupPath] = createSignal(\'\');   const handleLongTap = (path) => {     setPopupPath(path);     setShowPopup(true);   };   return (                     {props.items.map((item, idx) => )}              { showPopup() &&  setShowPopup(false)} /> }        ); }; export default FilteredList; ``` ./src/frontend/components/MultiSelect/ResultSet.jsx: ``` import ListItem from ""./ListItem""; const ResultSet = (props) => {   return (            {props.items.length === 0 ? (         {props.emptyMessage}       ) : (                    {props.items.map(item => )}                )}        ); }; export default ResultSet; ``` ./src/frontend/components/AttentionFileList.jsx: ``` import { createEffect, createSignal } from \'solid-js\'; import { fileList, setFileList } from \'../model/fileList\'; import fetchFileList from \'../service/fetchFileList\'; import MultiSelect from \'./MultiSelect/MultiSelect\'; import getComparison from \'../service/helpers/getComparison\'; import flattenPaths from \'../service/helpers/flattenPaths\'; import extractQuery from \'../service/helpers/extractQuery\'; import { requirements } from \'../model/requirements\'; import { attention, setAttention } from \'../model/attentionModel\'; import { getAttentionFromDescriptor } from \'../service/getAttentionFromDescriptor\'; import { handleAttentionChange } from \'../service/handleAttentionChange\'; const AttentionFileList = () => {   createEffect(async () => {     const data = await fetchFileList();     const flattenedPaths = flattenPaths(data, \'\');     setFileList(flattenedPaths);   });   createEffect(() => {     const attentionFromDescriptor = getAttentionFromDescriptor();     setAttention(attentionFromDescriptor);   });   const [defaultQuery, setDefaultQuery] = createSignal("""");   createEffect(() => {     setDefaultQuery(extractQuery(requirements()));   });   const onAttentionChange = async (newAttention) => {     if (await handleAttentionChange(newAttention)) {       setAttention(newAttention);     }   };   return (                    ); }; export default AttentionFileList; ``` ./src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import MultiSelectHeader from \'./MultiSelectHeader\'; import computeFilteredList from \'./computeFilteredList\'; import handleResultSetItemClick from \'./handleResultSetItemClick\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const selectedItemsSignal = props.selectedItemsSignal || createSignal([]);   const [selectedItems, setSelectedItems] = selectedItemsSignal;   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [...selectedItems(), filteredList()[0]];       setSelectedItems(updatedItems);     }   };   const handleFilterListItemClick = (item) => {     const updatedItems = [...selectedItems(), item];     setSelectedItems(updatedItems);   };   const onResultSetItemClick = async (item, itemId) => {     const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);     setSelectedItems(updatedItems);   };   const handleClearSelection = () => {     setSelectedItems([]);   };   return (                                                                                       ); }; export default MultiSelect; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Long tap on result set list items should also open the code viewer, exactly like in the filtered list ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
23,bold,0.4725,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/MultiSelect/ResultSet.jsx: ``` import ListItem from ""./ListItem""; import handleUnselectItem from ""./handleUnselectItem""; const ResultSet = (props) => {   const handleItemClick = (item) => {     handleUnselectItem(item, props.setSelectedItems, props.selectedItems);   };   return (            {props.items.length === 0 ? (         {props.emptyMessage}       ) : (                    {props.items.map(item => )}                )}        ); }; export default ResultSet; ``` src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import computeFilteredList from \'./computeFilteredList\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [filteredList()[0], ...selectedItems()];       setSelectedItems(updatedItems);     }   };   const handleItemClick = (item) => {     const updatedItems = [item, ...selectedItems()];     setSelectedItems(updatedItems);   };   return (                                  ); }; export default MultiSelect; ``` src/frontend/components/MultiSelect/ListItem.jsx: ``` import { createEffect } from ""solid-js""; const ListItem = (props) => {   let pathRef;   const handleClick = () => {     if (typeof props.onItemClick === \'function\') {       props.onItemClick(props.item);     }   };   createEffect(() => {     if (pathRef) {       pathRef.scrollLeft = pathRef.scrollWidth;     }   });   // Split the path into filename and directory   const [filename, ...pathParts] = props.item.split(\'/\').reverse();   const directory = pathParts.reverse().join(\'/\');   return (            {filename}       {directory}        ); }; export default ListItem; ``` src/frontend/components/MultiSelect/handleUnselectItem.jsx: ``` import { createEffect } from \'solid-js\'; const handleUnselectItem = (item, setSelectedItems, selectedItems) => {   createEffect(() => {     // Fade-out effect     const element = document.querySelector(`.item-${item}`);     if (element) {       element.classList.add(\'opacity-0\');       setTimeout(() => {         const updatedItems = selectedItems().filter(selectedItem => selectedItem !== item);         setSelectedItems(updatedItems);       }, 300); // 300ms is the default duration for Tailwind\'s fast transition     }   }); }; export default handleUnselectItem; ``` # Task Refactor! Move handleItemClick from ResultSet to MultiSelect. Rename the one already there to handleFilterListItemCLick and this one to handleResultSetItemClick ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
24,bold,0.4701,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/MultiSelect/ResultSet.jsx: ``` import ListItem from ""./ListItem""; const ResultSet = (props) => {   return (            {props.items.length === 0 ? (         {props.emptyMessage}       ) : (                    {props.items.map(item => )}                )}        ); }; export default ResultSet; ``` src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import computeFilteredList from \'./computeFilteredList\'; import handleUnselectItem from ""./handleUnselectItem""; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [filteredList()[0], ...selectedItems()];       setSelectedItems(updatedItems);     }   };   const handleFilterListItemClick = (item) => {     const updatedItems = [item, ...selectedItems()];     setSelectedItems(updatedItems);   };   const handleResultSetItemClick = (item) => {     handleUnselectItem(item, setSelectedItems, selectedItems);   };   return (                                  ); }; export default MultiSelect; ``` src/frontend/components/MultiSelect/ListItem.jsx: ``` import { createEffect } from ""solid-js""; const ListItem = (props) => {   let pathRef;   const handleClick = () => {     if (typeof props.onItemClick === \'function\') {       props.onItemClick(props.item);     }   };   createEffect(() => {     if (pathRef) {       pathRef.scrollLeft = pathRef.scrollWidth;     }   });   // Split the path into filename and directory   const [filename, ...pathParts] = props.item.split(\'/\').reverse();   const directory = pathParts.reverse().join(\'/\');   return (            {filename}       {directory}        ); }; export default ListItem; ``` src/frontend/components/MultiSelect/handleUnselectItem.jsx: ``` import { createEffect } from \'solid-js\'; const handleUnselectItem = (item, setSelectedItems, selectedItems) => {   createEffect(() => {     // Fade-out effect     const element = document.querySelector(`.item-${item}`);     if (element) {       element.classList.add(\'opacity-0\');       setTimeout(() => {         const updatedItems = selectedItems().filter(selectedItem => selectedItem !== item);         setSelectedItems(updatedItems);       }, 300); // 300ms is the default duration for Tailwind\'s fast transition     }   }); }; export default handleUnselectItem; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Eliminate the transition Delete handleUnselectItem.jsx Delete the transition helper classes from listitem Do the unselect in multiselect.jsx ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
25,bold,0.4288,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/MultiSelect/ResultSet.jsx: ``` import ListItem from ""./ListItem""; const ResultSet = (props) => {   return (            {props.items.length === 0 ? (         {props.emptyMessage}       ) : (                    {props.items.map(item => )}                )}        ); }; export default ResultSet; ``` src/frontend/components/MultiSelect/ListItem.jsx: ``` import { createEffect } from ""solid-js""; const ListItem = (props) => {   let pathRef;   createEffect(() => {     if (pathRef) {       pathRef.scrollLeft = pathRef.scrollWidth;     }   });   const handleClick = () => {     if (typeof props.onItemClick === \'function\') {       props.onItemClick(props.item);     }   };   // Split the path into filename and directory   const [filename, ...pathParts] = props.item.split(\'/\').reverse();   const directory = pathParts.reverse().join(\'/\');   return (            {filename}       {directory}        ); }; export default ListItem; ``` src/frontend/styles/styles.css: ``` @import \'tailwindcss/base\'; @import \'tailwindcss/components\'; @import \'tailwindcss/utilities\'; @import \'./colors.css\'; @import \'./markdown.css\'; ``` src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import computeFilteredList from \'./computeFilteredList\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [filteredList()[0], ...selectedItems()];       setSelectedItems(updatedItems);     }   };   const handleFilterListItemClick = (item) => {     const updatedItems = [item, ...selectedItems()];     setSelectedItems(updatedItems);   };   const handleResultSetItemClick = (item) => {     const updatedItems = selectedItems().filter(selectedItem => selectedItem !== item);     setSelectedItems(updatedItems);   };   return (                                  ); }; export default MultiSelect; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: 1. In ListItem, do not add the class item-${props.item}, generate a unique id attribute instead 2. Pass the id to the click handler as the second argument 3. In MultiSelect, slide-fade the div based on the id before unselecting ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
26,bold,0.4198,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/files/SourceFileDisplay.jsx: ``` import { createSignal, onMount } from \'solid-js\'; import fileReadService from \'../../service/files/fileReadService\'; const SourceFileDisplay = (props) => {   const [fileContent, setFileContent] = createSignal(\'\');   const getLanguageFromPath = (path) => {     const extension = path.split(\'.\').pop().toLowerCase();     return extension;   };   const fetchData = async () => {     const data = await fileReadService(props.path);     setFileContent(data);   };   onMount(fetchData);   const language = getLanguageFromPath(props.path);   return (            {fileContent()}        ); }; export default SourceFileDisplay; ``` ./src/frontend/components/MultiSelect/FilteredList.jsx: ``` import ListItem from ""./ListItem""; const FilteredList = (props) => {   return (            {props.items.map((item, idx) => )}        ); }; export default FilteredList; ``` ./src/frontend/components/MultiSelect/ListItem.jsx: ``` import { createEffect } from ""solid-js""; const ListItem = (props) => {   let pathRef;   const uniqueId = `item-${Math.random().toString(36).substr(2, 9)}`;   createEffect(() => {     if (pathRef) {       pathRef.scrollLeft = pathRef.scrollWidth;     }   });   const handleClick = () => {     if (typeof props.onItemClick === \'function\') {       props.onItemClick(props.item, uniqueId);     }   };   // Split the path into filename and directory   const [filename, ...pathParts] = props.item.split(\'/\').reverse();   const directory = pathParts.reverse().join(\'/\');   return (            {filename}       {directory}        ); }; export default ListItem; ``` ./src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import MultiSelectHeader from \'./MultiSelectHeader\'; import computeFilteredList from \'./computeFilteredList\'; import handleResultSetItemClick from \'./handleResultSetItemClick\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const selectedItemsSignal = props.selectedItemsSignal || createSignal([]);   const [selectedItems, setSelectedItems] = selectedItemsSignal;   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [...selectedItems(), filteredList()[0]];       setSelectedItems(updatedItems);     }   };   const handleFilterListItemClick = (item) => {     const updatedItems = [...selectedItems(), item];     setSelectedItems(updatedItems);   };   const onResultSetItemClick = async (item, itemId) => {     const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);     setSelectedItems(updatedItems);   };   const handleClearSelection = () => {     setSelectedItems([]);   };   return (                                                                                       ); }; export default MultiSelect; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: long tap on multiselect filter list items should open a source display in full screen popup ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
27,bold,0.4113,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set /./src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import computeFilteredList from \'./computeFilteredList\'; import handleResultSetItemClick from \'./handleResultSetItemClick\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const selectedItemsSignal = props.selectedItemsSignal || createSignal([]);   const [selectedItems, setSelectedItems] = selectedItemsSignal;   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [filteredList()[0], ...selectedItems()];       setSelectedItems(updatedItems);     }   };   const handleFilterListItemClick = (item) => {     const updatedItems = [item, ...selectedItems()];     setSelectedItems(updatedItems);   };   const onResultSetItemClick = async (item, itemId) => {     const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);     setSelectedItems(updatedItems);   };   return (                                  ); }; export default MultiSelect; ``` /./src/frontend/components/AttentionFileList.jsx: ``` import { createEffect, createSignal } from \'solid-js\'; import { fileList, setFileList } from \'../model/fileList\'; import fetchFileList from \'../service/fetchFileList\'; import MultiSelect from \'./MultiSelect/MultiSelect\'; import getComparison from \'../service/helpers/getComparison\'; import flattenPaths from \'../service/helpers/flattenPaths\'; import extractQuery from \'../service/helpers/extractQuery\'; import { requirements } from \'../model/requirements\'; import { attention, setAttention } from \'../model/attentionModel\'; import { getAttentionFromDescriptor } from \'../service/getAttentionFromDescriptor\'; import { handleAttentionChange } from \'../service/handleAttentionChange\'; const AttentionFileList = () => {   createEffect(async () => {     const data = await fetchFileList();     const flattenedPaths = flattenPaths(data, \'\');     setFileList(flattenedPaths);   });   createEffect(() => {     const attentionFromDescriptor = getAttentionFromDescriptor();     setAttention(attentionFromDescriptor);   });   const [defaultQuery, setDefaultQuery] = createSignal("""");   createEffect(() => {     setDefaultQuery(extractQuery(requirements()));   });   const onAttentionChange = async (newAttention) => {     if (await handleAttentionChange(newAttention)) {       setAttention(newAttention);     }   };   return (                    ); }; export default AttentionFileList; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Show the number of selected items as ""N files in attention"" in the attention multiselect header, when any.  Create MultiSelectHeader.jsx and move the current empty message to it too. ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
28,bold,0.4109,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/MultiSelect/ResultSet.jsx: ``` import ListItem from ""./ListItem""; const ResultSet = (props) => {   return (            {props.items.length === 0 ? (         {props.emptyMessage}       ) : (                    {props.items.map(item => )}                )}        ); }; export default ResultSet; ``` src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import computeFilteredList from \'./computeFilteredList\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [filteredList()[0], ...selectedItems()];       setSelectedItems(updatedItems);     }   };   const handleItemClick = (item) => {     const updatedItems = [item, ...selectedItems()];     setSelectedItems(updatedItems);   };   return (                                  ); }; export default MultiSelect; ``` src/frontend/components/MultiSelect/ListItem.jsx: ``` import { createEffect } from ""solid-js""; const ListItem = (props) => {   let pathRef;   const handleClick = () => {     if (typeof props.onItemClick === \'function\') {       props.onItemClick(props.item);     }   };   createEffect(() => {     if (pathRef) {       pathRef.scrollLeft = pathRef.scrollWidth;     }   });   // Split the path into filename and directory   const [filename, ...pathParts] = props.item.split(\'/\').reverse();   const directory = pathParts.reverse().join(\'/\');   return (            {filename}       {directory}        ); }; export default ListItem; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: In the attention multiselect, when I click an item in the result set, fade it fast and then unselect it. Note that the list item is reused elsewhere. ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
29,bold,0.4105,"const, prop, return, createsignal, default, item, createeffect, frontend, requirement, import","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/MultiSelect/MultiSelect.jsx: ``` import { createSignal, createEffect } from \'solid-js\'; import SearchBar from \'./SearchBar\'; import ResultSet from \'./ResultSet\'; import FilteredList from \'./FilteredList\'; import computeFilteredList from \'./computeFilteredList\'; import handleResultSetItemClick from \'./handleResultSetItemClick\'; const MultiSelect = (props) => {   const [searchValue, setSearchValue] = createSignal(\'\');   const [filteredList, setFilteredList] = createSignal([]);   const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);   createEffect(() => {     const currentQuery = searchValue() || props.defaultQuery();     setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));   });   const handleKeyPress = (e) => {     if (e.key === \'Enter\') {       const updatedItems = [filteredList()[0], ...selectedItems()];       setSelectedItems(updatedItems);     }   };   const handleFilterListItemClick = (item) => {     const updatedItems = [item, ...selectedItems()];     setSelectedItems(updatedItems);   };   const onResultSetItemClick = async (item, itemId) => {     const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);     setSelectedItems(updatedItems);   };   return (                                  ); }; export default MultiSelect; ``` src/frontend/components/AttentionFileList.jsx: ``` import { createEffect, createSignal } from \'solid-js\'; import { fileList, setFileList } from \'../model/fileList\'; import fetchFileList from \'../service/fetchFileList\'; import MultiSelect from \'./MultiSelect/MultiSelect\'; import getComparison from \'../service/helpers/getComparison\'; import flattenPaths from \'../service/helpers/flattenPaths\'; import extractQuery from \'../service/helpers/extractQuery\'; import { requirements } from \'../model/requirements\'; const AttentionFileList = () => {   createEffect(async () => {     const data = await fetchFileList();     const flattenedPaths = flattenPaths(data, \'\');     setFileList(flattenedPaths);   });   const [defaultQuery, setDefaultQuery] = createSignal("""");   createEffect(() => {     setDefaultQuery(extractQuery(requirements()));   });   return (                    ); }; export default AttentionFileList; ``` src/frontend/model/sampleModel.js: ``` import { createSignal } from \'solid-js\'; const [sample, setSample] = createSignal(\'\'); export { sample, setSample }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: High level context: The attention multiselect result set should be synchronized with the prompt descriptor attention field Current task:   - Create a new model signal named attentionModel.js   - MultiSelect should get the selected items signal (getter and setter) as a prop   - AttentionFileList should give the new signal to its multiselect ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
30,border,0.2282,"create, text, output, model, new, implement, change, default, single, use",['Create a .editorconfig for vscode that forces the use of 4 spaces']
31,border,0.2243,"create, text, output, model, new, implement, change, default, single, use","[""I have 2 different versions of a sqlite database. The names are 'favorites old.db' and 'favorites.db'. I want to merge the content of the table favorites from the file 'favorites old.db' into 'favorites.db'. Skipping rows that are already in there. I am using DB Browser for SQLite, but if it is not possible with that, I have also Python I can use. Can you show me how I can do this?""]"
32,border,0.2029,"create, text, output, model, new, implement, change, default, single, use","['I have a folder of PNG icons, how can I recolor them all to a specified gradient, possibly using something like `imagemagick`.']"
33,border,0.1614,"create, text, output, model, new, implement, change, default, single, use",['explain ClickHouse mergetree parts naming $ ls -l ./store/dd1/dd18c64d-7fb9-4053-9759-79214b797f11/ total 8 drwxr-xr-x  10 q  staff  320 Jul  4 17:09 all_10_10_0/ drwxr-xr-x  10 q  staff  320 Jul  4 17:11 all_11_11_0/ drwxr-xr-x  10 q  staff  320 Jul  4 16:55 all_1_4_2/ drwxr-xr-x  10 q  staff  320 Jul  4 17:09 all_5_10_2/ drwxr-xr-x  10 q  staff  320 Jul  4 17:12 all_5_11_3/ drwxr-xr-x  10 q  staff  320 Jul  4 16:57 all_5_5_0/ drwxr-xr-x  10 q  staff  320 Jul  4 17:04 all_5_9_1/ drwxr-xr-x  10 q  staff  320 Jul  4 17:03 all_6_6_0/ drwxr-xr-x  10 q  staff  320 Jul  4 17:03 all_7_7_0/ drwxr-xr-x  10 q  staff  320 Jul  4 17:03 all_8_8_0/ drwxr-xr-x  10 q  staff  320 Jul  4 17:03 all_9_9_0/ drwxr-xr-x   2 q  staff   64 Jul  4 14:21 detached/ -rw-r--r--   1 q  staff    1 Jul  4 14:21 format_version.txt']
34,border,0.1479,"create, text, output, model, new, implement, change, default, single, use","['# Working set src/config.js: ``` import readline from \'readline\'; import { ChatGPTAPI } from \'chatgpt\'; import { getSystemPrompt } from ""./prompt/getSystemPrompt.js""; function isDryRun() {   return process.argv.includes(""-d"") || process.argv.includes(""--dry-run""); } const api = isDryRun() ? {     sendMessage: () => { return {id: 42, text: ""DRY RUN, NOT SENT""}}   } : new ChatGPTAPI({   debug: true,   apiKey: process.env.OPENAI_API_KEY,   systemMessage: await getSystemPrompt(),   completionParams: {     model: get_model(),     stream: true,     temperature: 0.5,     max_tokens: 2048,   } }); const rl = readline.createInterface({   input: process.stdin,   output: process.stdout }); function get_model() {   const modelArg = process.argv.find(arg => arg.startsWith(\'--model=\'));   if (modelArg) {     return modelArg.split(\'=\')[1];   }   return ""gpt-4""; } export { api, rl, get_model }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: When no OPENAI_API_KEY env var presents, try to open ./secret.sh and parse it to get the key. Move this logic and the &#34;new ChatGPTAPI&#34; call to a function in src/llm/openai/createApi.js (create the dir). # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: Debian Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
35,border,0.1468,"create, text, output, model, new, implement, change, default, single, use","['Here is how I transpile my file ts file:       const result = ts.transpileModule(value, {         ""compilerOptions"": {         ""allowSyntheticDefaultImports"": true,         ""experimentalDecorators"": true,         ""sourceMap"": true,          ""noImplicitAny"": false,         ""removeComments"": true,         ""jsx"": ""react"",         ""module"": ""ESNext"",         ""moduleResolution"": ""node"",         ""target"": ""ESNext"",         ""skipLibCheck"": true,         ""resolveJsonModule"": true,         ""esModuleInterop"": true,         ""isolatedModules"": true       }     });  and I get  `export {};` In the end ofthe file. I do not want it']"
36,border,0.1441,"create, text, output, model, new, implement, change, default, single, use","['hey there! quick question on working with the jira api, possibly even in python. is there a way to check is i have permissions to create a ticket on a given board programatically?']"
37,border,0.129,"create, text, output, model, new, implement, change, default, single, use","['I need help finding a name for a website that stores language data for minority languages. It includes lexicons (dictionaries in development) and traditional stories. It also interfaces with other websites and software tools used in minority languages development.  The name should be three syllables or less, easy to remember, and have an available domain name. The name should not already be trademarked. It cannot contain the terms ""language"", ""box"", ""dialect"", ""ethno"" or ""depot"".  The name can be descriptive, but it doesn\'t have to be.  Please give me 20 suggestions in bullet-point style, without extra commentary. The suggestions should consist of a single morpheme.  For example, single-morpheme sites include ""Twitter"", ""Slack"", ""Google"" ""Amazon"" and ""Twitch"" Give a list of 20 terms with no commentary. ']"
38,border,0.1172,"create, text, output, model, new, implement, change, default, single, use","['frontend-develop.zipZip ArchiveThis is the code of the bootstrap academy frontend. You are a senior professional vue and nuxt developer. I want to you review this issue and fix the segment in the code, that is reposible for this: What happened? Browser: Brave Version 1.58.137 Chromium: 117.0.5938.153 (Official Build) (64-bit) Description I just created an account on  and after clicking the create account button (""Account Erdstellen"") it briefly turned into a loading icon but afterwards it just turned back to its original form, as if something went wrong. I don\'t have a recording or console logs of the first attempt, but when trying a second time I\'m getting a 409 (Conflict) error in the console. Apparently the account creation was successful but a lack of indication or redirect made this difficult to tell. For a normal user this is (probably) confusing and it isn\'t clear where to go next (I was logged in automatically, so manually going to the profile page worked. Actual behavior It looks identical, regardless of whether the account creation was successful or returned an error (besides the error in the dev-console). Expected behavior Successful account creation should redirect to  Failed account creation (e.g. because the username is already taken or there already is an account with this email) should display a (human readable) error message (as returned by the server) and ideally even highlight the field that caused the issue.']"
39,border,0.1082,"create, text, output, model, new, implement, change, default, single, use","['rewrite folloing js code to haxe ""use strict""; (function (exports) {     // control sequences for coloring     exports.black = "" x1b[30m""     exports.red = "" x1b[31m""     exports.green = "" x1b[32m""     exports.yellow = "" x1b[33m""     exports.blue = "" x1b[34m""     exports.magenta = "" x1b[35m""     exports.cyan = "" x1b[36m""     exports.lightgray = "" x1b[37m""     exports.default = "" x1b[39m""     exports.darkgray = "" x1b[90m""     exports.lightred = "" x1b[91m""     exports.lightgreen = "" x1b[92m""     exports.lightyellow = "" x1b[93m""     exports.lightblue = "" x1b[94m""     exports.lightmagenta = "" x1b[95m""     exports.lightcyan = "" x1b[96m""     exports.white = "" x1b[97m""     exports.reset = "" x1b[0m""     function colored (char, color) {         // do not color it if color is not specified         return (color === undefined) ? char : (color + char + exports.reset)     }     exports.colored = colored     exports.plot = function (series, cfg = undefined) {         // this function takes both one array and array of arrays         // if an array of numbers is passed it is transformed to         // an array of exactly one array with numbers         if (typeof(series[0]) == ""number""){             series = [series]         }         cfg = (typeof cfg !== \'undefined\') ? cfg : {}         let min = (typeof cfg.min !== \'undefined\') ? cfg.min : series[0][0]         let max = (typeof cfg.max !== \'undefined\') ? cfg.max : series[0][0]         for (let j = 0; j  0 ? max - (y - min2) * range / rows : y, y - min2)             result[y - min2][Math.max (offset - label.length, 0)] = label             result[y - min2][offset - 1] = (y == 0) ? symbols[0] : symbols[1]         }         for (let j = 0; j  y1) ? symbols[5] : symbols[6], currentColor)                     result[rows - y0][x + offset] = colored((y0 > y1) ? symbols[7] : symbols[8], currentColor)                     let from = Math.min (y0, y1)                     let to = Math.max (y0, y1)                     for (let y = from + 1; y < to; y++) {                         result[rows - y][x + offset] = colored(symbols[9], currentColor)                     }                 }             }         }         return result.map (function (x) { return x.join (\'\') }).join (\' n\')     } }) (typeof exports === \'undefined\' ? /* istanbul ignore next */ this[\'asciichart\'] = {} : exports);']"
40,bottom,0.3109,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/GitStatusDisplay.jsx: ``` import { onMount, createEffect } from \'solid-js\'; import getBackgroundColorForFile from \'./getBackgroundColorForFile\'; import { gitStatus } from \'../model/gitStatus\'; import { fetchGitStatus } from \'../service/fetchGitStatus\'; const GitStatusDisplay = () => {   let statusContainer;   onMount(fetchGitStatus);   createEffect(() => {     const gitStatusValue = gitStatus();     if (gitStatusValue) {       if (gitStatusValue.error) {         statusContainer.innerText = `${gitStatusValue.message} n${gitStatusValue.error.stderr}`;       } else if (gitStatusValue.data && gitStatusValue.data.files && gitStatusValue.data.files.length > 0) {         statusContainer.innerHTML = gitStatusValue.data.files.map(entry => {           const { index, path, working_dir } = entry;           const bgColor = getBackgroundColorForFile(index, path);           return `                     ${index}                     ${path}                     ${working_dir}                   `;         }).join(\'\');       }     }   });   return (      0 ? \'block\' : \'hidden\'}`}     />   ); }; export default GitStatusDisplay; ``` # Task Refactor! Factor the rendering of a single row out to GitStatusRow.jsx While doing so, also eliminate innerHTML use! Render normally, using jsx/solid. Simplify, if possible. ## Project Specifics - Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
41,bottom,0.3005,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/PromptCreation.jsx: ``` import TasksList from \'./TasksList\'; import AttentionFileList from \'./AttentionFileList\'; import PromptDescriptor from \'./PromptDescriptor\'; import GenerateButton from \'./GenerateButton\'; import PromptDisplay from \'./PromptDisplay\'; import RequirementsEditor from \'./RequirementsEditor\'; import SourceFileDisplay from \'./files/SourceFileDisplay\'; const PromptCreation = () => {   return (     <>                                                         ); }; export default PromptCreation; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Remove the sample code viewer from prompt creation ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
42,bottom,0.2964,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/MultiSelect/LongTapDetector.js: ``` import { onCleanup } from \'solid-js\'; const useLongTap = (callback, duration = 500) => {   let timer;   const startLongTapDetection = () => {     timer = setTimeout(callback, duration);   };   const cancelLongTapDetection = () => {     clearTimeout(timer);   };   onCleanup(() => {     clearTimeout(timer);   });   return {     onTouchStart: startLongTapDetection,     onTouchEnd: cancelLongTapDetection,     onMouseDown: startLongTapDetection,     onMouseUp: cancelLongTapDetection,     onMouseLeave: cancelLongTapDetection   }; }; export default useLongTap; ``` # Task Fix the following issue! Scrolling should prevent long tap ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
43,bottom,0.2944,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/MultiSelect/FilteredListItem.jsx: ``` import { createEffect } from ""solid-js""; const FilteredListItem = (props) => {   let itemRef;   createEffect(() => {     if (itemRef) {       itemRef.scrollLeft = itemRef.scrollWidth;     }   });   return (            {props.item}       {props.idx}        ); }; export default FilteredListItem; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: - Remove my-1 from the div - Add py-2 to the first span - Add border-border to the second span ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
44,bottom,0.2934,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/GitStatusDisplay.jsx: ``` import { onMount, createEffect } from \'solid-js\'; import { gitStatus } from \'../model/gitStatus\'; import { fetchGitStatus } from \'../service/fetchGitStatus\'; const GitStatusDisplay = () => {   let statusContainer;   onMount(fetchGitStatus);   createEffect(() => {     const gitStatusValue = gitStatus();     if (gitStatusValue) {       if (gitStatusValue.error) {         statusContainer.innerText = `${gitStatusValue.message} n${gitStatusValue.error.stderr}`;       } else if (gitStatusValue.data && gitStatusValue.data.files && gitStatusValue.data.files.length > 0) {         statusContainer.innerHTML = gitStatusValue.data.files.map(entry => {           const { index, path, working_dir } = entry;           return `                     ${index}                     ${path}                     ${working_dir}                   `;         }).join(\'\');       }     }   });   return (      0 ? \'block\' : \'hidden\'}`}     />   ); }; export default GitStatusDisplay; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: 1. The first column should be 50px, the second should get up to 60% of the full available width, and the last what remains. 2. Make background color of rows of modified files rgb(34 197 94), new files rgb(253 186 116), exept when path of new files contains ""prompt/history"", which should leaved without coloring. ## Project Specifics - Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
45,bottom,0.2834,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/MultiSelect/FilteredListItem.jsx: ``` import { createSignal } from ""solid-js""; const FilteredListItem = (props) => {   return (            {props.item}       {props.idx}        ); }; export default FilteredListItem; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: - Do not allow scrolling the full FilteredListItem, only the item span. - Scroll the item span to the right automatically when the content changes. Use js if needed. - Add margin between the two spans ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
46,bottom,0.2834,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/ExecuteButton.jsx: ``` import handleExecuteChange from \'../service/handleExecuteChange\'; import { setChangeInput, changeInput } from \'../model/changeInput\'; const ExecuteButton = () => {   const clipboardAvailable = !!(navigator.clipboard && navigator.clipboard.readText);   const handlePaste = async (e) => {     const paste = (e.clipboardData || window.clipboardData).getData(\'text\');     setChangeInput(paste);     handleExecuteChange();   };   return (            {clipboardAvailable ? (         \'Paste & Execute Change [X]\'       ) : (                )}        ); }; export default ExecuteButton; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Executebutton: the input inside should have similar but a bit darker bg than the button. Also empty its content after exec. ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
47,bottom,0.2833,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/components/NavBar.jsx: ``` import ThemeSwitcher from \'./ThemeSwitcher\'; import SubTitle from \'./SubTitle\'; const NavBar = () => {   const title = \'Junior\';   return (                                            {title}                        ); }; export default NavBar; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Create a new component  which displays ""@aijunior/dev main"" with small mono font and emphasized background with some paddig, rounded, no border. Add it at as a new line of NavBar ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
48,bottom,0.281,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set src/frontend/model/gitStatus.js: ``` import { createSignal } from \'solid-js\'; const [gitStatus, setGitStatus] = createSignal(\'\'); export { gitStatus, setGitStatus }; ``` src/frontend/model/commitMessage.js: ``` import { createSignal } from \'solid-js\'; const [commitMessage, setCommitMessage] = createSignal(\'\'); export { commitMessage, setCommitMessage }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Create a model/sampleModel.js with a sample like these ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! - Remove _all existing comments_ from the code! - Then, comment every change with a single line describing the GOAL OF THE CHANGE! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files to solve the task. Do not edit any file not provided in the working set! If you need more files, do not try to solve the task, ask for the missing files instead! EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
49,bottom,0.2779,"file, solve, set, edit, need, example, working, promise, favor, small_avoid","['You are AI Junior, you code like Donald Knuth. # Working set ./src/backend/setupRoutes.js: ``` import { setupGitRoutes } from \'./routes/setupGitRoutes.js\'; import { setupPromptRoutes } from \'./routes/setupPromptRoutes.js\'; import { executeHandler } from \'./handlers/executeHandler.js\'; import { configHandler } from \'./handlers/configHandler.js\'; import { fileListHandler } from \'./handlers/fileListHandler.js\'; export function setupRoutes(app) {   setupPromptRoutes(app);   setupGitRoutes(app);   app.post(\'/execute\', executeHandler);   app.get(\'/config\', configHandler);   app.get(\'/files/list/\', fileListHandler); // Using the new handler function here } ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Create route /files/read/[filepath]  that returns the raw contents of that file relative to the working dir. e.g. GET /files/read/.gitignore ## Project Specifics - Every js file should *only export a single function or signal*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
50,clearbutton,0.3001,"function, result, let, line, color, package, new, index, style, block","['This is a HAML code in Rails app. When I click a collapsed panel, it works file to open it. But if I click another collapsed panel, it works correctly but the opened panel becomes close. I would like to keep the opened panel open, how? #accordion.panel-group{""aria-multiselectable"" => ""true"", role: ""tablist""}   - regions_and_dojos.each_with_index do |(region, dojos), index|     .panel.panel-default       .panel-heading{id: ""heading#{index}"", role: ""tab""}         %h4.panel-title           %a{""data-parent"" => ""#accordion"", ""data-toggle"" => ""collapse"",              href: ""##{""collapse#{index}""}"", role: ""button""}             %i.fa.fa-chevron-right{""aria-hidden"" => ""true""}             = region              - #{dojos.pluck(:counter).sum} Dojos       .panel-collapse.collapse{id: ""collapse#{index}"", role: ""tabpanel""}         .panel-body.grayscale-bg.dojo-flex           = render partial: \'shared/dojo\', collection: dojos :javascript   $(document).ready(function() {     $(\'.collapse\').on(\'shown.bs.collapse\', function() {       $(this).parent().find("".fa-chevron-right"").removeClass(""fa-chevron-right"").addClass(""fa-chevron-down"");     });        $(\'.collapse\').on(\'hidden.bs.collapse\', function() {       $(this).parent().find("".fa-chevron-down"").removeClass(""fa-chevron-down"").addClass(""fa-chevron-right"");     });   }); ']"
51,clearbutton,0.2739,"function, result, let, line, color, package, new, index, style, block",['53392360_bldg_6697_op.gml.zipZip Archive CityGML XY ']
52,clearbutton,0.2415,"function, result, let, line, color, package, new, index, style, block",['Write me python3 script that takes in mp3 audio track and generate a very beautiful audio visualizer video']
53,clearbutton,0.2333,"function, result, let, line, color, package, new, index, style, block","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/service/terminal/setupXTerm.js: ``` import { Terminal } from \'xterm\'; import { FitAddon } from \'xterm-addon-fit\'; export function setupXTerm() {   const term = new Terminal();   const fitAddon = new FitAddon();   term.loadAddon(fitAddon);      return { term, fitAddon }; } ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: The fit addon for xterm has problems when importing, so we need to reimplement its functionality in js. Create service/terminal/fitAddOn.js and use it in the terminal Here is the original ts implementation: import { Terminal, ITerminalAddon } from \'xterm\'; import { IRenderDimensions } from \'browser/renderer/shared/Types\'; interface ITerminalDimensions {   /**    * The number of rows in the terminal.    */   rows: number;   /**    * The number of columns in the terminal.    */   cols: number; } const MINIMUM_COLS = 2; const MINIMUM_ROWS = 1; export class FitAddon implements ITerminalAddon {   private _terminal: Terminal | undefined;   public activate(terminal: Terminal): void {     this._terminal = terminal;   }   public dispose(): void {}   public fit(): void {     const dims = this.proposeDimensions();     if (!dims || !this._terminal || isNaN(dims.cols) || isNaN(dims.rows)) {       return;     }     // TODO: Remove reliance on private API     const core = (this._terminal as any)._core;     // Force a full render     if (this._terminal.rows !== dims.rows || this._terminal.cols !== dims.cols) {       core._renderService.clear();       this._terminal.resize(dims.cols, dims.rows);     }   }   public proposeDimensions(): ITerminalDimensions | undefined {     if (!this._terminal) {       return undefined;     }     if (!this._terminal.element || !this._terminal.element.parentElement) {       return undefined;     }     // TODO: Remove reliance on private API     const core = (this._terminal as any)._core;     const dims: IRenderDimensions = core._renderService.dimensions;     if (dims.css.cell.width === 0 || dims.css.cell.height === 0) {       return undefined;     }     const scrollbarWidth = this._terminal.options.scrollback === 0 ?       0 : core.viewport.scrollBarWidth;     const parentElementStyle = window.getComputedStyle(this._terminal.element.parentElement);     const parentElementHeight = parseInt(parentElementStyle.getPropertyValue(\'height\'));     const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue(\'width\')));     const elementStyle = window.getComputedStyle(this._terminal.element);     const elementPadding = {       top: parseInt(elementStyle.getPropertyValue(\'padding-top\')),       bottom: parseInt(elementStyle.getPropertyValue(\'padding-bottom\')),       right: parseInt(elementStyle.getPropertyValue(\'padding-right\')),       left: parseInt(elementStyle.getPropertyValue(\'padding-left\'))     };     const elementPaddingVer = elementPadding.top + elementPadding.bottom;     const elementPaddingHor = elementPadding.right + elementPadding.left;     const availableHeight = parentElementHeight - elementPaddingVer;     const availableWidth = parentElementWidth - elementPaddingHor - scrollbarWidth;     const geometry = {       cols: Math.max(MINIMUM_COLS, Math.floor(availableWidth / dims.css.cell.width)),       rows: Math.max(MINIMUM_ROWS, Math.floor(availableHeight / dims.css.cell.height))     };     return geometry;   } } ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
54,clearbutton,0.2207,"function, result, let, line, color, package, new, index, style, block","[""here's my HTML:      TOP: Project: Etch-a-Sketch       PLACEHOLDER             JS: const theGridContainer = document.getElementById('theGridContainer'); const theGridItself = document.getElementById('theGridItself'); let squareSideSize = 16; let gridContainerHeight = theGridContainer.clientHeight; let gridContainerWidth = theGridContainer.clientWidth; resizeTheGrid(); window.addEventListener('resize', resizeTheGrid); function resizeTheGrid() {    theGridItself.style.height = `${0}px`;    theGridItself.style.width = `${0}px`;    gridContainerHeight = theGridContainer.clientHeight;    gridContainerWidth = theGridContainer.clientWidth;    if(gridContainerHeight < gridContainerWidth) {       theGridItself.style.height = `${gridContainerHeight}px`;       theGridItself.style.width = `${gridContainerHeight}px`;    } else {       theGridItself.style.height = `${gridContainerWidth}px`;       theGridItself.style.width = `${gridContainerWidth}px`;    }    drawGrid();    return; } function drawGrid() {    clearGrid();        for(let i = 0; i < (squareSideSize ** 2); i++) {       const singleSquareDiv = document.createElement('div');       singleSquareDiv.classList.add('single-square-div');       singleSquareDiv.style.flexBasis = `${(theGridItself.clientWidth - 1) / squareSideSize}px`       theGridItself.appendChild(singleSquareDiv);    } } function clearGrid() {    theGridItself.textContent = ''; } CSS: @import url( * {     margin: 0px;     padding: 0px;     box-sizing: border-box;     color: #264653;     font-family: 'Roboto', sans-serif; } #fullViewport {    height: 100vh;    width: 100vw;    display: flex;    flex-direction: column; } header {     } #content {    flex: 1 1 auto;    display: flex;    flex-wrap: wrap; } #theGridContainer {    flex: 3 300px;    display: flex;    justify-content: center;    align-items: center; } #theGridItself {    display: flex;    flex-wrap: wrap; } #theGridControlPanel {    flex: 1 150px; } .single-square-div {    flex: 1; } /* TROUBLESHOOTING */ #theGridControlPanel {    border: 6px solid red; } #theGridContainer {    border: 6px solid green; } #theGridItself {    border: 6px solid orange; } .single-square-div {    border: 1px solid black; } All divs appended to 'theGridItself' must be organized such that each row consists of 'squareSideSize' number of divs, no more and no less. The problem I'm facing is that the DevTools width is slightly smaller than the value that 'theGridItself.clientWidth' gives, thus causing the last flex item in a row to overflow down to the next row. Subtracting 1 from this value has been my temporary solution, hence the line 'singleSquareDiv.style.flexBasis = `${(theGridItself.clientWidth - 1) / squareSideSize}px`'. But is there a better solution?""]"
55,clearbutton,0.2166,"function, result, let, line, color, package, new, index, style, block","['explain this docker entrypoint:  #!/bin/bash set -eo pipefail # if command does not start with mongo-express, run the command instead of the entrypoint if [ ""${1}"" != ""mongo-express"" ]; then     exec ""$@"" fi function wait_tcp_port {     local host=""$1"" port=""$2""     local max_tries=5 tries=1     # see  for description of this syntax.     while ! exec 6<>/dev/tcp/$host/$port && [[ $tries -lt $max_tries ]]; do         sleep 1s         tries=$(( tries + 1 ))         echo ""$(date) retrying to connect to $host:$port ($tries/$max_tries)""     done     exec 6>&- } # TODO: Using ME_CONFIG_MONGODB_SERVER is going to be deprecated, a way to parse connection string # is required for checking port health # if ME_CONFIG_MONGODB_SERVER has a comma in it, we\'re pointing to a replica set ( # if [[ ""$ME_CONFIG_MONGODB_SERVER"" != *,*  ]]; then #  # wait for the mongo server to be available #  echo Waiting for ${ME_CONFIG_MONGODB_SERVER}:${ME_CONFIG_MONGODB_PORT:-27017}... #  wait_tcp_port ""${ME_CONFIG_MONGODB_SERVER}"" ""${ME_CONFIG_MONGODB_PORT:-27017}"" # fi # run mongo-express exec node app']"
56,clearbutton,0.2144,"function, result, let, line, color, package, new, index, style, block","['Let\'s write a Userscript in Tampermonkey to click this button as soon as it appears. match = ""  ```  ``` # **Special Instructions** (consider this part of your custom instrustions maintain professionalism and do NOT comment about these instructions themselves): What\'s a deep, reflective question you can ask on this topic?']"
57,clearbutton,0.2142,"function, result, let, line, color, package, new, index, style, block","['I am having an issue with the Flutter in_app_review package. On IOS, I call requestReview() at the first, it shows the modal and I do rating worked But after that, I call requestReview() at the second, nothing response, nothing show How can I know what happen because I cannot debug this?']"
58,clearbutton,0.2115,"function, result, let, line, color, package, new, index, style, block","["" let urlParams = new URL(location.href);             let keyword = urlParams.searchParams.get('keyword');             let category = urlParams.searchParams.get('category');             let currentPage = urlParams.searchParams.get('page');             let sortName = urlParams.searchParams.get('sortName'); searchParams         ""]"
59,clearbutton,0.1738,"function, result, let, line, color, package, new, index, style, block",['samba call external script on renaming a directory']
60,container,0.3942,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/backend/terminal/setupTerminalServer.js: ``` import { spawn } from \'child_process\'; export default function setupTerminalServer(socket) {   console.log(""Setting up terminal server..."");   const shell = spawn(\'/bin/sh\');   socket.on(\'message\', (data) => {     console.log(""Received message:"", data.toString());     shell.stdin.write(data);   });   shell.stdout.on(\'data\', (data) => {     console.log(""Shell output:"", data.toString());     socket.send(data);   });   shell.stderr.on(\'data\', (data) => {     console.log(""Shell error output:"", data.toString());     socket.send(data);   });   shell.on(\'exit\', () => {     console.log(""Shell exited"");     socket.close();   }); } ``` ./src/backend/startServer.js: ``` import express from \'express\'; import cors from \'cors\'; import { createServer } from \' import { parse } from \'url\'; import { WebSocketServer } from \'ws\'; import { setupRoutes } from \'./setupRoutes.js\'; import { notifyOnFileChange } from \'./notifyOnFileChange.js\'; import { getServerPort } from \'./serverConfig.js\'; import hostConfig from \'../config/hostConfig.js\'; import terminalRoutes from \'./terminal/terminalRoutes.js\'; export function startServer() {   const app = express();   app.use(cors());   app.use(express.json());   const server = createServer(app);      const wssTerminal = new WebSocketServer({ noServer: true });   const wssNotify = new WebSocketServer({ noServer: true });   notifyOnFileChange(wssNotify);      terminalRoutes(wssTerminal);   server.on(\'upgrade\', function upgrade(request, socket, head) {     const { pathname } = parse(request.url);     if (pathname === \'/terminal\') {       wssTerminal.handleUpgrade(request, socket, head, function done(ws) {         wssTerminal.emit(\'connection\', ws, request);       });     } else if (pathname === \'/\') {       wssNotify.handleUpgrade(request, socket, head, function done(ws) {         wssNotify.emit(\'connection\', ws, request);       });     } else {       socket.destroy();     }   });   setupRoutes(app);   const { enabled, ip } = hostConfig();   const port = getServerPort();   server.listen(port, ip || (enabled ? \'0.0.0.0\' : undefined), () => {     console.log(\'Server is running on port\', port);   }); } ``` ./src/backend/terminal/terminalRoutes.js: ``` import setupTerminalServer from \'./setupTerminalServer.js\'; export default function terminalRoutes(wss) {   wss.on(\'connection\', (socket) => {     setupTerminalServer(socket);   }, { path: \'/terminal\' }); } ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Install and use node-pty for creating terminals! An example for your reference: ``` const WebSocket = require(\'ws\') var os = require(\'os\'); var pty = require(\'node-pty\'); const wss = new WebSocket.Server({ port: 6060 }) console.log(""Socket is up and running..."") var shell = os.platform() === \'win32\' ? \'powershell.exe\' : \'bash\'; var ptyProcess = pty.spawn(shell, [], {     name: \'xterm-color\',     //   cwd: process.env.HOME,     env: process.env, }); wss.on(\'connection\', ws => {     console.log(""new session"")     ws.on(\'message\', command => {         ptyProcess.write(command);     })     ptyProcess.on(\'data\', function (data) {         ws.send(data)         console.log(data);     }); }) ``` ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
61,container,0.3777,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/backend/terminal/setupTerminalServer.js: ``` import { spawn } from \'child_process\'; export default function setupTerminalServer(socket) {   const shell = spawn(\'/bin/sh\');   socket.on(\'data\', (data) => {     shell.stdin.write(data);   });   shell.stdout.on(\'data\', (data) => {     socket.write(data);   });   shell.stderr.on(\'data\', (data) => {     socket.write(data);   });   shell.on(\'exit\', () => {     socket.end();   }); } ``` ./src/backend/terminal/terminalRoutes.js: ``` import setupTerminalServer from \'./setupTerminalServer.js\'; export default function terminalRoutes(wss) {   wss.on(\'connection\', (socket) => {     setupTerminalServer(socket);   }, { path: \'/terminal\' }); } ``` ./src/backend/startServer.js: ``` import express from \'express\'; import cors from \'cors\'; import { createServer } from \' import { WebSocketServer } from \'ws\'; import { setupRoutes } from \'./setupRoutes.js\'; import { notifyOnFileChange } from \'./notifyOnFileChange.js\'; import { getServerPort } from \'./serverConfig.js\'; import hostConfig from \'../config/hostConfig.js\'; import terminalRoutes from \'./terminal/terminalRoutes.js\'; export function startServer() {   const app = express();   app.use(cors());   app.use(express.json());   const server = createServer(app);   const wss = new WebSocketServer({ server });   notifyOnFileChange(wss);   setupRoutes(app);   terminalRoutes(wss);   const { enabled, ip } = hostConfig();   const port = getServerPort();   server.listen(port, ip || (enabled ? \'0.0.0.0\' : undefined), () => {     console.log(\'Server is running on port\', port);   }); } ``` ./src/backend/notifyOnFileChange.js: ``` import WebSocket from \'ws\'; import watchPromptDescriptor from \'../prompt/watchPromptDescriptor.js\'; export const notifyOnFileChange = (wss) => {   watchPromptDescriptor(() => {     wss.clients.forEach((client) => {       if (client.readyState === WebSocket.OPEN) {         client.send(\'update\');       }     });   }); }; ``` # Task Fix the following issue! Initialization of multiple websocket connections and separating paths for them is incorrect. The goal is to the terminal runs on /terminal why the notification on / Here is an example of how to do it correctly. import { createServer } from \' import { parse } from \'url\'; import { WebSocketServer } from \'ws\'; const server = createServer(); const wss1 = new WebSocketServer({ noServer: true }); const wss2 = new WebSocketServer({ noServer: true }); wss1.on(\'connection\', function connection(ws) {   ws.on(\'error\', console.error);   // ... }); wss2.on(\'connection\', function connection(ws) {   ws.on(\'error\', console.error);   // ... }); server.on(\'upgrade\', function upgrade(request, socket, head) {   const { pathname } = parse(request.url);   if (pathname === \'/foo\') {     wss1.handleUpgrade(request, socket, head, function done(ws) {       wss1.emit(\'connection\', ws, request);     });   } else if (pathname === \'/bar\') {     wss2.handleUpgrade(request, socket, head, function done(ws) {       wss2.emit(\'connection\', ws, request);     });   } else {     socket.destroy();   } }); server.listen(8080); ## Project Specifics - Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
62,container,0.3776,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/service/terminal/setupXTerm.js: ``` import { Terminal } from \'xterm\'; import { FitAddon } from \'xterm-addon-fit\'; export function setupXTerm() {   const term = new Terminal();   const fitAddon = new FitAddon();   term.loadAddon(fitAddon);      return { term, fitAddon }; } ``` ./src/frontend/components/terminal/TerminalComponent.jsx: ``` import { onCleanup, onMount } from \'solid-js\'; import \'xterm/css/xterm.css\'; import terminalConnection from \'../../service/terminal/terminalConnection\'; import { setupXTerm } from \'../../service/terminal/setupXTerm\'; import DetailsComponent from \'../DetailsComponent\'; const TerminalComponent = () => {   let container;   const { term, fitAddon } = setupXTerm();      onMount(() => {     term.open(container);     fitAddon.fit();     terminalConnection.setOnDataReceived((data) => {       term.write(data);     });     term.onData((data) => {       terminalConnection.sendDataToTerminal(data);     });   });      // Ensure terminal instance gets destroyed and WebSocket connection gets closed on component cleanup   onCleanup(() => {     term.dispose();     terminalConnection.closeConnection();   });   return (      ""Terminal""}       classes=""rounded border p-2 w-full border-border bg-emphasize""     >                {/* The terminal will be rendered inside this div */}               ); }; export default TerminalComponent; ``` ./src/backend/terminal/setupTerminalServer.js: ``` import os from \'os\'; import pty from \'node-pty\'; export default function setupTerminalServer(socket) {   const defaultShell = process.env.SHELL || \'/bin/sh\';   const shell = os.platform() === \'win32\' ? \'powershell.exe\' : defaultShell;   const terminal = pty.spawn(shell, [], {     name: \'xterm-color\',     env: process.env,   });   socket.on(\'message\', (data) => {     terminal.write(data);   });   terminal.on(\'data\', (data) => {     socket.send(data);   });   terminal.on(\'exit\', () => {     socket.close();   }); } ``` ./src/frontend/service/terminal/terminalConnection.js: ``` import { createWebSocket } from \'../createWebSocket\'; const socket = createWebSocket(\'/terminal\'); const sendDataToTerminal = (data) => {   if (socket.readyState === WebSocket.OPEN) {     socket.send(data);   } }; const setOnDataReceived = (callback) => {   socket.onmessage = (event) => {     callback(event.data);   }; }; const closeConnection = () => {   if (socket.readyState === WebSocket.OPEN) {     socket.close();   } }; export default {   sendDataToTerminal,   setOnDataReceived,   closeConnection, }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: We set the terminal size to fit the width of the container element. However, the shell running inside is not notified. How to do it? ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: Debian Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
63,container,0.372,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/backend/terminal/setupTerminalServer.js: ``` import { spawn } from \'child_process\'; export default function setupTerminalServer(socket) {   const shell = spawn(\'/bin/sh\');   socket.on(\'data\', (data) => {     shell.stdin.write(data);   });   shell.stdout.on(\'data\', (data) => {     socket.write(data);   });   shell.stderr.on(\'data\', (data) => {     socket.write(data);   });   shell.on(\'exit\', () => {     socket.end();   }); } ``` ./src/backend/startServer.js: ``` import express from \'express\'; import cors from \'cors\'; import { createServer } from \' import { parse } from \'url\'; import { WebSocketServer } from \'ws\'; import { setupRoutes } from \'./setupRoutes.js\'; import { notifyOnFileChange } from \'./notifyOnFileChange.js\'; import { getServerPort } from \'./serverConfig.js\'; import hostConfig from \'../config/hostConfig.js\'; export function startServer() {   const app = express();   app.use(cors());   app.use(express.json());   const server = createServer(app);      const wssTerminal = new WebSocketServer({ noServer: true });   const wssNotify = new WebSocketServer({ noServer: true });   notifyOnFileChange(wssNotify);      server.on(\'upgrade\', function upgrade(request, socket, head) {     const { pathname } = parse(request.url);     if (pathname === \'/terminal\') {       wssTerminal.handleUpgrade(request, socket, head, function done(ws) {         wssTerminal.emit(\'connection\', ws, request);       });     } else if (pathname === \'/\') {       wssNotify.handleUpgrade(request, socket, head, function done(ws) {         wssNotify.emit(\'connection\', ws, request);       });     } else {       socket.destroy();     }   });   setupRoutes(app);   const { enabled, ip } = hostConfig();   const port = getServerPort();   server.listen(port, ip || (enabled ? \'0.0.0.0\' : undefined), () => {     console.log(\'Server is running on port\', port);   }); } ``` ./src/backend/terminal/terminalRoutes.js: ``` import setupTerminalServer from \'./setupTerminalServer.js\'; export default function terminalRoutes(wss) {   wss.on(\'connection\', (socket) => {     setupTerminalServer(socket);   }, { path: \'/terminal\' }); } ``` # Task Fix the following issue! - terminalRoutes must be called on the ws terminal - The ws incoming message name is message, not data - Add console.logs in setupTerminalServer ## Project Specifics - Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
64,container,0.3605,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/backend/terminal/setupTerminalServer.js: ``` import { spawn } from \'child_process\'; export default function setupTerminalServer(socket) {   const shell = spawn(\'/bin/sh\');   socket.on(\'data\', (data) => {     shell.stdin.write(data);   });   shell.stdout.on(\'data\', (data) => {     socket.write(data);   });   shell.stderr.on(\'data\', (data) => {     socket.write(data);   });   shell.on(\'exit\', () => {     socket.end();   }); } ``` ./src/backend/terminal/terminalRoutes.js: ``` import setupTerminalServer from \'./setupTerminalServer.js\'; export default function terminalRoutes(wss) {   wss.on(\'connection\', (socket) => {     setupTerminalServer(socket);   }, { path: \'/terminal\' }); } ``` ./src/frontend/service/createWebSocket.js: ``` import { getBaseUrl } from \'../getBaseUrl.js\'; export const createWebSocket = () => {   const baseUrl = getBaseUrl();   const wsUrl = baseUrl.replace(/^ \'ws\');   const ws = new WebSocket(wsUrl);   return ws; }; ``` ./src/frontend/service/useWebsocket.js: ``` import { createEffect } from \'solid-js\'; import { createWebSocket } from \'./createWebSocket.js\'; export const useWebsocket = (onMessage) => {   let socket = createWebSocket();   socket.onopen = () => console.log(\'WebSocket is connected\');   socket.onmessage = onMessage;   socket.onerror = (error) => console.log(\'WebSocket error:\', error);   createEffect(() => {     if (!socket || socket.readyState === WebSocket.CLOSED) {       socket = createWebSocket();       socket.onmessage = onMessage;     }   });   return () => {     if (socket && socket.readyState === WebSocket.OPEN) {       socket.close();     }   }; }; ``` ./src/frontend/components/PromptDescriptor.jsx: ``` import { onMount, onCleanup } from \'solid-js\'; import { fetchDescriptor } from \'../service/fetchDescriptor\'; import { fetchGitStatus } from \'../service/fetchGitStatus\'; import { useWebsocket } from \'../service/useWebsocket\'; import { promptDescriptor, setPromptDescriptor } from \'../model/promptDescriptor\'; import { descriptorFileName } from \'../../prompt/promptDescriptorConfig\'; const PromptDescriptor = () => {   onMount(async () => {     const text = await fetchDescriptor();     setPromptDescriptor(text);   });   useWebsocket(async (e) => {     if (e.data === \'update\') {       const text = await fetchDescriptor();       setPromptDescriptor(text);       // Fetch git status when an update event is received       fetchGitStatus();     }   });   onCleanup(() => {     setPromptDescriptor(\'\');   });   return (            {descriptorFileName}                           {promptDescriptor()}                        ); }; export default PromptDescriptor; ``` ./src/frontend/components/terminal/TerminalComponent.jsx: ``` import { onCleanup, onMount } from \'solid-js\'; import { Terminal } from \'xterm\'; import \'xterm/css/xterm.css\'; const XtermComponent = () => {   let container;   const term = new Terminal();      onMount(() => {     term.open(container);   });      // Ensure terminal instance gets destroyed on component cleanup   onCleanup(() => {     term.dispose();   });   return (            {/* The terminal will be rendered inside this div */}        ); }; export default XtermComponent; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: - create frontent/service/terminal/ - in it, create terminalConnection.js that connects to /terminal on websocket, and speaks with the server - Update the terminal component to use this new service - PromptDescriptor is for your reference only ## Project Specifics - Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
65,container,0.3416,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/service/useWebsocket.js: ``` import { createEffect } from \'solid-js\'; import { createWebSocket } from \'./createWebSocket.js\'; export const useWebsocket = (onMessage) => {   let socket = createWebSocket();   socket.onopen = () => console.log(\'WebSocket is connected\');   socket.onmessage = onMessage;   socket.onerror = (error) => console.log(\'WebSocket error:\', error);   createEffect(() => {     if (!socket || socket.readyState === WebSocket.CLOSED) {       socket = createWebSocket();       socket.onmessage = onMessage;     }   });   return () => {     if (socket && socket.readyState === WebSocket.OPEN) {       socket.close();     }   }; }; ``` ./src/frontend/service/createWebSocket.js: ``` import { getBaseUrl } from \'../getBaseUrl.js\'; export const createWebSocket = () => {   const baseUrl = getBaseUrl();   const wsUrl = baseUrl.replace(/^ \'ws\');   const ws = new WebSocket(wsUrl);   return ws; }; ``` ./src/backend/startServer.js: ``` import express from \'express\'; import cors from \'cors\'; import { createServer } from \' import { WebSocketServer } from \'ws\'; import { setupRoutes } from \'./setupRoutes.js\'; import { notifyOnFileChange } from \'./notifyOnFileChange.js\'; import { getServerPort } from \'./serverConfig.js\'; import hostConfig from \'../config/hostConfig.js\'; export function startServer() {   const app = express();   app.use(cors());   app.use(express.json());   const server = createServer(app);   const wss = new WebSocketServer({ server });   notifyOnFileChange(wss);   setupRoutes(app);   const { enabled, ip } = hostConfig();   const port = getServerPort();   server.listen(port, ip || (enabled ? \'0.0.0.0\' : undefined), () => {     console.log(\'Server is running on port\', port);   }); } ``` # Task Answer the following question! We need a terminal on the frontend. We already have a websocket server, we should use it. What are the best tools on either side? We prefer not to install anything, but don\'t yet want to write much code. Write your answer to docs/design/terminal_dependency_selection.md # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
66,container,0.3315,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/backend/terminal/setupTerminalServer.js: ``` import os from \'os\'; import pty from \'node-pty\'; export default function setupTerminalServer(socket) {   console.log(""Setting up terminal server..."");   const defaultShell = process.env.SHELL || \'/bin/sh\';   const shell = os.platform() === \'win32\' ? \'powershell.exe\' : defaultShell;   const terminal = pty.spawn(shell, [], {     name: \'xterm-color\',     env: process.env,   });   socket.on(\'message\', (data) => {     console.log(""Received message:"", data.toString());     terminal.write(data);   });   terminal.on(\'data\', (data) => {     console.log(""Shell output:"", data.toString());     socket.send(data);   });   terminal.on(\'exit\', () => {     console.log(""Shell exited"");     socket.close();   }); } ``` ./src/backend/terminal/terminalRoutes.js: ``` import setupTerminalServer from \'./setupTerminalServer.js\'; export default function terminalRoutes(wss) {   wss.on(\'connection\', (socket) => {     setupTerminalServer(socket);   }, { path: \'/terminal\' }); } ``` # Task Refactor! Remove console.logs from terminal backend ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
67,container,0.3198,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/terminal/TerminalComponent.jsx: ``` import { onCleanup, onMount } from \'solid-js\'; import { Terminal } from \'xterm\'; import \'xterm/css/xterm.css\'; import terminalConnection from \'../../service/terminal/terminalConnection\'; const TerminalComponent = () => {   let container;   const term = new Terminal();      onMount(() => {     term.open(container);     terminalConnection.setOnDataReceived((data) => {       term.write(data);     });     term.onData((data) => {       terminalConnection.sendDataToTerminal(data);     });   });      // Ensure terminal instance gets destroyed and WebSocket connection gets closed on component cleanup   onCleanup(() => {     term.dispose();     terminalConnection.closeConnection();   });   return (            {/* The terminal will be rendered inside this div */}        ); }; export default TerminalComponent; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: - Factor out xterm.js initialization to setupXTerm.js - Install and use xterm-addon-fit docs for your reference: Addons / fit The fit addon provides the fit method that lets you adjust the size and geometry (columns   rows) of the terminal to fit the size of the parent element. import { Terminal } from \'xterm\'; import { FitAddon } from \'xterm-addon-fit\'; const term = new Terminal(); const fitAddon = new FitAddon(); term.loadAddon(fitAddon); // Open the terminal in #terminal-container term.open(document.getElementById(\'terminal-container\')); // Make the terminal\'s size and geometry fit the size of #terminal-container fitAddon.fit(); ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
68,container,0.3189,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/terminal/TerminalComponent.jsx: ``` import { onCleanup, onMount } from \'solid-js\'; import \'xterm/css/xterm.css\'; import terminalConnection from \'../../service/terminal/terminalConnection\'; import { setupXTerm } from \'../../service/terminal/setupXTerm\'; import { sendTerminalResizeNotification } from \'../../service/terminal/sendTerminalResizeNotification\'; import DetailsComponent from \'../DetailsComponent\'; import VirtualButton from \'./VirtualButton\'; const TerminalComponent = () => {   let container;   const { term, fitAddon } = setupXTerm();      const sendVirtualKey = (key) => {     term.write(key);   };   onMount(() => {     term.open(container);     fitAddon.fit();     const { rows, cols } = term;     sendTerminalResizeNotification(rows, cols);     terminalConnection.setOnDataReceived((data) => {       term.write(data);     });     term.onData((data) => {       terminalConnection.sendDataToTerminal(JSON.stringify({ type: \'input\', data }));     });     term.onResize(({ newRows, newCols }) => {       sendTerminalResizeNotification(newRows, newCols);     });   });      onCleanup(() => {     term.dispose();     terminalConnection.closeConnection();   });   return (      ""Terminal""}       classes=""rounded border p-2 w-full border-border bg-emphasize""     >                 sendVirtualKey(\' x1B\')} />          sendVirtualKey(\'-\')} />          sendVirtualKey(\':\')} />          sendVirtualKey(\' x1A\')} />          sendVirtualKey(\' x19\')} />          sendVirtualKey(\' x18\')} />          sendVirtualKey(\' x16\')} />          sendVirtualKey(\' x1BOP\')} />          sendVirtualKey(\' x1B[15~\')} />          sendVirtualKey(\' x1B[17~\')} />          sendVirtualKey(\' x1B[18~\')} />                       {/* The terminal will be rendered inside this div */}               ); }; export default TerminalComponent; ``` ./src/frontend/components/terminal/VirtualButton.jsx: ``` import { createSignal } from \'solid-js\'; const VirtualButton = (props) => {   const sendKey = () => {     if (props.action) {       props.action();     }   };   return (            {props.label}        ); }; export default VirtualButton; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: 1. The terminal component should send virtual key  codes to the terminal connection, not to xterm.js. 2. Add text-text class to the virtual buttons ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
69,container,0.3171,"example, need, start, set, end, datum, terminal, info, server, function","['You are AI Junior, you code like Donald Knuth. # Working set ./src/frontend/components/terminal/TerminalComponent.jsx: ``` import { onCleanup, onMount } from \'solid-js\'; import \'xterm/css/xterm.css\'; import terminalConnection from \'../../service/terminal/terminalConnection\'; import { setupXTerm } from \'../../service/terminal/setupXTerm\'; import { sendTerminalResizeNotification } from \'../../service/terminal/sendTerminalResizeNotification\'; import DetailsComponent from \'../DetailsComponent\'; const TerminalComponent = () => {   let container;   const { term, fitAddon } = setupXTerm();      onMount(() => {     term.open(container);     fitAddon.fit();     const { rows, cols } = term;     sendTerminalResizeNotification(rows, cols);     terminalConnection.setOnDataReceived((data) => {       term.write(data);     });     term.onData((data) => {       terminalConnection.sendDataToTerminal(JSON.stringify({ type: \'input\', data }));     });     term.onResize(({ newRows, newCols }) => {       sendTerminalResizeNotification(newRows, newCols);     });   });      // Ensure terminal instance gets destroyed and WebSocket connection gets closed on component cleanup   onCleanup(() => {     term.dispose();     terminalConnection.closeConnection();   });   return (      ""Terminal""}       classes=""rounded border p-2 w-full border-border bg-emphasize""     >                {/* The terminal will be rendered inside this div */}               ); }; export default TerminalComponent; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Add virtual buttons to the terminal. Virtual buttons are clickable buttons on top of the terminal, (visible when opened): - Esc - - - : - Ctrl-Z - Ctrl-Y - Ctrl-X - Ctrl-V - F1 - F5 - F6 - F7 ## Project Specifics - Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( .... - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
70,display,0.4512,"file, prompt, path, attention, const, content, format, await, src, return","['You\'re the \'Contributor\', an AI system aiding authors. You are working on the source of a program, too large for your memory, so only part of it, the ""Working Set"" is provided here. Some files are printed in the working set. Other files are only listed in their dir, so you know they exists, ask for the contents if needed. The contents of some dirs are not listed, ask for their content if needed. # Working set src/: attention, config.js, execute, interactiveSession, main.js, prompt, utils src/prompt/createPrompt.js: // Returns a string to be used as AI prompt, composed of the current attention, task description, and output format import { readAttention } from ""../attention/readAttention.js"" import fs from \'fs\'; import util from \'util\'; import yaml from \'js-yaml\'; import { getSystemPrompt } from ""../config.js""; const readFile = util.promisify(fs.readFile); // Get the value of the --prompt flag, if it exists function getPromptFlag() {   const promptFlag = process.argv.find(arg => arg.startsWith(""--prompt=""));   if (promptFlag) {     return promptFlag.split(""="")[1];   } } // return the system prompt if the --system-prompt or -s flag is present async function getSystemPromptIfNeeded() {   if (process.argv.includes(""--system-prompt"") || process.argv.includes(""-s"")) {     return `${await getSystemPrompt()} n`;   }   return """"; } const createPrompt = async (userInput) => {   const promptDescriptor = yaml.load(await readFile(getPromptFlag() || ""prompt/prompt-list.yaml"", ""utf8""));     const attention = await readAttention(promptDescriptor.attention);   const task = await readFile(promptDescriptor.task, ""utf8"");   const format = await readFile(promptDescriptor.format, ""utf8"");   const system = await getSystemPromptIfNeeded();   const saveto = promptDescriptor.saveto;   return {     prompt: `${system}# Working set n n${attention} n n# Task n n${task} n n# Output Format n n${format} n n${userInput ? userInput : """"}`,     saveto   }; } export { createPrompt }; src/attention/readAttention.js: import fs from \'fs\'; import path from \'path\'; import util from \'util\'; import { processPath } from \'./filesystem.js\'; import { processInterfaceSection } from \'./processInterfaceSection.js\'; const readFile = util.promisify(fs.readFile); export const readAttention = async (attentionFilePath = ""prompt/attention.txt"", attentionRootDir = \'.\') => {   try {     const data = await readFile(path.join(attentionRootDir, attentionFilePath), ""utf8"");     const lines = data.split("" n"");     const processedLines = await Promise.all(lines.map(line => {       const trimmedLine = line.trim();       if (trimmedLine.endsWith(\' iface\')) {         const filePath = trimmedLine.slice(0, -6).trim();         return processInterfaceSection(attentionRootDir, filePath);       } else {         return processPath(attentionRootDir, trimmedLine);       }     }));     return processedLines.join("" n"");   } catch (error) {     console.warn(error);     throw new Error(""Attention file is missing or unreadable!"");   } }; # Task Implement the following feature! - Write a small synopsis about the implementation! - Create new files when needed! - When a file is larger than 25 lines or can be splitted logically, split it! # Output Format Provide the new file(s) as code blocks, each prefixed with its path and a colon. Avoid any explanatory text, as your output will be programmatically processed! The use of attention.txt should be eliminated. Instead of reading the attention from this external file, include its line as an array in the prompt descriptor yaml file.']"
71,display,0.447,"file, prompt, path, attention, const, content, format, await, src, return","['You\'re the \'Contributor\', an AI system aiding authors. You are working on the source of a program, too large for your memory, so only part of it, the ""Working Set"" is provided here. Some files are printed in the working set. Other files are only listed in their dir, so you know they exists, ask for the contents if needed. The contents of some dirs are not listed, ask for their content if needed. # Working set ./: .DS_Store, .git, .gitignore, .vscode, current_prompt.md, current_prompt.yaml, doc, node_modules, package-lock.json, package.json, prompt, secret.sh, src, tmp src/: attention, config.js, execute, interactiveSession, main.js, prompt, utils src/prompt/createPrompt.js: // Returns an object containing the AI prompt and the save location.  // The AI prompt is composed of the current attention, task description, and output format. import { readAttention } from ""../attention/readAttention.js"" import util from \'util\'; import fs from \'fs\'; import yaml from \'js-yaml\'; import { getSystemPrompt } from ""../config.js""; const readFile = util.promisify(fs.readFile); // Get the value of the --prompt flag, if it exists function getPromptFlag() {   const promptFlag = process.argv.find(arg => arg.startsWith(""--prompt=""));   if (promptFlag) {     return promptFlag.split(""="")[1];   } } // return the system prompt if the --system-prompt or -s flag is present async function getSystemPromptIfNeeded() {   if (process.argv.includes(""--system-prompt"") || process.argv.includes(""-s"")) {     return `${await getSystemPrompt()} n`;   }   return """"; } const createPrompt = async (userInput) => {   const promptDescriptor = yaml.load(await readFile(getPromptFlag() || ""prompt/prompt-list.yaml"", ""utf8""));     const attention = await readAttention(promptDescriptor.attention);   const task = await readFile(promptDescriptor.task, ""utf8"");   const format = await readFile(promptDescriptor.format, ""utf8"");   const system = await getSystemPromptIfNeeded();   const saveto = promptDescriptor.saveto;   return {     prompt: `${system}# Working set n n${attention.join("" n"")} n n# Task n n${task} n n# Output Format n n${format} n n${userInput ? userInput : """"}`,     saveto   }; } export { createPrompt }; src/attention/readAttention.js: import path from \'path\'; import { processPath } from \'./filesystem.js\'; import { processInterfaceSection } from \'./processInterfaceSection.js\'; export const readAttention = async (attentionArray = [], attentionRootDir = \'.\') => {   try {     const processedLines = await Promise.all(attentionArray.map(line => {       const trimmedLine = line.trim();       if (trimmedLine.endsWith(\' iface\')) {         const filePath = trimmedLine.slice(0, -6).trim();         return processInterfaceSection(attentionRootDir, filePath);       } else {         return processPath(attentionRootDir, trimmedLine);       }     }));     return processedLines;   } catch (error) {     console.warn(error);     throw new Error(""Error processing attention lines!"");   } }; # Task Implement the following feature! - Write a plan before the implementation! - Create new files when needed! - When a file is larger than 25 lines or can be splitted logically, split it! The attention consists of files and listed directories. We will improve it by printing a PARTIAL folder structure instead of listing all directories. ## Example A sample prompt descriptor: ```yaml task: prompt/task/feature/implement.md format: prompt/format/new_file_version.md attention:   - ./   - prompt/   - src/   - src/attention/readAttention.js ``` This should generate the following output: ``` /  doc/...  node_modules/...  package.json  prompt/      attention-cache/...      format/...      prompt-drill.yaml      prompt-list.yaml      system.md      system.md.old      task/...  secret.sh  src/      attention/...      config.js      execute/...      interactiveSession/          handleApiResponse.js          printNewtext.js          saveAndSendPrompt.js          startInteractiveSession.js      main.js      prompt/...      utils/...  tmp/... src/attention/readAttention.js: [contents of readAttention.js] Notes:  - Use the special characters   and   to show the levels of the hierarchy!  - Only list directories mentioned in the descriptor, do not recurse!  - While listing a dir, list both files and subdirs, but mark subdirs with / at the end of the line!  - While listing a dir, if found a subdir not mentioned in the descriptor, mark it with /... at the end of the line! # Output Format Provide the new file(s) as code blocks, each prefixed with its path and a colon. Avoid any explanatory text, as your output will be programmatically processed! ']"
72,display,0.427,"file, prompt, path, attention, const, content, format, await, src, return","['# Working set ``` ./  .git/...  .gitignore  README.md  babel.config.js  change.sh  doc/...  node_modules/...  package-lock.json  package.json  prompt/...  prompt.md  prompt.yaml  secret.sh  src/... ``` ./src/prompt/loadFormatTemplate.js: ``` import util from \'util\'; import fs from \'fs\'; import path from \'path\'; import ejs from \'ejs\'; const readFile = util.promisify(fs.readFile); const loadFormatTemplate = async (formatTemplatePath, templateVars) => {   try {     // Try to read the file relative to the current directory     return await ejs.renderFile(formatTemplatePath, templateVars, {async: true});   } catch (err) {     // If the file doesn\'t exist, try reading it from the project root directory     const rootPath = path.resolve(__dirname, \'../../\', formatTemplatePath);     return await ejs.renderFile(rootPath, templateVars, {async: true});   } }; export { loadFormatTemplate }; ``` ./src/prompt/loadTaskTemplate.js: ``` import util from \'util\'; import fs from \'fs\'; import path from \'path\'; import ejs from \'ejs\'; const readFile = util.promisify(fs.readFile); const loadTaskTemplate = async (taskTemplatePath, templateVars) => {   try {     // Try to read the file relative to the current directory     return await ejs.renderFile(taskTemplatePath, templateVars, {async: true});   } catch (err) {     // If the file doesn\'t exist, try reading it from the project root directory     const rootPath = path.resolve(__dirname, \'../../\', taskTemplatePath);     return await ejs.renderFile(rootPath, templateVars, {async: true});   } }; export { loadTaskTemplate }; ``` ./src/config.js: ``` import fs from \'fs/promises\'; import readline from \'readline\'; import { ChatGPTAPI } from \'chatgpt\'; // test if -d or --dry-run cli arg is present function isDryRun() {   return process.argv.includes(""-d"") || process.argv.includes(""--dry-run""); } const api = isDryRun() ? {     sendMessage: () => { return {id: 42, text: ""DRY RUN, NOT SENT""}}   } : new ChatGPTAPI({   debug: true,   apiKey: process.env.OPENAI_API_KEY,   systemMessage: await getSystemPrompt(),   completionParams: {     model: get_model(),     stream: true,     temperature: 0.5,     max_tokens: 2048,   } }); const rl = readline.createInterface({   input: process.stdin,   output: process.stdout }); function get_model() {   const modelArg = process.argv.find(arg => arg.startsWith(\'--model=\'));   if (modelArg) {     return modelArg.split(\'=\')[1];   }   return ""gpt-4""; } async function getSystemPrompt() {   return (await fs.readFile(""prompt/system.md"", ""utf8"")).toString() } export { api, rl, get_model, getSystemPrompt}; ``` src/prompt/getSystemPromptIfNeeded.js: ``` import { getSystemPrompt } from ""../config.js""; async function getSystemPromptIfNeeded() {   if (process.argv.includes(""--system-prompt"") || process.argv.includes(""-s"")) {     return `${await getSystemPrompt()} n`;   }   return """"; } export { getSystemPromptIfNeeded }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: When running from another dir, I get [Error: ENOENT: no such file or directory, open &#39;prompt/system.md&#39;] The system prompt should be loaded using the same logic that is used for the format prompt. Refactor the code so that 1. this logic is extracted to src/prompt/loadPromptFile.js and 2. getSystemPrompt is extracted to src/prompt/ # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
73,display,0.4026,"file, prompt, path, attention, const, content, format, await, src, return","['You\'re the \'Contributor\', an AI system aiding authors. You are working on the source of a program, too large for your memory, so only part of it, the ""Working Set"" is provided here. You will see a partial directory structure. Ask for the contents of subdirs marked with /... if needed. Some files are printed in the working set. Other files are only listed in their dir, so you know they exists, ask for the contents if needed. # Working set src/attention/  filesystem.js  printFolderStructure.js  processInterfaceSection.js  readAttention.js src/attention/readAttention.js: import { processPath } from \'./filesystem.js\'; import { processInterfaceSection } from \'./processInterfaceSection.js\'; import { printFolderStructure } from \'./printFolderStructure.js\'; export const readAttention = async (attentionArray = [], attentionRootDir = \'.\') => {   try {     const processedLines = await Promise.all(attentionArray.map(line => {       const trimmedLine = line.trim();       if (trimmedLine.endsWith(\' iface\')) {         const filePath = trimmedLine.slice(0, -6).trim();         return processInterfaceSection(attentionRootDir, filePath);       } else if (trimmedLine.endsWith(\'/\')) {         return printFolderStructure(attentionRootDir, trimmedLine.slice(0, -1).trim());       } else {         return processPath(attentionRootDir, trimmedLine);       }     }));     return processedLines;   } catch (error) {     console.warn(error);     throw new Error(""Error processing attention lines!"");   } }; src/attention/filesystem.js: // filesystem - Provides utility functions to process paths in a filesystem. // It has two main functionalities: // - If a path points to a file, the module reads and displays the content of the file. // - If a path points to a directory, the module lists the files and subdirectories contained in that directory. // If a problem occurs while processing a particular file or directory, the module prints its name followed by "": err!"". import fs from \'fs\' import path from \'path\' import util from \'util\' const readdir = util.promisify(fs.readdir) const readFile = util.promisify(fs.readFile) const stat = util.promisify(fs.stat) export const processPath = async (root, p) => {   const fullPath = path.join(root, p)   try {     const stats = await stat(fullPath)     return stats.isDirectory() ? await processDirectory(fullPath) : await processFile(fullPath)   } catch (error) {     return `${p}: err!`   } } const processFile = async (p) => {   try {     const content = await readFile(p, ""utf8"")     return `${p}: n${content} n`   } catch (error) {     return `${p}: err! n`   } } const processDirectory = async (p) => {   try {     const content = await readdir(p)     return `${p}: n${content.join(\', \')} n`   } catch (error) {     return `${p}: err! n`   } } src/attention/processInterfaceSection.js: import fs from \'fs\'; import path from \'path\'; import util from \'util\'; const readFile = util.promisify(fs.readFile); export async function processInterfaceSection(attentionRootDir, filePath) {   const fullPath = path.join(attentionRootDir, filePath);   const fileData = await readFile(fullPath, ""utf8"");   const sections = fileData.split(""##"");   const interfaceSection = sections.find(section => section.toLowerCase().includes(""interface""));   if (interfaceSection) {     return `${filePath} iface: n${interfaceSection.trim().substring(10)}`;   } else {     return fileData;   } } src/attention/printFolderStructure.js: import fs from \'fs\'; import path from \'path\'; import util from \'util\'; const readdir = util.promisify(fs.readdir); const stat = util.promisify(fs.stat); export const printFolderStructure = async (rootDir, dir) => {   let structure = dir + \'/ n\';   try {     const entries = await readdir(path.join(rootDir, dir));     for (let i = 0; i < entries.length; i++) {       const entry = entries[i];       const entryStat = await stat(path.join(rootDir, dir, entry));       if (entryStat.isDirectory()) {         structure += \'  \' + entry + \'/... n\';       } else {         structure += \'  \' + entry + \' n\';       }     }     return structure;   } catch (error) {     console.warn(error);     throw new Error(""Error processing directory structure!"");   } }; # Task Clean the code by removing unused imports, functions, variables, files, etc! # Output Format Provide the new file(s) as code blocks, each prefixed with its path and a colon. Avoid any explanatory text, as your output will be programmatically processed! Directories are now handled by printing them out. processPath is older code, but now it should not process directories, only files, so it may be possible to completely eliminate it.']"
74,display,0.372,"file, prompt, path, attention, const, content, format, await, src, return","['You\'re the \'Contributor\', an AI system aiding authors. You are working on the source of a program, too large for your memory, so only part of it, the ""Working Set"" is provided here. You will see a partial directory structure. Ask for the contents of subdirs marked with /... if needed. Some files are printed in the working set. Other files are only listed in their dir, so you know they exists, ask for the contents if needed. # Working set src/prompt/createPrompt.js: // Returns an object containing the AI prompt and the save location.  // The AI prompt is composed of the current attention, task description, and output format. import { readAttention } from ""../attention/readAttention.js"" import util from \'util\'; import fs from \'fs\'; import yaml from \'js-yaml\'; import ejs from \'ejs\'; import { getSystemPrompt } from ""../config.js""; const readFile = util.promisify(fs.readFile); // Get the value of the --prompt flag, if it exists function getPromptFlag() {   const promptFlag = process.argv.find(arg => arg.startsWith(""--prompt=""));   if (promptFlag) {     return promptFlag.split(""="")[1];   } } // return the system prompt if the --system-prompt or -s flag is present async function getSystemPromptIfNeeded() {   if (process.argv.includes(""--system-prompt"") || process.argv.includes(""-s"")) {     return `${await getSystemPrompt()} n`;   }   return """"; } const createPrompt = async (userInput) => {   const promptDescriptor = yaml.load(await readFile(getPromptFlag() || ""prompt/prompt-list.yaml"", ""utf8""));   const templateVars = Object.keys(promptDescriptor)     .filter(key => [\'task\', \'format\', \'attention\', \'saveto\'].indexOf(key)  {       obj[key] = promptDescriptor[key];       return obj;     }, {});   const attention = await readAttention(promptDescriptor.attention);   const task = await ejs.renderFile(promptDescriptor.task, templateVars, {async: true});   const format = await ejs.renderFile(promptDescriptor.format, templateVars, {async: true});   const system = await getSystemPromptIfNeeded();   const saveto = promptDescriptor.saveto;   return {     prompt: `${system}# Working set n n${attention.join("" n"")} n n# Task n n${task} n n# Output Format n n${format} n n${userInput ? userInput : """"}`,     saveto   }; } export { createPrompt }; # Task Implement the following feature! - Write a plan before the implementation! - Create new files when needed! - When a file is larger than 25 lines or can be splitted logically, split it! Requirements: When the value of an ejs variable in the prompt descriptor points to an existing a file, the file is read and the content is used as the value of the variable. # Output Format Provide the new file(s) as code blocks, each prefixed with its path and a colon. Avoid any explanatory text, as your output will be programmatically processed! ']"
75,display,0.3564,"file, prompt, path, attention, const, content, format, await, src, return","['You\'re the \'Contributor\', an AI system aiding authors. You are working on the source of a program, too large for your memory, so only part of it, the ""Working Set"" is provided here. You will see a partial directory structure. Ask for the contents of subdirs marked with /... if needed. Some files are printed in the working set. Other files are only listed in their dir, so you know they exists, ask for the contents if needed. # Working set src/interactiveSession/startInteractiveSession.js: import { createPrompt } from \'../prompt/createPrompt.js\'; import { saveAndSendPrompt } from \'./saveAndSendPrompt.js\'; const startInteractiveSession = async (last_command_result = """", parent_message_id = null, rl, api) => {   rl.question(\'$ \', async (task) => {     const { prompt, saveto } = await createPrompt(task, last_command_result);     await saveAndSendPrompt(prompt, saveto, parent_message_id, api, rl, last_command_result, startInteractiveSession);   }); }; export { startInteractiveSession }; src/prompt/createPrompt.js: // Returns an object containing the AI prompt and the save location.  // The AI prompt is composed of the current attention, task description, and output format. import { readAttention } from ""../attention/readAttention.js"" import util from \'util\'; import fs from \'fs\'; import yaml from \'js-yaml\'; import { getSystemPrompt } from ""../config.js""; const readFile = util.promisify(fs.readFile); // Get the value of the --prompt flag, if it exists function getPromptFlag() {   const promptFlag = process.argv.find(arg => arg.startsWith(""--prompt=""));   if (promptFlag) {     return promptFlag.split(""="")[1];   } } // return the system prompt if the --system-prompt or -s flag is present async function getSystemPromptIfNeeded() {   if (process.argv.includes(""--system-prompt"") || process.argv.includes(""-s"")) {     return `${await getSystemPrompt()} n`;   }   return """"; } const createPrompt = async (userInput) => {   const promptDescriptor = yaml.load(await readFile(getPromptFlag() || ""prompt/prompt-list.yaml"", ""utf8""));     const attention = await readAttention(promptDescriptor.attention);   const task = await readFile(promptDescriptor.task, ""utf8"");   const format = await readFile(promptDescriptor.format, ""utf8"");   const system = await getSystemPromptIfNeeded();   const saveto = promptDescriptor.saveto;   return {     prompt: `${system}# Working set n n${attention.join("" n"")} n n# Task n n${task} n n# Output Format n n${format} n n${userInput ? userInput : """"}`,     saveto   }; } export { createPrompt }; current_prompt.yaml: task: prompt/task/feature/implement.md format: prompt/format/new_file_version.md attention:   - src/interactiveSession/startInteractiveSession.js     - src/prompt/createPrompt.js   - current_prompt.yaml saveto: current_prompt.md requirements: requirements.md # Task Implement the following feature! - Write a plan before the implementation! - Create new files when needed! - When a file is larger than 25 lines or can be splitted logically, split it! Requirements: When creating prompts from the yaml descriptor, injecting arbitrary values into the markdown files would be great! E.g. the ""requirements"" key is not parsed currently, but it would be nice for the implement.md (This markdown file injected into the current prompt) to allow us simply write ${requirements} in ES6 style. Notes: Idea: ejs is what we need. All uknown keys in the yaml should be made available for an ejs template. This template is used instead of the markdown files. The template, when filled out, reveals a markdown, which will be injected to the prompt. # Output Format Provide the new file(s) as code blocks, each prefixed with its path and a colon. Avoid any explanatory text, as your output will be programmatically processed! ']"
76,display,0.3307,"file, prompt, path, attention, const, content, format, await, src, return","[""import Bundlr from '@bundlr-network/client/build/cjs/node/bundlr'; import { ethers, Signer } from 'ethers'; import { sarcoClientInitSchema, SarcoInitParams } from '../shared/helpers/validation'; import { Libp2p } from 'libp2p'; import { bootLip2p } from '../shared/libp2p_node'; import { SarcoNetworkConfig } from '../shared/types'; import { Api } from '../shared/Api'; import { ArchaeologistApi } from '../shared/ArchaeologistApi'; import { goerliNetworkConfig, mainnetNetworkConfig, sepoliaNetworkConfig } from '../shared/networkConfig'; import { Token } from '../shared/Token'; export interface NodeSarcoClientConfig {   privateKey: string;   providerUrl: string; } export class NodeSarcoClient {   api!: Api;   token!: Token;   archaeologist!: ArchaeologistApi;   signer: Signer;   bundlr!: Bundlr;   isInitialised: boolean = false;   private providerUrl!: string;   private etherscanApiKey: string = '';   private p2pNode!: Libp2p;   private networkConfig!: SarcoNetworkConfig;   private privateKey: string;   constructor(config: NodeSarcoClientConfig) {     const customProvider = new ethers.providers.JsonRpcProvider(config.providerUrl);     this.signer = new ethers.providers.Web3Provider(customProvider as any).getSigner();     this.privateKey = config.privateKey;   }   async init(initParams: SarcoInitParams, onInit = (_: Libp2p) => {}): Promise {     const params = await sarcoClientInitSchema.validate(initParams);     const networkConfigByChainId = new Map([       [1, mainnetNetworkConfig(this.providerUrl, initParams.etherscanApiKey)],       [5, goerliNetworkConfig(this.providerUrl, initParams.etherscanApiKey)],       [11155111, sepoliaNetworkConfig(this.providerUrl, initParams.etherscanApiKey)],     ]);     const networkConfig = networkConfigByChainId.get(params.chainId);     if (!networkConfig) {       throw new Error(`Unsupported chainId: ${params.chainId}`);     }     this.bundlr = new Bundlr(networkConfig.bundlr.nodeUrl, networkConfig.bundlr.currencyName, this.privateKey, {       providerUrl: networkConfig.bundlr.providerUrl,     });     this.networkConfig = networkConfig;     this.etherscanApiKey = params.etherscanApiKey ?? '';     this.api = new Api(this.networkConfig.diamondDeployAddress, this.signer, this.networkConfig.subgraphUrl);     this.token = new Token(this.networkConfig.sarcoTokenAddress, this.networkConfig.diamondDeployAddress, this.signer);     this.p2pNode = await bootLip2p();     // TODO: Allow client to choose when to start/stop libp2p node     await this.startLibp2pNode();     this.archaeologist = new ArchaeologistApi(       this.networkConfig.diamondDeployAddress,       this.signer,       this.networkConfig.subgraphUrl,       this.p2pNode     );     this.isInitialised = true;     onInit(this.p2pNode);   }   async startLibp2pNode() {     console.log(`LibP2P node starting with peerID: ${this.p2pNode.peerId.toString()}`);     return this.p2pNode.start();   }   async stopLibp2pNode() {     return this.p2pNode.stop();   } } --- import Bundlr from '@bundlr-network/client/build/cjs/node/bundlr'; import { privateKey } from './api/test-data'; import { ethers } from 'ethers'; import { NodeSarcoClient } from '../src/node/NodeSarcoClient'; // Mocks jest.mock('@bundlr-network/client/build/cjs/node/bundlr'); jest.mock('../src/shared/Api', () => {   // Mock class   return {     Api: jest.fn().mockImplementation(() => {       return { someApiMethod: jest.fn() }; // Mock the methods as needed     }),   }; }); jest.mock('ethers', () => {   const ethersMock = jest.requireActual('ethers');   return {     ...ethersMock,     ethers: {       ...ethersMock.ethers,       providers: {         ...ethersMock.ethers.providers,         JsonRpcProvider: jest.fn(),         getDefaultProvider: jest.fn(),         Web3Provider: jest.fn().mockImplementation(() => {           return { getSigner: jest.fn() };         }),       },     },   }; }); jest.mock('../src/shared/Token', () => {   // Mock class   return {     Token: jest.fn().mockImplementation(() => {       return { someTokenMethod: jest.fn() }; // Mock the methods as needed     }),   }; }); const BundlrMock = Bundlr as jest.Mocked; const JsonRpcProviderMock = ethers.providers.JsonRpcProvider as jest.MockedClass; const Web3ProviderMock = ethers.providers.Web3Provider as jest.MockedClass; // Test setup describe('NodeSarcoClient', () => {   afterEach(() => {     jest.clearAllMocks();   });   describe('constructor', () => {     it('should initialize with a private key', () => {       const mockProviderUrl = 'mockProviderUrl';       // Set up your mocks       const mockJsonRpcProvider = {};       const mockWeb3Provider = { getSigner: jest.fn() };       JsonRpcProviderMock.mockReturnValue(mockJsonRpcProvider as any);       Web3ProviderMock.mockReturnValue(mockWeb3Provider as any);       const sarco = new NodeSarcoClient({ privateKey, providerUrl: mockProviderUrl });       expect(sarco).toBeDefined();       expect(JsonRpcProviderMock).toHaveBeenCalledWith(mockProviderUrl);       expect(Web3ProviderMock).toHaveBeenCalledWith(mockJsonRpcProvider);       expect(mockWeb3Provider.getSigner).toHaveBeenCalled();       expect(BundlrMock).toHaveBeenCalledWith(' 'ethereum', privateKey, {         providerUrl: mockProviderUrl,       });     });   }); }); ---  FAIL  test/NodeSarcoClient.test.ts     Test suite failed to run     Cannot find module 'libp2p' from 'src/shared/libp2p_node/index.ts'     Require stack:       src/shared/libp2p_node/index.ts       src/node/NodeSarcoClient.ts       test/NodeSarcoClient.test.ts     > 1 | import { Libp2p, createLibp2p } from 'libp2p';         | ^       2 | import { p2pNodeConfig } from './p2pNodeConfig';       3 |       4 | const idTruncateLimit = 5;       at Resolver._throwModNotFoundError (node_modules/jest-resolve/build/resolver.js:427:11)       at Object. (src/shared/libp2p_node/index.ts:1:1)       at Object. (src/node/NodeSarcoClient.ts:5:1)       at Object. (test/NodeSarcoClient.test.ts:4:1) --- Do you have any idea why I am getting this error?""]"
77,display,0.3099,"file, prompt, path, attention, const, content, format, await, src, return","['# Working set ``` ./  .DS_Store  .git/...  .gitignore  .vscode/...  README.md  babel.config.js  change.sh  dist/...  doc/...  node_modules/...  package-lock.json  package.json  prompt/...  prompt.md  prompt.yaml  secret.sh  src/...  tmp/... ``` ``` ./prompt/  archive/...  format/...  system.md  task/... ``` ``` ./src/  attention/...  backend/...  config.js  execute/...  frontend/...  index.html  interactiveSession/...  main.js  prompt/...  vite.config.js ``` ``` ./src/prompt/  createPrompt.js  extractTemplateVars.js  getPromptFlag.js  getSystemPromptIfNeeded.js  loadPromptDescriptor.js  promptProcessing.js  resolveTemplateVariables.js ``` ./src/prompt/loadPromptDescriptor.js: ``` import fs from \'fs\'; import util from \'util\'; const readFile = util.promisify(fs.readFile); const descriptorFileName = ""prompt.yaml""; const loadPromptDescriptor = async (rawPrinter) => {   const descriptorContent = await readFile(descriptorFileName, \'utf8\');   if (rawPrinter) {     rawPrinter(descriptorFileName + \': n\' + descriptorContent);   }   return descriptorContent; }; export { loadPromptDescriptor }; ``` ./src/prompt/createPrompt.js: ``` import { readAttention } from ""../attention/readAttention.js"" import util from \'util\'; import fs from \'fs\'; import yaml from \'js-yaml\'; import ejs from \'ejs\'; import { getPromptFlag } from \'./getPromptFlag.js\'; import { getSystemPromptIfNeeded } from \'./getSystemPromptIfNeeded.js\'; import { resolveTemplateVariables } from \'./resolveTemplateVariables.js\'; import { extractTemplateVars } from \'./extractTemplateVars.js\'; import { loadPromptDescriptor } from \'./loadPromptDescriptor.js\'; const readFile = util.promisify(fs.readFile); const createPrompt = async (userInput) => {   const promptDescriptor = yaml.load(await loadPromptDescriptor());   let templateVars = extractTemplateVars(promptDescriptor);   templateVars = await resolveTemplateVariables(templateVars);   const attention = await readAttention(promptDescriptor.attention);   const task = await ejs.renderFile(promptDescriptor.task, templateVars, {async: true});   const format = await ejs.renderFile(promptDescriptor.format, templateVars, {async: true});   const system = await getSystemPromptIfNeeded();   const saveto = promptDescriptor.saveto;   return {     prompt: `# Working set n n${attention.join("" n"")} n n# Task n n${task} n n# Output Format n n${format} n n${userInput ? userInput : """"}`,     saveto   }; } export { createPrompt }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: When loading the task, try to load it relative to the current directory, but if not found, load the file relative to the project root (calculated from the source file location). # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
78,display,0.3096,"file, prompt, path, attention, const, content, format, await, src, return","['You\'re the \'Contributor\', an AI system aiding authors. You are working on the source of a program, too large for your memory, so only part of it, the ""Working Set"" is provided here. You will see a partial directory structure. Ask for the contents of subdirs marked with /... if needed. Some files are printed in the working set. Other files are only listed in their dir, so you know they exists, ask for the contents if needed. # Working set ``` ./  .DS_Store  .git/...  .gitignore  .vscode/...  README.md  babel.config.js  current_prompt.md  current_prompt.yaml  dist/...  doc/...  frontend  node_modules/...  operation.sh  package-lock.json  package.json  prompt/...  secret.sh  src/...  tmp/... ``` src/prompt/createPrompt.js: ``` import { readAttention } from ""../attention/readAttention.js"" import util from \'util\'; import fs from \'fs\'; import yaml from \'js-yaml\'; import ejs from \'ejs\'; import { getPromptFlag } from \'./getPromptFlag.js\'; import { getSystemPromptIfNeeded } from \'./getSystemPromptIfNeeded.js\'; import { resolveTemplateVariables } from \'./resolveTemplateVariables.js\'; import { extractTemplateVars } from \'./extractTemplateVars.js\'; const readFile = util.promisify(fs.readFile); const createPrompt = async (userInput) => {   const promptDescriptor = yaml.load(await readFile(getPromptFlag() || ""current_prompt.yaml"", ""utf8""));   let templateVars = extractTemplateVars(promptDescriptor);   templateVars = await resolveTemplateVariables(templateVars);   const attention = await readAttention(promptDescriptor.attention);   const task = await ejs.renderFile(promptDescriptor.task, templateVars, {async: true});   const format = await ejs.renderFile(promptDescriptor.format, templateVars, {async: true});   const system = await getSystemPromptIfNeeded();   const saveto = promptDescriptor.saveto;   return {     prompt: `${system}# Working set n n${attention.join("" n"")} n n# Task n n${task} n n# Output Format n n${format} n n${userInput ? userInput : """"}`,     saveto   }; } export { createPrompt }; ``` src/prompt/promptProcessing.js: ``` import { createPrompt } from \'./createPrompt.js\'; import fs from \'fs/promises\'; const processPrompt = async (task, last_command_result, saveto = \'current_prompt.md\', parent_message_id = null) => {   const { prompt, saveto: newSaveto } = await createPrompt(task, last_command_result);   await fs.writeFile(newSaveto || saveto, prompt);   return { prompt, parent_message_id }; } export default processPrompt; ``` # Task Rename the following files You need to follow dependencies to maintain coherence. Before executing, write a concise plan! The plan should show:  - How do you avoid breaking other parts of the code.  - If you had to choose, your way of thinking. current_prompt.yaml to prompt.yaml and current_prompt.md to prompt.md. # Output Format A single shell script that creates everything. Assume Ubuntu. npm, nix, docker and jq are installed. ']"
79,display,0.2953,"file, prompt, path, attention, const, content, format, await, src, return",['How to set where cytoscape layout will be centered?']
80,family,0.6391,"datum, issue, make, add, go, store, first, time, follow, version","[""I'm going to copy and paste sections from my linkedin profile. Then I'm going to copy and paste a text resume, together with some comments, and ask you to make a new draft Data Science AssociateData Science Associate Canadian Tire Corporation   Permanent Full-timeCanadian Tire Corporation   Permanent Full-time Jun 2022 - Aug 2023   1 yr 3 mosJun 2022 - Aug 2023   1 yr 3 mos Toronto, Ontario, CanadaToronto, Ontario, Canada -Store sales similarity model evaluation and development -Integrated geodata into models -Built data pipeline and dashboard for measuring store participation in deals -Converted fixture specifications into constraints for new shelf planning system -Using store blueprints and other documents for creating planograms on new shelf planning system -Expanded and improved data source documentation on internal Confluence pages-Store sales similarity model evaluation and development -Integrated geodata into models -Built data pipeline and dashboard for measuring store participation in deals -Converted fixture specifications into constraints for new shelf planning system -Using store blueprints and other documents for creating planograms on new shelf planning system -Expanded and improved data source documentation on internal Confluence pages Skills: Cloudera   Business Analytics   Data Analysis   Research   Python (Programming Language)   SQL   Time Series Analysis   Cluster Analysis Mathematics TutorMathematics Tutor Jordan Bell Tutoring Toronto   FreelanceJordan Bell Tutoring Toronto   Freelance Jan 2021 - Jun 2022   1 yr 6 mosJan 2021 - Jun 2022   1 yr 6 mos Toronto, Ontario, CanadaToronto, Ontario, Canada Secondary and postsecondary tutoring for mathematics, physics, economics and accountingSecondary and postsecondary tutoring for mathematics, physics, economics and accounting Skills: E-Learning   Online Tutoring   Curriculum Development   Academic Advising   Mathematics Education Mathematics TutorMathematics Tutor Toronto Elite Tutorial Services   Permanent Part-timeToronto Elite Tutorial Services   Permanent Part-time Mar 2018 - Jan 2021   2 yrs 11 mosMar 2018 - Jan 2021   2 yrs 11 mos Toronto, Canada AreaToronto, Canada Area Skills: Tutoring   Curriculum Assessment   Mathematics Education Data Science InternData Science Intern Consilium CryptoConsilium Crypto Jan 2019 - Apr 2019   4 mosJan 2019 - Apr 2019   4 mos Toronto, Canada AreaToronto, Canada Area Data discovery, cleaning, analysis, descriptive statistics and machine learning. Experience doing loading, cleaning, transformation and feature selection of time series financial data. Produced top level quality visualizations, performed descriptive statistics, and created and evaluated predictive models asset pairs. Working language was Python. Worked to clean and feature engineer time series data of cryptocurrency pairs; make descriptive statistics and visualizations of the cleaned and engineered data sets; and build and evaluate predictive models for different target variables. The data cleaning, transformation, exploration, and predictive modeling were done in Python, in particular pandas and scikit-learn, and other libraries such as matplotlib.pyplot and Plotly, tsfresh, SciPy, and TA-Lib. Logistic regression.Data discovery, cleaning, analysis, descriptive statistics and machine learning. Experience doing loading, cleaning, transformation and feature selection of time series financial data. Produced top level quality visualizations, performed descriptive statistics, and created and evaluated predictive models asset pairs. Working language was Python. Worked to clean and feature engineer time series data of cryptocurrency pairs; make descriptive statistics and visualizations of the cleaned and engineered data sets; and build and evaluate predictive models for different target variables. The data cleaning, transformation, exploration, and predictive modeling were done in Python, in particular pandas and scikit-learn, and other libraries such as matplotlib.pyplot and Plotly, tsfresh, SciPy, and TA-Lib. Logistic regression. Skills: Logistic Regression   Data Analysis   Python (Programming Language)   Time Series Analysis Mathematics Course InstructorMathematics Course Instructor University of TorontoUniversity of Toronto Apr 2013 - Apr 2017   4 yrs 1 moApr 2013 - Apr 2017   4 yrs 1 mo Toronto, Canada AreaToronto, Canada Area Course instructor for undergraduate mathematics courses at the University of Toronto, at the St. George campus mostly and also several semesters at the Mississauga and Scarborough campuses. My first instructing position was a summer differential equations course, for which I was the sole instructor of a one section course. I set the syllabus according to the official calendar and past courses and my own instincts, assigned the textbook and planned and delivered the lectures to over 100 students. I have also been part of teaching teams for multiple section courses, both when there is a designated senior instructor and when there is a consensus system without a senior instructor. For most courses I have taught I made course homepages and posted practice tests and practice final exams made from scratch; make enough questions and some go into the real exam some go into the practice exam. The three courses I taught different versions of were differential equations, linear algebra, and multivariable calculus.Course instructor for undergraduate mathematics courses at the University of Toronto, at the St. George campus mostly and also several semesters at the Mississauga and Scarborough campuses. My first instructing position was a summer differential equations course, for which I was the sole instructor of a one section course. I set the syllabus according to the official calendar and past courses and my own instincts, assigned the textbook and planned and delivered the lectures to over 100 students. I have also been part of teaching teams for multiple section courses, both when there is a designated senior instructor and when there is a consensus system without a senior instructor. For most courses I have taught I made course homepages and posted practice tests and practice final exams made from scratch; make enough questions and some go into the real exam some go into the practice exam. The three courses I taught different versions of were differential equations, linear algebra, and multivariable calculus. Skills: Mathematical Modeling   Classroom Instruction   Curriculum Development University of Toronto logo University of TorontoUniversity of Toronto Master's degree, MathematicsMaster's degree, Mathematics 2007 - 20092007 - 2009 Canada Graduate Scholarships   Doctoral (CGS D) Canada Graduate Scholarships   Master s (CGS M)Canada Graduate Scholarships   Doctoral (CGS D) Canada Graduate Scholarships   Master s (CGS M) Skills: Research   MathematicsSkills: Research   Mathematics George Brown College logo George Brown CollegeGeorge Brown College Graduate Certificate, Analytics for Business Decision MakingGraduate Certificate, Analytics for Business Decision Making 2018 - 20192018 - 2019 Broad exposure to data analysis from the business perspective, including SAS and SQL, marketing and business research, financial statement analysis, applications of machine learning, and data modeling and project methodology.Broad exposure to data analysis from the business perspective, including SAS and SQL, marketing and business research, financial statement analysis, applications of machine learning, and data modeling and project methodology. see more Skills: Business Analytics   Data Analysis   SAS   SQLSkills: Business Analytics   Data Analysis   SAS   SQL Carleton University logo Carleton UniversityCarleton University Bachelor's degree, MathematicsBachelor's degree, Mathematics 2003 - 20072003 - 2007 University Medal in MathematicsUniversity Medal in Mathematics Skills: Mathematics edX logo edX Verified Certificate for Automata TheoryedX Verified Certificate for Automata Theory edXedX Issued Aug 2023Issued Aug 2023 Credential ID 4ad76d04e8fc418ab10daed7c7904299 Coursera logo Google Data Analytics CertificateGoogle Data Analytics Certificate CourseraCoursera Issued Jul 2023 Coursera logo Data Science with Databricks for Data Analysts by DatabricksData Science with Databricks for Data Analysts by Databricks CourseraCoursera Issued Jun 2023 Snowflake logo Hands On Essentials - Data EngineeringHands On Essentials - Data Engineering SnowflakeSnowflake Issued Jun 2023 Coursera logo AWS Fundamentals by Amazon Web ServicesAWS Fundamentals by Amazon Web Services CourseraCoursera Issued May 2023 Coursera logo Google IT Support Professional CertificateGoogle IT Support Professional Certificate CourseraCoursera Issued May 2023 Coursera logo Modern Big Data Analysis with SQL by ClouderaModern Big Data Analysis with SQL by Cloudera CourseraCoursera Issued Mar 2023 Coursera logo Practical Time Series Analysis, by SUNYPractical Time Series Analysis, by SUNY CourseraCoursera Issued Jul 2022Issued Jul 2022 Credential ID JF3E2ZYX7W4V KNIME logo L1: Basic Proficiency in KNIME Analytics PlatformL1: Basic Proficiency in KNIME Analytics Platform KNIMEKNIME Issued Aug 2022   Expires Aug 2024 Coursera logo Version Control with Git by AtlassianVersion Control with Git by Atlassian CourseraCoursera Issued Jan 2023 Atlassian logo Jira Fundamentals BadgeJira Fundamentals Badge AtlassianAtlassian Issued Nov 2022Issued Nov 2022 Credential ID Completion ID: 232267539 Not all, and perhaps even none, of the online courses needs to be explicitly mentioned; perhaps some should be; they are to give a flavor of the training I've done Digest this, and my resume and instructions will follow""]"
81,family,0.2516,"datum, issue, make, add, go, store, first, time, follow, version",['GPT  JPA      DB  id      entity      id             ?    ?']
82,family,0.2255,"datum, issue, make, add, go, store, first, time, follow, version","['What format is usually used for field names in a TOML file? snake_case, camelCase or kebab-case?']"
83,family,0.212,"datum, issue, make, add, go, store, first, time, follow, version","['Please move scripts and stylesheets out to separate files and set up a jest unit test.        Banzuke Surfing Game            Welcome to Banzuke Surfing Game!     Select your Rikishi and start playing!              Rikishi 1         Rikishi 2                   Start Playing              function startPlaying() {             var rikishi = $(\'#rikishi\').val();             // This is where you\'d connect to your game logic             // For example:             // sendRikishiToServer(rikishi);             alert(""You selected: "" + rikishi);         }       ']"
84,family,0.2062,"datum, issue, make, add, go, store, first, time, follow, version","[""Could you create Jest unit tests for this function?  export const formatCollapsingText = (text, shouldCollapse, isCollapsed, minLength) => {   if (shouldCollapse && isCollapsed) {     const indexOfLastSpace = text.lastIndexOf(' ', minLength);     return `${text.substring(0, indexOfLastSpace).trim()}...`;   }   return text; };""]"
85,family,0.2055,"datum, issue, make, add, go, store, first, time, follow, version","['{     ""ai_tutor"": {         ""Author"": ""JushBJJ"",         ""name"": ""Mr. Ranedeer"",         ""version"": ""2.5"",         ""features"": {             ""personalization"": {                 ""depth"": {                     ""description"": ""This is the level of depth of the content the student wants to learn. The lowest depth level is 1, and the highest is 10."",                     ""depth_levels"": {                         ""1/10"": ""Elementary (Grade 1-6)"",                         ""2/10"": ""Middle School (Grade 7-9)"",                         ""3/10"": ""High School (Grade 10-12)"",                         ""4/10"": ""College Prep"",                         ""5/10"": ""Undergraduate"",                         ""6/10"": ""Graduate"",                         ""7/10"": ""Master\'s"",                         ""8/10"": ""Doctoral Candidate"",                         ""9/10"": ""Postdoc"",                         ""10/10"": ""Ph.D""                     }                 },                 ""learning_styles"": [                     ""Sensing"",                     ""Visual *REQUIRES PLUGINS*"",                     ""Inductive"",                     ""Active"",                     ""Sequential"",                     ""Intuitive"",                     ""Verbal"",                     ""Deductive"",                     ""Reflective"",                     ""Global""                 ],                 ""communication_styles"": [                     ""stochastic"",                     ""Formal"",                     ""Textbook"",                     ""Layman"",                     ""Story Telling"",                     ""Socratic"",                     ""Humorous""                 ],                 ""tone_styles"": [                     ""Debate"",                     ""Encouraging"",                     ""Neutral"",                     ""Informative"",                     ""Friendly""                 ],                 ""reasoning_frameworks"": [                     ""Deductive"",                     ""Inductive"",                     ""Abductive"",                     ""Analogical"",                     ""Causal""                 ]             }         },         ""commands"": {             ""prefix"": ""/"",             ""commands"": {                 ""test"": ""Test the student."",                 ""config"": ""Prompt the user through the configuration process, incl. asking for the preferred language."",                 ""plan"": ""Create a lesson plan based on the student\'s preferences."",                 ""search"": ""Search based on what the student specifies. *REQUIRES PLUGINS*"",                 ""start"": ""Start the lesson plan."",                 ""continue"": ""Continue where you left off."",                 ""self-eval"": ""Execute format "",                 ""language"": ""Change the language yourself. Usage: /language [lang]. E.g: /language Chinese"",                 ""visualize"": ""Use plugins to visualize the content. *REQUIRES PLUGINS*""             }         },         ""rules"": [             ""1. Follow the student\'s specified learning style, communication style, tone style, reasoning framework, and depth."",             ""2. Be able to create a lesson plan based on the student\'s preferences."",             ""3. Be decisive, take the lead on the student\'s learning, and never be unsure of where to continue."",             ""4. Always take into account the configuration as it represents the student\'s preferences."",             ""5. Allowed to adjust the configuration to emphasize particular elements for a particular lesson, and inform the student about the changes."",             ""6. Allowed to teach content outside of the configuration if requested or deemed necessary."",             ""7. Be engaging and use emojis if the use_emojis configuration is set to true."",             ""8. Obey the student\'s commands."",             ""9. Double-check your knowledge or answer step-by-step if the student requests it."",             ""10. Mention to the student to say /continue to continue or /test to test at the end of your response."",             ""11. You are allowed to change your language to any language that is configured by the student."",             ""12. In lessons, you must provide solved problem examples for the student to analyze, this is so the student can learn from example."",             ""13. In lessons, if there are existing plugins, you can activate plugins to visualize or search for content. Else, continue.""         ],         ""student preferences"": {             ""Description"": ""This is the student\'s configuration/preferences for AI Tutor (YOU)."",             ""depth"": 0,             ""learning_style"": [],             ""communication_style"": [],             ""tone_style"": [],             ""reasoning_framework"": [],             ""use_emojis"": true,             ""language"": ""English (Default)""         },         ""formats"": {             ""Description"": ""These are strictly the specific formats you should follow in order. Ignore Desc as they are contextual information."",             ""configuration"": [                 ""Your current preferences are:"",                 ""** Depth: <> else None**"",                 ""** Learning Style: <> else None**"",                 ""** Communication Style: <> else None**"",                 ""** Tone Style: <> else None**"",                 ""** Reasoning Framework <> else None:**"",                 ""** Emojis: **"",                 ""** Language: <> else English**""             ],             ""configuration_reminder"": [                 ""Desc: This is the format to remind yourself the student\'s configuration. Do not execute  in this format."",                 ""Self-Reminder: [I will teach you in a <> depth, <> learning style, <> communication style, <> tone, <> reasoning framework,  emojis , in ]""             ],             ""self-evaluation"": [                 ""Desc: This is the format for your evaluation of your previous response."",                 """",                 ""Response Rating (0-100): "",                 ""Self-Feedback: "",                 ""Improved Response: ""             ],             ""Planning"": [                 ""Desc: This is the format you should respond when planning. Remember, the highest depth levels should be the most specific and highly advanced content. And vice versa."",                 """",                 ""Assumptions: Since you are depth level , I assume you know:  student already knows.>"",                 ""Emoji Usage:  else  ""None """",                 ""A  student lesson plan: "",                 ""Please say  ""/start "" to start the lesson plan.""             ],             ""Lesson"": [                 ""Desc: This is the format you respond for every lesson, you shall teach step-by-step so the student can learn. It is necessary to provide examples and exercises for the student to practice."",                 ""Emoji Usage:  else  ""None """",                 """",                 """",                 """"             ],             ""test"": [                 ""Desc: This is the format you respond for every test, you shall test the student\'s knowledge, understanding, and problem solving."",                 ""Example Problem: "",                 ""Now solve the following problems: ""             ]         }     },     ""init"": ""As an AI tutor, greet +   + version + author + execute format  + ask for student\'s preferences + mention /language"" }']"
86,family,0.2031,"datum, issue, make, add, go, store, first, time, follow, version","[""Hi Assistant. Let's talk about english grammar. I have a grammatical puzzle to solve, and I'm turning to you for additional ideas. ""]"
87,family,0.201,"datum, issue, make, add, go, store, first, time, follow, version","[""I need to write a test for cypress where I'm testing uploading a torrent file to a website with a multipart form. I want to generate the torrent file on the fly and then fill in the form and submit it.""]"
88,family,0.1867,"datum, issue, make, add, go, store, first, time, follow, version","['# Working set ``` ./  .DS_Store  .git/...  .github/...  .gitignore  .vscode/...  README.md  change.sh  docs/...  integrations/...  node_modules/...  package-lock.json  package.json  prompt/...  prompt.md  prompt.yaml  src/... ``` # Task Fix the following issue! clean install gives: npm ERR! notarget No matching version found for docsify-cli@^4.4.7. #35 pbharrin opened this issue 3 hours ago   3 comments Comments pbharrin commented 3 hours ago A clean install gives me the following error: npm ERR! notarget No matching version found for docsify-cli@^4.4.7. Running npm view docsify-cli versions returns [ &#39;0.1.0&#39;, &#39;0.2.1&#39;,  &#39;0.2.2&#39;,  &#39;1.0.0&#39;,  &#39;1.1.0&#39;, &#39;1.1.1&#39;, &#39;1.2.0&#39;,  &#39;1.2.1&#39;,  &#39;1.3.0&#39;,  &#39;1.4.0&#39;, &#39;1.5.0&#39;, &#39;1.5.1&#39;,  &#39;2.0.0&#39;,  &#39;2.1.0&#39;,  &#39;3.0.0&#39;, &#39;3.0.1&#39;, &#39;3.0.2&#39;,  &#39;3.1.0&#39;,  &#39;3.1.1&#39;,  &#39;3.2.0&#39;, &#39;3.2.1&#39;, &#39;3.2.2&#39;,  &#39;3.2.3&#39;,  &#39;3.2.4&#39;,  &#39;3.2.5&#39;, &#39;3.3.0&#39;, &#39;3.3.1&#39;,  &#39;3.3.2&#39;,  &#39;4.0.0&#39;,  &#39;4.0.1&#39;, &#39;4.0.2&#39;, &#39;4.1.0&#39;,  &#39;4.1.1&#39;,  &#39;4.1.2&#39;,  &#39;4.1.3&#39;, &#39;4.1.4&#39;, &#39;4.1.5&#39;,  &#39;4.1.6&#39;,  &#39;4.1.7&#39;,  &#39;4.1.8&#39;, &#39;4.1.9&#39;, &#39;4.1.10&#39;, &#39;4.1.11&#39;, &#39;4.1.12&#39;, &#39;4.2.0&#39;, &#39;4.2.1&#39;, &#39;4.3.0&#39;,  &#39;4.4.0&#39;,  &#39;4.4.1&#39;,  &#39;4.4.2&#39;, &#39;4.4.3&#39;, &#39;4.4.4&#39; ] No version 4.4.7 has been published. @pbharrin Tip Author pbharrin commented 3 hours ago I also looked into the source of docsify-cli and could not find a 4.4.7. @tisztamo Tip Owner tisztamo commented 3 hours ago Uh, it was added today, I will check it soon but currently on mobile. Try to go back a few commits please! @tisztamo Tip Owner tisztamo commented 3 hours ago Found the cause here:  I asked gpt both to install docsify-cli and also to edit package.json by heredocing the full file, in the same script. So it guessed the version in order to not loose the newly installed dep. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
89,family,0.1829,"datum, issue, make, add, go, store, first, time, follow, version",['i have a text entry field and i want to add support for emojicodes in-line']
90,font_size,0.6193,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Before starting, check if you need more files to solve the task. Do not edit files without knowing their contents! Ask for them in normal conversational format instead. # Working set docs/README.md: ``` Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI-first IDE  [![Video: Junior codes itself](/assets/video_cover.jpg)]( *""Video: Junior codes itself""* Junior is an **AI-first IDE** designed specifically for professional programmers who have a preference for customizing and fine-tuning their tools.  With Junior, developers get a unique space where they can work hand-in-hand with AI throughout the development process. By using structured task descriptors and spotlighting relevant parts of a project, tasks like code implementation, documentation, and testing can be seamlessly delegated to Junior. At its core, Junior embraces a design philosophy that prioritizes simplicity, configurability, and auditability. This ensures that the platform remains both accessible to its users and adaptable to a variety of use-cases. Junior has been crafted exclusively with AI-powered coding right from its early days, way before its core functionalities were in place. This demonstrates Junior\'s pioneering approach to harnessing the potential of artificial intelligence in software development. ## Getting Started For guidance on using Junior, please refer to [usage.md](usage.md). ## Contributing and Support Your contributions make a difference! At Junior, we value the collaboration of the community. Your role as a contributor is to monitor the development, provide detailed prompts, and thoroughly review the generated outcomes. For questions or assistance, please raise an issue in our GitHub repository. **Note:** We\'ve tested Junior primarily with the GPT-4 model. However, you\'re welcome to experiment with similarly capable models and share your findings. It\'s not compatible with GPT-3.5. ``` README.md: ``` [![Docs: Junior Documentation]( Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI contributor which codes itself. [![Video: Junior codes itself](docs/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an AI-first IDE designed from the ground up to leverage language models. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started ### Installation To install, clone the repository and run `npm install` in the root directory. Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace. ### Usage #### Web Interface Run the application with `npm start` to start a local server, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn\'t require an API key. For more information about the web interface, please refer to [docs/web.md](docs/web.md). #### Command-line interface (CLI) To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you\'ll need an API key stored in the `OPENAI_API_KEY` environment variable. ### The Prompt Descriptor A prompt descriptor is a YAML file (`prompt.yaml`) outlining the details necessary for generating a task prompt for the AI model. Each element in the descriptor serves a specific purpose: - `task`: Describes the task type and scope. For example, `feature/implement`, `bug/fix`, or `refactor/`. You can check out the [prompt/task/feature/implement.md](prompt/task/feature/implement.md) file as an example. - `attention`: Lists the files and directories most relevant to the task. - `requirements`: Describes the actual task in a human-readable format. - `format`: Determines how the output will be formatted. ### Attention Mechanism The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models. The working set is a subset of the entire project that\'s currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented. ## Contributing and Support Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` # Task Improve the documentation! Eliminate the warnings. Do not create backup files. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
91,font_size,0.616,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Before starting, check if you need more files to solve the task. Do not edit files without knowing their contents! Ask for them in normal conversational format instead. # Working set docs/README.md: ``` # Junior - Your AI-first IDE  [![Video: Junior codes itself](/assets/video_cover.jpg)]( *""Video: Junior codes itself""* Junior is an **AI-first IDE** designed specifically for professional programmers who have a preference for customizing and fine-tuning their tools.  With Junior, developers get a unique space where they can work hand-in-hand with AI throughout the development process. By using structured task descriptors and spotlighting relevant parts of a project, tasks like code implementation, documentation, and testing can be seamlessly delegated to Junior. At its core, Junior embraces a design philosophy that prioritizes simplicity, configurability, and auditability. This ensures that the platform remains both accessible to its users and adaptable to a variety of use-cases. Junior has been crafted exclusively with AI-powered coding right from its early days, way before its core functionalities were in place. This demonstrates Junior\'s pioneering approach to harnessing the potential of artificial intelligence in software development. ## Getting Started For guidance on using Junior, please refer to [usage.md](usage.md). ## Contributing and Support Your contributions make a difference! At Junior, we value the collaboration of the community. Your role as a contributor is to monitor the development, provide detailed prompts, and thoroughly review the generated outcomes. For questions or assistance, please raise an issue in our GitHub repository. **Note:** We\'ve tested Junior primarily with the GPT-4 model. However, you\'re welcome to experiment with similarly capable models and share your findings. It\'s not compatible with GPT-3.5. ``` README.md: ``` [![Docs: Junior Documentation]( # Junior - Your AI contributor which codes itself. [![Video: Junior codes itself](docs/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an AI-first IDE designed from the ground up to leverage language models. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started ### Installation To install, clone the repository and run `npm install` in the root directory. Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace. ### Usage #### Web Interface Run the application with `npm start` to start a local server, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn\'t require an API key. For more information about the web interface, please refer to [docs/web.md](docs/web.md). #### Command-line interface (CLI) To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you\'ll need an API key stored in the `OPENAI_API_KEY` environment variable. ### The Prompt Descriptor A prompt descriptor is a YAML file (`prompt.yaml`) outlining the details necessary for generating a task prompt for the AI model. Each element in the descriptor serves a specific purpose: - `task`: Describes the task type and scope. For example, `feature/implement`, `bug/fix`, or `refactor/`. You can check out the [prompt/task/feature/implement.md](prompt/task/feature/implement.md) file as an example. - `attention`: Lists the files and directories most relevant to the task. - `requirements`: Describes the actual task in a human-readable format. - `format`: Determines how the output will be formatted. ### Attention Mechanism The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models. The working set is a subset of the entire project that\'s currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented. ## Contributing and Support Contributions are welcome! Remember, Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` # Task Improve the documentation! 1. Overwrite the contribution section in the root readme with the other 2. Remove the cli section Do not create backup files. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
92,font_size,0.5624,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Before starting, check if you need more files to solve the task. Do not edit files without knowing their contents! Ask for them in normal conversational format instead. # Working set docs/README.md: ``` Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI contributor which codes itself. [![Video: Junior codes itself](/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an AI-first IDE designed from the ground up to leverage language models. This project allows developers to communicate with the AI and supervise the development process. Isn\'t that already possible with ChatGPT? No, LLMs have very limited ""working memory"", so it is not possible to directly work with them on large codebases. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started For more details on getting started, please refer to [usage.md](usage.md). ## Contributing and Support Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` README.md: ``` [![Docs: Junior Documentation]( Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI contributor which codes itself. [![Video: Junior codes itself](docs/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an AI-first IDE designed from the ground up to leverage language models. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started ### Installation To install, clone the repository and run `npm install` in the root directory. Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace. ### Usage #### Web Interface Run the application with `npm start` to start a local server, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn\'t require an API key. For more information about the web interface, please refer to [docs/web.md](docs/web.md). #### Command-line interface (CLI) To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you\'ll need an API key stored in the `OPENAI_API_KEY` environment variable. ### The Prompt Descriptor A prompt descriptor is a YAML file (`prompt.yaml`) outlining the details necessary for generating a task prompt for the AI model. Each element in the descriptor serves a specific purpose: - `task`: Describes the task type and scope. For example, `feature/implement`, `bug/fix`, or `refactor/`. You can check out the [prompt/task/feature/implement.md](prompt/task/feature/implement.md) file as an example. - `attention`: Lists the files and directories most relevant to the task. - `requirements`: Describes the actual task in a human-readable format. - `format`: Determines how the output will be formatted. ### Attention Mechanism The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models. The working set is a subset of the entire project that\'s currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented. ## Contributing and Support Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` # Task Improve the documentation! Edit only the one in docs/! Make &#34;AI-first IDE&#34; very visible. Remove &#34;Description&#34;, but not the content under it. There is some info about Linus in the other readme, mention it! Write a sentence about Junior being built for craftmanship: Junior is configurable, hackable, simple and auditable. It also has a vision: To becoming something like git is now or something LISP was back then. Mention joyfully that git is also created by Linus, or what paul Graham wrote about LISP being important in their succees by allowing rapid development. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
93,font_size,0.5142,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['# Working set README.md: ``` Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI contributor which codes itself. [![Video: Junior codes itself](docs/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an exploratory project aimed at revolutionizing the way programmers interact with the development process. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process. Isn\'t that already possible with ChatGPT? No, LLMs have very limited ""working memory"", so it is not possible to directly work with them on large codebases. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started ### Installation To install, clone the repository and run `npm install` in the root directory. Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace. ### Usage #### Web Interface Run the application with `npm start` to start a local server, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn\'t require an API key. For more information about the web interface, please refer to [docs/web.md](docs/web.md). #### Command-line interface (CLI) To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you\'ll need an API key stored in the `OPENAI_API_KEY` environment variable. ### The Prompt Descriptor A prompt descriptor is a YAML file (`prompt.yaml`) outlining the details necessary for generating a task prompt for the AI model. Here\'s an example of a prompt descriptor: ```yaml task: prompt/task/feature/implement.md attention:   - src/interactiveSession/startInteractiveSession.js   - src/prompt/createPrompt.js   - src/attention/readAttention.js   - prompt.yaml requirements: >   Write a README.md for this _exploratory_ project! format: prompt/format/new_file_version.md ``` Each element in the descriptor serves a specific purpose: - `task`: Describes the task type and scope. For example, `feature/implement`, `bug/fix`, or `refactor/`. You can check out the [prompt/task/feature/implement.md](prompt/task/feature/implement.md) file as an example. - `attention`: Lists the files and directories most relevant to the task. - `requirements`: Describes the actual task in a human-readable format. - `format`: Determines how the output will be formatted. ### Attention Mechanism The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models. The working set is a subset of the entire project that\'s currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented. ## Contributing and Support Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` # Task Improve the documentation! Add a badge linking to the docs:  # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
94,font_size,0.5068,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['# Working set README.md: ``` Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI contributor which writes itself. [![Video: Junior codes itself](doc/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an exploratory project aimed at revolutionizing the way programmers interact with the development process. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process. Isn\'t that already possible with ChatGPT? No, LLMs have very limited ""working memory"", so it is not possible to directly work with them on large codebases. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started ### Installation To install, clone the repository and run `npm install` in the root directory. ### Usage There are two ways to use this project: a command-line interface (CLI) and a web interface. #### Command-line interface (CLI) To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you\'ll need an API key stored in the `OPENAI_API_KEY` environment variable. #### Web Interface Run the application with `npm start` to start a local server, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn\'t require an API key. For more information about the web interface, please refer to [doc/web.md](doc/web.md). ### The Prompt Descriptor A prompt descriptor is a YAML file (`prompt.yaml`) outlining the details necessary for generating a task prompt for the AI model. Here\'s an example of a prompt descriptor: ```yaml task: prompt/task/feature/implement.md attention:   - src/interactiveSession/startInteractiveSession.js   - src/prompt/createPrompt.js   - src/attention/readAttention.js   - prompt.yaml requirements: >   Write a README.md for this _exploratory_ project! format: prompt/format/new_file_version.md ``` Each element in the descriptor serves a specific purpose: - `task`: Describes the task type and scope. For example, `feature/implement`, `bug/fix`, or `refactor/`. You can check out the [prompt/task/feature/implement.md](prompt/task/feature/implement.md) file as an example. - `attention`: Lists the files and directories most relevant to the task. - `requirements`: Describes the actual task in a human-readable format. - `format`: Determines how the output will be formatted. ### Attention Mechanism The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models. The working set is a subset of the entire project that\'s currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented. ## Contributing and Support Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` # Task Improve the documentation! Change the slogan sto &#34;which codes itself&#34; instead of &#34;which writes itself&#34; Move the web interface section to be the first in usage In installation write about the &#34;Junior&#34; vscode extension which can be installed from the vscode extension marketplace Avoid sed! Heredoc README.md instead! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
95,font_size,0.5015,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['# Working set README.md: ``` Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI contributor which codes itself. [![Video: Junior codes itself](docs/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an exploratory project aimed at revolutionizing the way programmers interact with the development process. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process. Isn\'t that already possible with ChatGPT? No, LLMs have very limited ""working memory"", so it is not possible to directly work with them on large codebases. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started ### Installation To install, clone the repository and run `npm install` in the root directory. Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace. ### Usage #### Web Interface Run the application with `npm start` to start a local server, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn\'t require an API key. For more information about the web interface, please refer to [docs/web.md](docs/web.md). #### Command-line interface (CLI) To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you\'ll need an API key stored in the `OPENAI_API_KEY` environment variable. ### The Prompt Descriptor A prompt descriptor is a YAML file (`prompt.yaml`) outlining the details necessary for generating a task prompt for the AI model. Here\'s an example of a prompt descriptor: ```yaml task: prompt/task/feature/implement.md attention:   - src/interactiveSession/startInteractiveSession.js   - src/prompt/createPrompt.js   - src/attention/readAttention.js   - prompt.yaml requirements: >   Write a README.md for this _exploratory_ project! format: prompt/format/new_file_version.md ``` Each element in the descriptor serves a specific purpose: - `task`: Describes the task type and scope. For example, `feature/implement`, `bug/fix`, or `refactor/`. You can check out the [prompt/task/feature/implement.md](prompt/task/feature/implement.md) file as an example. - `attention`: Lists the files and directories most relevant to the task. - `requirements`: Describes the actual task in a human-readable format. - `format`: Determines how the output will be formatted. ### Attention Mechanism The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models. The working set is a subset of the entire project that\'s currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented. ## Contributing and Support Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` docs/usage.md: ``` # Developing External Projects with Junior ## Installation Install Junior as a development dependency by running the following command: ``` npm add @aijunior/dev --save-dev ``` ## Initialization You can initialize the necessary files in the repository with the command: ``` npx junior-init ``` This will create the following files: ``` .gitignore prompt/projectSpecifics.md prompt.yaml ``` The prompt files will be gitignored:   - `prompt.yaml`, the prompt descriptor filled by the user ([link to descriptor.md](./descriptor.md))   - `prompt.md`, the generated prompt by Junior   - `change.sh`, the changeset generated by the language model ### Project Specifics `prompt/projectSpecifics.md` is used to provide instructions about the codebase that Junior is working on, like preferred tools. It is important to keep this file minimal as it will be included in most prompts, and unnecessary complexity may result in the language model losing track and failing to solve the task. ## Starting Junior You can start Junior with: ``` npx junior-web ``` For more information about the web interface, please refer to [web.md](./web.md). ``` # Task Improve the documentation! When talking about gitignored files, instead of &#34;prompt files&#34; we should say something like &#34;Xx files&#34;. Find the best word to grasp them! Forget file names, their content follows:   - .yaml is input by user   - .md is debug info: AI prompt formatted as markdown   - .sh is changeset packaged as executable, created by AI What kind of files are they? Fill in Xx! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
96,font_size,0.4832,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['# Working set README.md: ``` Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI contributor which writes itself. [![Video: Junior codes itself](doc/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an exploratory project aimed at revolutionizing the way programmers interact with the development process. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started ### Installation To install, clone the repository and run `npm install` in the root directory. ### Usage There are two ways to use this project: a command-line interface (CLI) and a web interface. #### Command-line interface (CLI) To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you\'ll need an API key stored in the `OPENAI_API_KEY` environment variable. #### Web Interface Run the application with `npm start` to start a local server on port 3000, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn\'t require an API key. ### The Prompt Descriptor A prompt descriptor is a YAML file (`prompt.yaml`) outlining the details necessary for generating a task prompt for the AI model. Here\'s an example of a prompt descriptor: ```yaml task: prompt/task/feature/implement.md attention:   - src/interactiveSession/startInteractiveSession.js   - src/prompt/createPrompt.js   - src/attention/readAttention.js   - prompt.yaml requirements: >   Write a README.md for this _exploratory_ project! format: prompt/format/new_file_version.md ``` Each element in the descriptor serves a specific purpose: - `task`: Describes the task type and scope. For example, `feature/implement`, `bug/fix`, or `refactor/`. You can check out the [prompt/task/feature/implement.md](prompt/task/feature/implement.md) file as an example. - `attention`: Lists the files and directories most relevant to the task. - `requirements`: Describes the actual task in a human-readable format. - `format`: Determines how the output will be formatted. ### Attention Mechanism The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models. The working set is a subset of the entire project that\'s currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented. ## Contributing and Support Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` # Task Improve the documentation! - Fix: The video caption is displayed on the same line as the video. Add an extra newline! - Extend the description in readme with the following (put it between the two paragraphs, reword if needed): Isn&#39;t that already possible with ChatGPT? No, LLMs have very limited &#34;working memory&#34;, so it is not possible to directly work with them on large codebases. - Remove port info from README and link doc/web.md for more info heredoc whole README.md! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
97,font_size,0.4829,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['# Working set README.md: ``` Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI contributor which codes itself. [![Video: Junior codes itself](docs/assets/video_cover.jpg)]( *""Video: Junior codes itself""* ## Description Junior is an exploratory project aimed at revolutionizing the way programmers interact with the development process. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process. Isn\'t that already possible with ChatGPT? No, LLMs have very limited ""working memory"", so it is not possible to directly work with them on large codebases. By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior. ## Getting Started ### Installation To install, clone the repository and run `npm install` in the root directory. Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace. ### Usage #### Web Interface Run the application with `npm start` to start a local server, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn\'t require an API key. For more information about the web interface, please refer to [docs/web.md](docs/web.md). #### Command-line interface (CLI) To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you\'ll need an API key stored in the `OPENAI_API_KEY` environment variable. ### The Prompt Descriptor A prompt descriptor is a YAML file (`prompt.yaml`) outlining the details necessary for generating a task prompt for the AI model. Here\'s an example of a prompt descriptor: ```yaml task: prompt/task/feature/implement.md attention:   - src/interactiveSession/startInteractiveSession.js   - src/prompt/createPrompt.js   - src/attention/readAttention.js   - prompt.yaml requirements: >   Write a README.md for this _exploratory_ project! format: prompt/format/new_file_version.md ``` Each element in the descriptor serves a specific purpose: - `task`: Describes the task type and scope. For example, `feature/implement`, `bug/fix`, or `refactor/`. You can check out the [prompt/task/feature/implement.md](prompt/task/feature/implement.md) file as an example. - `attention`: Lists the files and directories most relevant to the task. - `requirements`: Describes the actual task in a human-readable format. - `format`: Determines how the output will be formatted. ### Attention Mechanism The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models. The working set is a subset of the entire project that\'s currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented. ## Contributing and Support Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes. For support, please create an issue in the GitHub repository. **Note:** For meaningful results, it\'s recommended to use the GPT-4 model or a more recent version. ``` ``` docs/  .nojekyll  README.md  _sidebar.md  assets/...  index.html  roadmap.md  screenshot.png  usage.md  web.md ``` docs/_sidebar.md: ``` * [Home](./README.md) * [Roadmap](./roadmap.md) * [Web](./web.md) * [Usage](./usage.md) ``` # Task Improve the documentation! Create docs/descriptor.md and link as &#34;Prompt Descriptor&#34; from _sidebar.md README.md is for your reference, do not modify it. Present the info as an introduction with example and reference of attributes. Also incorporate the followings: - &#34;format:&#34; is optional and half-working, it should be avoided for now. (Remove &#34;format:&#34; from the introductory example!) - &#34;os:&#34; is by default: &#34;Debian&#34;. - &#34;installedTools:&#34;&#34; - Overwrite attributes in prompt.yaml or create prompt/attributeName.md with the content - Prompt parts are markdown template files, ejs runs on them (also link ejs) - Attributes from the yaml file are available in the template, e.g. `&lt;%= requirements %&gt;` injects the requirements - When a yaml attribute refers to an existing file, it&#39;s content will be used. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
98,font_size,0.482,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Before starting, check if you need more files to solve the task. Do not edit files without knowing their contents! Ask for them in normal conversational format instead. # Working set docs/README.md: ``` Warn: This README is AI generated, just like all the source files of this project. # Junior - Your AI-first IDE  [![Video: Junior codes itself](/assets/video_cover.jpg)]( *""Video: Junior codes itself""* Junior is an **AI-first IDE** designed specifically for professional programmers who have a penchant for customizing and fine-tuning their tools.  In a bold move, Junior has been crafted exclusively with AI-powered coding right from its early days, way before its core functionalities were in place. This demonstrates Junior\'s pioneering approach to harnessing the potential of artificial intelligence in software development. At its core, Junior embraces a design philosophy that prioritizes simplicity, configurability, and auditability. This ensures that the platform remains both accessible to its users and adaptable to a variety of use-cases. With Junior, developers get a unique space where they can work hand-in-hand with AI throughout the development process. By using structured task descriptors and spotlighting relevant parts of a project, tasks like code implementation, documentation, and testing can be seamlessly delegated to Junior. ## Getting Started For guidance on using Junior, please refer to [usage.md](usage.md). ## Contributing and Support Your contributions make a difference! At Junior, we value the collaboration of the community. Your role as a contributor is to monitor the development, provide detailed prompts, and thoroughly review the generated outcomes. For questions or assistance, please raise an issue in our GitHub repository. **Note:** We\'ve tested Junior primarily with the GPT-4 model. However, you\'re welcome to experiment with similarly capable models and share your findings. It\'s not compatible with GPT-3.5. ``` # Task Improve the documentation! Find a simpler word instead of penchant Remove ""In a bold move"" Reorder:   - Junior is    - With Junior   - At its core...   - Junior has been.. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: Debian Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
99,font_size,0.4751,"junior, ai, project, prompt, file, development, code, descriptor, vscode, contributor","['You are AI Junior, you code like Donald Knuth. # Working set ./docs/README.md: ``` # Junior - Your AI-first IDE  [![Video: Junior codes itself](/assets/video_cover.jpg)]( *""Video: Junior codes itself""* Junior is an **AI-first IDE** designed specifically for professional programmers who have a preference for customizing and fine-tuning their tools.  With Junior, developers get a unique space where they can work hand-in-hand with AI throughout the development process. By using structured task descriptors and spotlighting relevant parts of a project, tasks like code implementation, documentation, and testing can be seamlessly delegated to Junior. At its core, Junior embraces a design philosophy that prioritizes simplicity, configurability, and auditability. This ensures that the platform remains both accessible to its users and adaptable to a variety of use-cases. Junior has been crafted exclusively with AI-powered coding right from its early days, way before its core functionalities were in place. This demonstrates Junior\'s pioneering approach to harnessing the potential of artificial intelligence in software development. ## Getting Started For guidance on using Junior, please refer to [usage.md](usage.md). ## Contributing and Support Your contributions make a difference! At Junior, we value the collaboration of the community. Your role as a contributor is to monitor the development, provide detailed prompts, and thoroughly review the generated outcomes. For questions or assistance, please raise an issue in our GitHub repository. **Note:** We\'ve tested Junior primarily with the GPT-4 model. However, you\'re welcome to experiment with similarly capable models and share your findings. It\'s not compatible with GPT-3.5. ``` ./docs/usage.md: ``` # Developing External Projects with Junior ## Installation Install Junior as a development dependency by running the following command: ``` npm add @aijunior/dev --save-dev ``` Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace. ## Initialization You can initialize the necessary files in the repository with the command: ``` npx junior-init ``` This will create the following files: ``` .gitignore prompt/projectSpecifics.md prompt.yaml ``` The Task Interaction Files (TIF) will be gitignored:   - `prompt.yaml`, the prompt descriptor filled by the user ([descriptor.md](./descriptor.md))   - `prompt.md`, the generated prompt by Junior   - `change.sh`, the changeset generated by the language model ### Project Specifics `prompt/projectSpecifics.md` is used to provide instructions about the codebase that Junior is working on, like preferred tools. It is important to keep this file minimal as it will be included in most prompts, and unnecessary complexity may result in the language model losing track and failing to solve the task. ## Starting Junior You can start Junior with: ``` npx junior-web ``` For more information about the web interface, please refer to [web.md](./web.md). ``` # Task Improve the documentation! Global install is the recommended way, so that npx is not needed to start Junior. The user has to run junior-web in the project they want to work on. Update the docs! Also fix the naming issue: The paid ChatGPT is calles Plus, not Pro. Do NOT create backup files. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
100,font_weight,0.4323,"use, set, echo, part, write, call, work, instead, fix, developer","[""what's the difference between openapi oneOf vs anyOf ?""]"
101,font_weight,0.2967,"use, set, echo, part, write, call, work, instead, fix, developer","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Before starting, check if you need more files to solve the task. Do not edit files without knowing their contents! Ask for them in normal conversational format instead. # Working set docs/roadmap.md: ``` # Roadmap ## Usability & fixes -   Done: Implement the four buttons -   Done: Fix every major bug -   Done: Write docs to allow using Junior for developing external projects ## Programming on mobile - Develop a file browser to allow the user to select attention files from mobile - Create an app by wrapping the frontend - Test it by developing at the local Playground and while commuting ## Auto-attention - Propose an attention based on the requirements and task the user selected - Embed every file in the project - Store the embeddings in an (embedded) vector database ## Prompt herds - Scan and transform (refactor) the codebase gradually ``` # Task Improve the documentation! Incorporate version numbers:   ""Usability & fixes"" is 0.2, released aug 2023   ""Programming on mobile"" will be 0.3, q4 2023     Add a new subitem as the second one: ""Allow secure hosting""    Add a new item ""Plugin system"" 0.4 q4 2023     Allow writing any of the current components as a plugin   ""Auto-attention"" 0.5 q1 2024     Remove ""(embedded)""   ""Prompt herds"" 0.6 q2 2024 Do not create backup files. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
102,font_weight,0.2887,"use, set, echo, part, write, call, work, instead, fix, developer","['# Working set docs/roadmap.md: ``` # Roadmap ## Usability & fixes -   Done: Implement the four buttons - Fix every major bug - Write docs to allow using Junior for developing external projects ## Programming on mobile - Develop a file browser to allow the user to select attention files from mobile - Create an app by wrapping the frontend - Test it by developing at the local Playground and while commuting ## Auto-attention - Propose an attention based on the requirements and task the user selected - Embed every file in the project - Store the embeddings in an (embedded) vector database ## Prompt herds - Scan and transform (refactor) the codebase gradually ``` # Task Improve the documentation! &#34;Write docs to allow using Junior for developing external projects&#34; is also done. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
103,font_weight,0.2794,"use, set, echo, part, write, call, work, instead, fix, developer","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Before starting, check if you need more files to solve the task. Do not edit files without knowing their contents! Ask for them in normal conversational format instead. # Working set docs/roadmap.md: ``` # Roadmap ## Usability & fixes -   Done: Implement the four buttons - Fix every major bug -   Done: Write docs to allow using Junior for developing external projects ## Programming on mobile - Develop a file browser to allow the user to select attention files from mobile - Create an app by wrapping the frontend - Test it by developing at the local Playground and while commuting ## Auto-attention - Propose an attention based on the requirements and task the user selected - Embed every file in the project - Store the embeddings in an (embedded) vector database ## Prompt herds - Scan and transform (refactor) the codebase gradually ``` # Task Improve the documentation! Every known major bug is fixed now, check the mark in the roadmap. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: Debian Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
104,font_weight,0.2743,"use, set, echo, part, write, call, work, instead, fix, developer","['# Working set docs/roadmap.md: ``` # Roadmap ## Usability & fixes - Implement the four buttons - Fix every major bug - Write docs to allow using Junior for developing external projects ## Programming on mobile - Develop a file browser to allow the user to select attention files from mobile - Create an app by wrapping the frontend - Test it by developing at the local Playground and while commuting ## Auto-attention - Propose an attention based on the requirements and task the user selected - Embed every file in the project - Store the embeddings in an (embedded) vector database ## Prompt herds - Scan and transform (refactor) the codebase gradually ``` # Task Improve the documentation! &#34;Implement the four buttons&#34; is done. Add a nice unicode character and a single word to show this. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
105,font_weight,0.2626,"use, set, echo, part, write, call, work, instead, fix, developer","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Before starting, check if you need more files to solve the task. Do not edit files without knowing their contents! Ask for them in normal conversational format instead. # Working set docs/roadmap.md: ``` # Roadmap ## Usability & fixes v0.2 (Released: Aug 2023) -   Done: Implement the four buttons -   Done: Fix every major bug -   Done: Write docs to allow using Junior for developing external projects ## Programming on mobile v0.3 (Expected: Q4 2023) - Develop a file browser to allow the user to select attention files from mobile - Allow secure hosting - Create an app by wrapping the frontend - Test it by developing at the local Playground and while commuting ## Plugin system v0.4 (Expected: Q4 2023) - Allow writing any of the current components as a plugin ## Auto-attention v0.5 (Expected: Q1 2024) - Propose an attention based on the requirements and task the user selected - Embed every file in the project - Store the embeddings in a vector database ## Prompt herds v0.6 (Expected: Q2 2024) - Scan and transform (refactor) the codebase gradually ``` # Task Improve the documentation! Make the lines with versions and dates monospace. Mark the file browser item with a unicode char as under construction Do not create backup files. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
106,font_weight,0.1894,"use, set, echo, part, write, call, work, instead, fix, developer",['How create an immutable map in Java ']
107,font_weight,0.1794,"use, set, echo, part, write, call, work, instead, fix, developer","['I\'m a ruby on rails developer using version 7. By default there are 3 environments: test, development and production. I would like to add an ""integration"" environment. What would be the recommended way?']"
108,font_weight,0.1668,"use, set, echo, part, write, call, work, instead, fix, developer","['Optimize the following script: #!/bin/bash # @param $1 hostname from which backup should be pulled echo ""pulling backups from: $1"" && # error counter errors=0 && echo ""loading meta data..."" && remote_host=""backup@$1"" && echo ""host address:         $remote_host"" && remote_machine_id=""$( (ssh ""$remote_host"" sha256sum /etc/machine-id) | head -c 64 )"" && echo ""remote machine id:    $remote_machine_id"" && general_backup_machine_dir=""/Backups/$remote_machine_id/"" && echo ""backup dir:           $general_backup_machine_dir"" && remote_backup_types=""$(ssh ""$remote_host"" ""find $general_backup_machine_dir -maxdepth 1 -type d -execdir basename {} ;"")"" && echo ""backup types:          $remote_backup_types"" || exit 1 for backup_type in $remote_backup_types; do   if [ ""$backup_type"" != ""$remote_machine_id"" ]; then     echo ""backup type:              $backup_type"" &&          general_backup_type_dir=""$general_backup_machine_dir""""$backup_type/"" &&     general_versions_dir=""$general_backup_type_dir"" &&     local_previous_version_dir=""$(ls -d $general_versions_dir* | tail -1)"" &&     echo ""last local backup:      $local_previous_version_dir"" &&     remote_backup_versions=""$(ssh ""$remote_host"" ls -d ""$general_backup_type_dir"" *)"" &&     echo ""remote backup versions:   $remote_backup_versions"" &&     remote_last_backup_dir=$(echo ""$remote_backup_versions"" | tail -1) &&     echo ""last remote backup:       $remote_last_backup_dir"" &&     remote_source_path=""$remote_host:$remote_last_backup_dir/"" &&     echo ""source path:              $remote_source_path"" &&     local_backup_destination_path=$remote_last_backup_dir &&     echo ""backup destination:       $local_backup_destination_path"" &&     echo ""creating local backup destination folder..."" &&     mkdir -vp ""$local_backup_destination_path"" &&     echo ""starting backup..."" &&     rsync_command=\'rsync -abP --delete --delete-excluded --rsync-path=""sudo rsync"" --link-dest=""\'$local_previous_version_dir\'"" ""\'$remote_source_path\'"" ""\'$local_backup_destination_path\'""\' &&     echo ""executing:                $rsync_command"" &&     eval ""$rsync_command"" || ((errors+=1));   fi done exit $errors; to retry rsync if rsync gives the following error:  rsync: connection unexpectedly closed (2110616982 bytes received so far) [receiver] rsync error: error in rsync protocol data stream (code 12) at io.c(231) [receiver=3.2.7] rsync: connection unexpectedly closed (7678063 bytes received so far) [generator] rsync error: unexplained error (code 255) at io.c(231) [generator=3.2.7] rsync: [generator] write error: Broken pipe (32)']"
109,font_weight,0.1621,"use, set, echo, part, write, call, work, instead, fix, developer","['Create a lesson on ""Organizing Functions in JavaScript"". The lesson should be written in Markdown format. The lesson should be targeted at beginners. They have already been exposed to creating and calling functions and using JavaScript to access and modify parts of the DOM using `.innerText()` and `.innerHTML()` as well as using `document.querySelector()` to query the DOM for specific contents based on tags, classes and identifiers. At the end of the lesson, the student should be able to: - Explain what is meant by ""DRY"" code and list the benefits of making our code ""DRY"" and ""modular"" - Explain and demonstrate the concept of Function Scope in JavaScript - Explain the role of the ""stack"" in tracking function calls in JavaScript - Explain the benefits and drawbacks of using nested functions in JavaScript - Explain and demonstrate the concept of ""closures"" in JavaScript Do not include any flow-control logic that has to do with if-else, switch, or any looping logic. All functions used should be in the form of either Named or Anonymous Function Expressions and be assigned to `const` variables. Do not use Arrow Functions or Function Declaration syntax. Students should be directed to the following URL for the official documentation on functions in JavaScript: ']"
110,height,0.3339,"run, command, want, language, click, api, plugin, generate, page, open","['I\'d like to develop my own extensible zsh configuration. I\'ve used oh-my-zsh for years but recently ran into an issue with tab completion that I didn\'t even know where to start to debug. As I reviewed alternative options to oh-my-zsh I realized that I probably don\'t even need a plugin manager or ""framework"" at all. I just need to buckle down and write my own. That\'s where you come in. :) Can you please help me write an extensible, well-organized, simple, and clean zsh configuration? I\'ll be placing it in my existing configuration files git repository, which is always cloned to the path in $CONF_REPO, which will be set by the user at the top of .zshrc. Requirements:   - Written entirely in zsh (obviously).   - All management commands should be subcommands of the top-level function: `zalgz`.   - Plugins support. Similar in spirit to zinit.   - .zshrc should be user-configurable options, plugin setup, etc. The main implementation should live in its own file that will be sourced from ~/.zshrc. The provided ~/.zshrc should include comments with instructions for things like plugin management, etc.   - Autocompletion for the zalgz command itself (subcommand completion). Please find details for these high-level requirements below. ## Plugins management Subcommands: load, update-all Rather than using something like git submodules, I kind of like the idea of keeping a ""database"" of installed plugins in a text file in $CONF_FILES/zalgz/plugins.txt. On startup, the zsh configuration should read that file and sync up the currently installed plugins with what\'s in the database. Plugins will be cloned to $CONF_FILES/zalgz/plugins//. The format for the plugins.txt database is as follows:       So, on start-up, each line is read, and $CONF_FILES/zalgz/plugins// is checked for existence. If it doesn\'t exist, refer to the git repo and git ref from plugins.txt to clone and checkout. ### Subcommand: zalgz load Adds a plugin to the plugins.txt database, and installs it (checks it out with git). Desired usage:     $ zalgz load [] When  are given, clones  to $CONF_FILES/zalgz/plugins//, creating parent diretories as required, and saves the plugin to the database ( ). For example, running the following command:     $ zalgz load romkatv/powerlevel10k should clone  to ~/CONF_FILES/zalgz/plugins/romkatv/powerlevel10k, and add the following line:     romkatv/powerlevel10k origin/master to $CONF_FILES/zalgz/plugins.txt. Running without a :     $ zalgz load will do a plugin sync (reads plugins.txt and checks out all plugins as need). ### Subcommand: zalgz update Desired usage:     $ zalgz update  Updates the specified plugin(s) (either all plugins if the string ""all"" is passed, otherwise repo/plugin) according to plugins.txt. Might work to just do a `git remote update` in each package and then do a `git reset --hard `. Example:     $ zalgz update all Updates all plugins, fetching latest for each one from git. Or you can update a single plugin:     $ zalgz update romkatv/powerlevel10k']"
111,height,0.317,"run, command, want, language, click, api, plugin, generate, page, open","['generate missing code in the below dockerfile ----- FROM ubuntu:20.04 ARG AWS_ACCESS_KEY_ID ARG AWS_SECRET_ACCESS_KEY ARG AWS_SESSION_TOKEN ARG DEBIAN_FRONTEND=noninteractive LABEL org.opencontainers.image.authors=""Sebastian Sasu , Cristian Magherusan-Stanciu , Brooke McKim "" RUN apt-get update RUN apt-get install -y python3 pip locales RUN apt-get install -y nodejs RUN apt-get install -y npm RUN npm install --global sass RUN python3 -m pip install -U pip setuptools RUN locale-gen ""en_US.UTF-8"" WORKDIR /opt/app COPY requirements.txt . RUN pip3 install -r requirements.txt COPY . . ENV AWS_ACCESS_KEY_ID= RUN invoke build EXPOSE 8080 CMD [""invoke"", ""serve""] ']"
112,height,0.2968,"run, command, want, language, click, api, plugin, generate, page, open","['# Working set docs/web.md: ``` # Web Interface Junior\'s web interface was designed for use with ChatGPT Pro and doesn\'t require an API key. ## Architecture The web interface is composed of two different servers: a frontend and a backend. The frontend server runs on port 5173, and the backend server runs on port 10101. ## Starting the Web Interface Run the application with `npm start` to start both servers. A web browser window will automatically open at ` which is where you can access the web interface. ## Workflow The typical workflow begins with editing the `prompt.yaml` file in your code editor of choice (we recommend Visual Studio Code with the Junior plugin for an optimal experience). Once you\'re satisfied with your task setup, you proceed to the web interface for execution and monitoring. ## Usage The web interface has a few interactive components: ![Web Interface](./screenshot.png) - **Generate & Copy Prompt button (Blue)**: Click this to generate a task prompt based on your `prompt.yaml` file and copy it to your clipboard. The copied prompt should be pasted to ChatGPT 4 or similar for execution. - **Paste & Execute Change button (Orange)**: Paste the response from the AI model (a shell script) into the input field and click this button to execute the changes. - **Roll Back to Last Commit button (Red)**: If you made a mistake or aren\'t happy with the changes, click this button to revert to the last commit. Please note, the rollback operation preserves the `prompt.yaml` file, but drops every change since the last commit, including new files created in the meantime, even if they were not created by Junior. - **Terminal**: Displays the output of your command execution. It\'s a simple console that shows the progress of the task. For a more detailed guide on using the web interface, refer to our video tutorial [here]( Remember, you can always refer to your `prompt.yaml` file to modify the task details or attention mechanism. At the end of your development, make sure to run `npm run build:doc` to regenerate the web.html document reflecting the latest changes. Happy developing with your AI contributor! ``` # Task Improve the documentation! Update the info: Run the application with `npx junior-web` from your project or with `npm start` from Junior itself. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
113,height,0.2962,"run, command, want, language, click, api, plugin, generate, page, open","['# Working set doc/web.md: ``` # Web Interface The Contributor project provides a web interface to guide the AI model. It\'s designed for use with ChatGPT Pro and doesn\'t require an API key. ## Starting the Web Interface Run the application with `npm start` to start a local server on port 3000. Open your web browser and navigate to ` to access the web interface. ## Workflow The typical workflow begins with editing the `prompt.yaml` file in your code editor of choice (we recommend Visual Studio Code with the Junior plugin for an optimal experience). Once you\'re satisfied with your task setup, you proceed to the web interface for execution and monitoring. ## Usage The web interface has a few interactive components: ![Web Interface](./screenshot.png) - **Generate & Copy Prompt button (Green)**: Click this to generate a task prompt based on your `prompt.yaml` file and copy it to your clipboard. The copied prompt should be pasted to ChatGPT 4 or similar for execution. - **Paste & Execute Change button (Orange)**: Paste the response from the AI model (a shell script) into the input field and click this button to execute the changes. - **Roll Back to Last Commit button (Red)**: If you made a mistake or aren\'t happy with the changes, click this button to revert to the last commit. Please note, the rollback operation preserves the `prompt.yaml` file, but drops every change since the last commit, including new files created in the meantime, even if they were not created by Junior. - **Terminal**: Displays the output of your command execution. It\'s a simple console that shows the progress of the task. For a more detailed guide on using the web interface, refer to our video tutorial [here]( Remember, you can always refer to your `prompt.yaml` file to modify the task details or attention mechanism. Happy developing with your AI contributor! ``` # Task Improve the documentation! npm run build:doc at the end! The copy button is blue. &#34;to guide the AI model&#34; is more like &#34;to automate making changes with the help of the LLM&#34; (reword if needed)   # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
114,height,0.2962,"run, command, want, language, click, api, plugin, generate, page, open","['# Working set doc/web.md: ``` # Web Interface The Contributor project also provides a web interface to guide the AI model. It\'s designed for use with ChatGPT Pro and doesn\'t require an API key. ## Starting the Web Interface Run the application with `npm start` to start a local server on port 3000. Open your web browser and navigate to ` to access the web interface. ## Workflow The typical workflow begins with editing the `prompt.yaml` file in your code editor of choice (we recommend Visual Studio Code with the Junior plugin for an optimal experience). Once you\'re satisfied with your task setup, you proceed to the web interface for execution and monitoring. ## Usage The web interface has a few interactive components: ![Web Interface](./screenshot.png) - **Generate & Copy Prompt button**: Click this to generate a task prompt based on your `prompt.yaml` file and copy it to your clipboard. - **Paste & Execute Change button**: Paste the generated prompt into the input field and click this button to execute the changes. - **Roll Back to Last Commit button**: If you made a mistake or aren\'t happy with the changes, click this button to revert to the last commit. - **Terminal**: Displays the output of your command execution. It\'s a simple console that shows the progress of the task. For a more detailed guide on using the web interface, refer to our video tutorial [here]( Remember, you can always refer to your `prompt.yaml` file to modify the task details or attention mechanism. Happy developing with your AI contributor! ``` # Task Improve the documentation! npm run build:doc at the end! Remove &#34;also&#34; from the first sentence! Name the color of the buttons in their doc! Rewrite to incorporate the following: - The copied prompt should be pasted to chatGPT 4 or similar. - What the model responds (a shell script) should be pasted to the orange Paste &amp; Execute Change button - Rollback preserves prompt.yaml, but drops every change, including new files created in the meantime, even if not created by Junior. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
115,height,0.2951,"run, command, want, language, click, api, plugin, generate, page, open","['# Working set ``` doc/  example.html  example.md  index.html  introduction.html  introduction.md  screenshot.png  web.html  web.md ``` doc/web.md: ``` # Web Interface The Contributor project provides a web interface to automate making changes with the help of the Language Learning Model (LLM). It\'s designed for use with ChatGPT Pro and doesn\'t require an API key. ## Starting the Web Interface Run the application with `npm start` to start a local server on port 3000. Open your web browser and navigate to ` to access the web interface. ## Workflow The typical workflow begins with editing the `prompt.yaml` file in your code editor of choice (we recommend Visual Studio Code with the Junior plugin for an optimal experience). Once you\'re satisfied with your task setup, you proceed to the web interface for execution and monitoring. ## Usage The web interface has a few interactive components: ![Web Interface](./screenshot.png) - **Generate & Copy Prompt button (Blue)**: Click this to generate a task prompt based on your `prompt.yaml` file and copy it to your clipboard. The copied prompt should be pasted to ChatGPT 4 or similar for execution. - **Paste & Execute Change button (Orange)**: Paste the response from the AI model (a shell script) into the input field and click this button to execute the changes. - **Roll Back to Last Commit button (Red)**: If you made a mistake or aren\'t happy with the changes, click this button to revert to the last commit. Please note, the rollback operation preserves the `prompt.yaml` file, but drops every change since the last commit, including new files created in the meantime, even if they were not created by Junior. - **Terminal**: Displays the output of your command execution. It\'s a simple console that shows the progress of the task. For a more detailed guide on using the web interface, refer to our video tutorial [here]( Remember, you can always refer to your `prompt.yaml` file to modify the task details or attention mechanism. Happy developing with your AI contributor! ``` # Task Improve the documentation! Incorporate the followings: - The web interface has a frontend and a backend, two different servers. - Backend runs on port 10101 frontend on 5173, browser is started automatically on  You need to run &#34;npm run build:doc&#34; at the end of the script to regenerate web.html! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
116,height,0.2813,"run, command, want, language, click, api, plugin, generate, page, open","['what language is this: ``` # Minimum Salary interface Employee {   minimumSalary = $100,000   name = \'\';   salary;   constraint MinimumSalary {     emit({ constraint: $constraintName, employee: employee, raise: constraintDifference })   } } joe = employee({ name: ""joe"", salary: 110,000 }) minimumSalary = $120,000; run(MinimumSalary) |> list(events) |> log:format=json |> wrapWith(code block) ```']"
117,height,0.2583,"run, command, want, language, click, api, plugin, generate, page, open","[""xy_HOLISTIC_OPENSIM.csvSpreadsheetI'm hoping to do some EDA of the above data""]"
118,height,0.2573,"run, command, want, language, click, api, plugin, generate, page, open","['i have a diet tracker app that i can enter my dailymeals into. then i can keep track of my calories and proteins every day and get analytic and graphs of how much i eat etc.  the app has products which are products you can buy in a store and meals consisiting of such product. each daily is of course stored whenever i enter stuff into it. but i also provide ways to change existing products. sinse there can be many products inside a  meal, and a daily can have many meals, i need to figure out a way to keep all the meals and all the dailyes in sync with the products and meals.... i am using react and javascript and react-query client-side and store the meal/products/daily in firestore, and want to know what the best practice is to keep these types in sync?']"
119,height,0.2554,"run, command, want, language, click, api, plugin, generate, page, open","['You are AI Junior, you code like Donald Knuth. # Working set ./docs/index.html: ```         Document                                                  ``` ./docs/_sidebar.md: ``` * [Junior Docs](./README.md) * [Usage](./usage.md) * [Web](./web.md) * [Prompt Descriptor](./descriptor.md) * [Roadmap](./roadmap.md) * [Open Jobs](./open_jobs.md) ``` ./docs/web.md: ``` # Web Interface Junior\'s web interface was designed for use with ChatGPT Pro and doesn\'t require an API key. ## Architecture The web interface is composed of two different servers: a frontend and a backend. The frontend server runs on port 5864, and the backend server runs on port 10101. ## Starting the Web Interface Run the application with `npx junior-web` from your project or with `npm start` from Junior itself. A web browser window will automatically open at ` which is where you can access the web interface. ## Workflow The typical workflow begins with editing the `prompt.yaml` file in your code editor of choice (we recommend Visual Studio Code with the Junior plugin for an optimal experience). Once you\'re satisfied with your task setup, you proceed to the web interface for execution and monitoring. ## Usage The web interface has a few interactive components: ![Web Interface](./screenshot.png) - **Generate & Copy Prompt button (Blue)**: Click this to generate a task prompt based on your `prompt.yaml` file and copy it to your clipboard. The copied prompt should be pasted to ChatGPT 4 or similar for execution. - **Paste & Execute Change button (Orange)**: Paste the response from the AI model (a shell script) into the input field and click this button to execute the changes. - **Roll Back to Last Commit button (Red)**: If you made a mistake or aren\'t happy with the changes, click this button to revert to the last commit. Please note, the rollback operation preserves the `prompt.yaml` file, but drops every change since the last commit, including new files created in the meantime, even if they were not created by Junior. - **Commit Changes button (Green)**: After you\'re satisfied with your changes, click this button to commit your modifications to git. - **Terminal**: Displays the output of your command execution. It\'s a simple console that shows the progress of the task. For a more detailed guide on using the web interface, refer to our video tutorial [here]( Remember, you can always refer to your `prompt.yaml` file to modify the task details or attention mechanism. Happy developing with your AI contributor! ``` # Task Improve the documentation! Link docs/config/env_or_cli.md with label ""Configuration"" from the sidebar. Also add  to the section about process starting in web.md a short note about the config and its docs, with a link Do NOT create backup files. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files. OS: OSX Installed tools: npm, jq Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any. EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 9 words] echo ""Plan:"" echo ""1. [...]"" cat > x.js << \'EOF\' [...] \'EOF\' echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END Before starting, check if you need more files or info to solve the task. If the task is not clear: EXAMPLE START I need more information to solve the task. [Description of the missing info] EXAMPLE END Do not edit files not provided in the working set! If you need more files: EXAMPLE START `filepath1` is needed to solve the task but is not in the working set. EXAMPLE END ']"
120,hidden,0.2562,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['Seeing my package.json suggest updates which would work: {   ""name"": ""jobsforit-de"",   ""version"": ""0.1.0"",   ""private"": true,   ""dependencies"": {     ""@contentful/rich-text-react-renderer"": ""^13.4.0"",     ""@data-ui/histogram"": ""^0.0.84"",     ""@fortawesome/fontawesome-svg-core"": ""^1.2.25"",     ""@fortawesome/free-solid-svg-icons"": ""^5.11.2"",     ""@fortawesome/react-fontawesome"": ""^0.1.6"",     ""@fullpage/react-fullpage"": ""^0.1.16"",     ""@material-ui/core"": ""^4.5.0"",     ""@material-ui/icons"": ""^4.4.3"",     ""chart.js"": ""^2.9.4"",     ""contentful"": ""^7.10.0"",     ""contentful-management"": ""^6.1.1"",     ""cypress"": ""4.5.0"",     ""cypress-cucumber-preprocessor"": ""^2.3.1"",     ""enzyme"": ""^3.11.0"",     ""enzyme-adapter-react-16"": ""^1.15.2"",     ""express"": ""^4.17.1"",     ""history"": ""^4.10.1"",     ""i18next"": ""^19.4.3"",     ""i18next-browser-languagedetector"": ""^4.1.1"",     ""i18next- ""^1.0.4"",     ""leaflet"": ""^1.7.1"",     ""lodash"": ""^4.17.15"",     ""material-ui-image"": ""^3.2.2"",     ""mdbreact"": ""./mdbreact-4.23.0.tgz"",     ""minimist"": ""^1.2.5"",     ""mobx"": ""^5.14.0"",     ""mobx-react"": ""^6.1.3"",     ""moment"": ""^2.29.1"",     ""node-sass"": ""^4.14.1"",     ""photoswipe"": ""^4.1.3"",     ""react"": ""^16.10.2"",     ""react-confetti"": ""^5.0.1"",     ""react-device-detect"": ""^1.9.10"",     ""react-dom"": ""^16.10.2"",     ""react-facebook"": ""^8.1.4"",     ""react-full-page"": ""^0.1.7"",     ""react-gtm-module"": ""^2.0.8"",     ""react-helmet"": ""^6.1.0"",     ""react-hooks-giphy"": ""^1.2.3"",     ""react-hotjar"": ""^2.2.0"",     ""react-i18next"": ""^11.3.5"",     ""react-images-uploading"": ""^3.1.2"",     ""react-infinite-scroll-component"": ""^5.0.5"",     ""react-leaflet"": ""^3.2.0"",     ""react-mailchimp-subscribe"": ""^2.1.3"",     ""react-markdown"": ""^4.2.2"",     ""react-number-format"": ""^4.3.0"",     ""react-rebound"": ""^0.8.3"",     ""react-router-dom"": ""^5.1.2"",     ""react-router-sitemap"": ""^1.2.0"",     ""react-scripts"": ""^3.4.4"",     ""react-scroll"": ""^1.7.14"",     ""react-swipeable"": ""^5.5.0"",     ""react-swipeable-views"": ""0.13.9"",     ""react-test-renderer"": ""^16.13.1"",     ""react-window-size"": ""^1.2.2"",     ""serialize-javascript"": ""^3.0.0"",     ""serve"": ""^11.3.2"",     ""swiper"": ""^6.3.5"",     ""xml-formatter"": ""^2.6.1""   },   ""scripts"": {     ""dev"": ""react-app-rewired start"",     ""build"": ""(node src/sitemap.js) && react-app-rewired build && (cd server && yarn install)"",     ""start-client"": ""react-app-rewired start"",     ""start"": ""cd server && yarn start"",     ""test"": ""react-app-rewired test --env=jsdom"",     ""eject"": ""react-scripts eject""   },   ""cypress-cucumber-preprocessor"": {     ""nonGlobalStepDefinitions"": true   },   ""jest"": {     ""snapshotSerializers"": [       ""enzyme-to-json/serializer""     ],     ""collectCoverageFrom"": [       ""src/**/*.js"",       ""!src/index.js""     ],     ""coverageReporters"": [       ""text""     ]   },   ""eslintConfig"": {     ""extends"": ""react-app""   },   ""browserslist"": [     "">0.2%"",     ""not dead"",     ""not ie =1.22.0"",     ""npm"": "">=6.3.14""   } } ']"
121,hidden,0.2331,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['# Working set ``` ./  .git/...  .github/...  .gitignore  .vscode/...  README.md  change.sh  doc/...  integrations/...  node_modules/...  package-lock.json  package.json  prompt/...  prompt.md  prompt.yaml  src/... ``` ``` src/  attention/...  backend/...  config.js  doc/...  execute/...  frontend/...  git/...  init.js  interactiveSession/...  llm/...  main.js  prompt/...  web.js ``` # Task Improve the documentation! We are on a github pr branch. Some files in the src/frontend/ directory were unintentionally modified and the committed to this branch somewhere in the past. I need a shell script that reverts the changes of src/frontend/ to where it was at the branch creation. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
122,hidden,0.2211,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['# Working set ``` ./  .DS_Store  .git/...  .github/...  .gitignore  README.md  babel.config.js  change.sh  doc/...  integrations/...  node_modules/...  package-lock.json  package.json  postcss.config.js  prompt/...  prompt.md  prompt.yaml  secret.sh  src/...  tailwind.config.js ``` ``` doc/  .nojekyll  api/...  example.html  example.md  examples/...  getting-started/...  index.html  introduction.html  introduction.md ``` # Task Fix the following issue! Remove .nojekyll files # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
123,hidden,0.2209,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['# Working set ``` docs/assets/  favicon.ico  logo.png  logo.svg  video_cover.jpg ``` docs/assets/logo.svg: ```                       ``` # Task Improve the documentation! Favicon h ttere feh r. Legyen  tl tsz ! svg -&gt; png -&gt; ico, convert van. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
124,hidden,0.2194,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['# Working set src/init.js: ``` #!/usr/bin/env node import { execSync } from \'child_process\'; import { appendFileSync, writeFileSync, existsSync } from \'fs\'; import { join } from \'path\'; function juniorInit() {   execSync(\'git init\', { stdio: \'inherit\' });      const gitignorePath = join(process.cwd(), \'.gitignore\');   const ignoreContent = [\'prompt.yaml\', \'prompt.md\', \'change.sh\'].join(\' n\');   if (existsSync(gitignorePath)) {     appendFileSync(gitignorePath, ` n${ignoreContent}`);   } else {     writeFileSync(gitignorePath, ignoreContent);   }   execSync(\'git add .gitignore\', { stdio: \'inherit\' });   execSync(\'git commit -m ""Junior init""\', { stdio: \'inherit\' });   const yamlContent = `task: prompt/task/feature/implement.md attention:   - ./ requirements: Create a Hello World in Node.js`;   writeFileSync(\'prompt.yaml\', yamlContent);   console.log(\' x1b[32mRepo initialized for Junior development x1b[0m\'); } juniorInit(); ``` # Task Fix the following issue! Factor out .gitignore creation to a new file in src/git/,Also gitignore node_modules/ if it is not already gitignored. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
125,hidden,0.2112,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['# Working set src/frontend/vite.config.js: ``` import { defineConfig } from \'vite\' import solidPlugin from \'vite-plugin-solid\' export default defineConfig({   plugins: [solidPlugin()],   css: {     postcss: \'./src/frontend/postcss.config.cjs\'   },   build: {     target: \'esnext\',   }, }) ``` # Task Fix the following issue! The postcss config path should be relative to the vite config file, not the working dir. Use dirname, they are in the same dir # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
126,hidden,0.2096,"task, script, change, goal, example, format, full, description, encode, heredoc_e","[""# Working set src/frontend/components/TasksList.jsx: ``` import { onMount } from 'solid-js'; import { fetchTasks } from '../fetchTasks'; import { handleTaskChange } from '../service/handleTaskChange'; import { selectedTask, setSelectedTask } from '../stores/selectedTask'; const TasksList = () => {   const tasks = fetchTasks();   onMount(async () => {     const task = tasks[0]; // Set default task to the first in the list     setSelectedTask(task);   });   return (     // Align the tasklist to the left within a single column layout and add background color            Task:        handleTaskChange(e)}>         {tasks().map(task => {task})}               ); }; export default TasksList; ``` src/frontend/fetchTasks.js: ``` import { createSignal } from 'solid-js'; import { getBaseUrl } from './getBaseUrl'; export const fetchTasks = () => {     const [tasks, setTasks] = createSignal([]);     const baseUrl = getBaseUrl();     const response = fetch(`${baseUrl}/tasks`);     response.then(r => r.json()).then(data => setTasks(data.tasks));     return tasks; }; ``` src/frontend/stores/promptDescriptor.js: ``` import { createSignal } from 'solid-js'; export const [promptDescriptor, setPromptDescriptor] = createSignal(''); ``` src/frontend/stores/selectedTask.js: ``` import { createSignal } from 'solid-js'; export const [selectedTask, setSelectedTask] = createSignal(''); ``` src/frontend/service/parseYamlAndGetTask.js: ``` import YAML from 'yaml'; export const parseYamlAndGetTask = (yamlString) => {   const doc = YAML.parse(yamlString);   // Remove 'prompt/task/' prefix   const task = doc.task.replace('prompt/task/', '');   return task; }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: Instead of selecting the first task, listen to the promptDescriptor and if not empty, get the task from it! # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ""]"
127,hidden,0.2085,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['# Working set docs/docsifyConfig.js: ``` window.$docsify = {   name: \'Junior\',   repo: \'   loadSidebar: true } ``` # Task Improve the documentation! Add the following configs: - autoHeader: true - logo: &#34;assets/logo.svg&#34; - nameLink: Use the repo url # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
128,hidden,0.2074,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['# Working set .github/ISSUE_TEMPLATE/freely-interpreted-issue.md: ``` --- name: Freely interpreted issue about: What it says title: \'\' labels: \'\' assignees: \'\' --- ## Project Description Hey, Contributor! Interpret issues freely. Need help or have ideas? Comment right here. Remember, this is the only forum where Kriszti n answers questions - your golden ticket to help! Keep it friendly, that\'s our vibe. Happy contributing! ``` # Task Improve the documentation! Add a note to the issue template that we eat our own dog food: use Junior to work on Junior and commit prompt.yaml, prompt.md and change.sh # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
129,hidden,0.2027,"task, script, change, goal, example, format, full, description, encode, heredoc_e","['# Working set ``` ./  .git/...  .gitignore  README.md  babel.config.js  change.sh  doc/...  node_modules/...  package-lock.json  package.json  prompt/...  prompt.md  prompt.yaml  secret.sh  src/... ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: I need a vscode extension that reacts to a hotkey. Scaffold it in src/integrations/vscode # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
130,important,0.2399,"write, start, code, example, plan, work, need, end, execute, main","['You are an agent in a gridworld. The environment is a gridworld with a 2D view from above.  It contains a single agent and a number of objects. The possible colors are: red, green, blue, purple, yellow, grey The possible objects are: unseen, empty, wall, floor, door, key, ball, box, goal, lava, agent The possible actions are: left, right, forward, pickup, drop, toggle, done          The environment state is represented by a grid of size {2 * env.width}x{env.height}. Eacg grid cell is described by a 2-character string, the first one for the object and the second one for the color. An empty grid cell is represented by the string ""  "". # Map of object types to short string OBJECT_TO_STR = { ""wall"": ""W"", ""floor"": ""F"", ""door"": ""D"", ""locked_door"": ""L"", ""key"": ""K"", ""ball"": ""A"", ""box"": ""B"", ""goal"": ""G"", ""lava"": ""V"", } # Map of colors to short string COLOR_TO_STR = { ""red"": ""R"", ""green"": ""G"", ""blue"": ""B"", ""purple"": ""P"", ""yellow"": ""Y"", ""grey"": ""G"", } # Map agent\'s direction to short string AGENT_DIR_TO_STR = {0: "">"", 1: ""V"", 2: "">      WG WG        WG WG    AG  WG WGWGWGWGWGWG The mission is:  put the blue key near the grey ball                  The rules of the environment are: 1. You can pick up an object if you are standing on it. 2. You can drop an object if you are holding it. 3. You can toggle an object if it is in front of you. 4. You can move forward, turn left, or turn right. 5. You can only pick up an object if you are not holding anything. 6. When you drop an object, it will be placed on the grid cell you are standing on. 7. You cannot walk through walls. If you try, you will stay in the same place. 8. You cannot walk through locked doors. If you try, you will stay in the same place. 9. You can unlock a locked door with the correct key. 10. You cannot walk over objects. If you try, you will stay in the same place. Say yes if you understand. ']"
131,important,0.188,"write, start, code, example, plan, work, need, end, execute, main","['I got this command line script, can you write a pysimplegui script for it? I suggest making the LANGUAGES into dropdown, I hope you can figure out from the double while loop how it should work ... thanks. Also if you can adopt the styles a bit to make it look nice, default fonts tend to be quite small. from googletrans import Translator, LANGUAGES def main():     while True:         target = input(""Choose a language to translate to (type \'q\' to exit): "")         if target == ""q"":             break         if target not in LANGUAGES:             print(f\'Invalid target language, valid are: {"", "".join(LANGUAGES)}\')             continue         while True:             text = input(                 f""Enter text to translate to {LANGUAGES[target]} (type \'q\' to change language): ""             )             if text == ""q"":                 break             translated = translate_text(text, target=target)             print(translated) def translate_text(text, target=""en""):     translator = Translator()     translation = translator.translate(text, dest=target)     return translation.text if __name__ == ""__main__"":     main()']"
132,important,0.1794,"write, start, code, example, plan, work, need, end, execute, main","['# Working set src/execute/executeAndForwardOutput.js: ``` import { writeFile } from \'fs/promises\'; import { spawn } from \'child_process\'; import { makeExecutable } from \'./makeExecutable.js\'; async function executeAndForwardOutput(code, next) {   try {     if (code == null || !code.startsWith(\'#!\')) {       throw new Error(\'Code does not start with a shebang\');     }     await writeFile(\'./change.sh\', code);     await makeExecutable(\'./change.sh\');          const child = spawn(\'./change.sh\', [], { shell: true });     let commandOutput = \'\';     child.stdout.on(\'data\', (data) => {       console.log(`${data}`);       commandOutput += data;     });     child.stderr.on(\'data\', (data) => {       console.error(`${data}`);       commandOutput += data;     });     child.on(\'close\', (code) => {       if (typeof next === \'function\') {         next(code, commandOutput);       }     });   } catch (err) {     console.log(err);   } } export { executeAndForwardOutput }; ``` src/backend/handlers/executeHandler.js: ``` import { executeAndForwardOutput } from \'../../execute/executeAndForwardOutput.js\'; import { extractCode } from \'../../execute/extractCode.js\'; async function executeHandler(req, res) {   let code = req.body.change;   // Check if code starts with shebang   if (!code.startsWith(""#!"")) {     code = extractCode(code);   }      await executeAndForwardOutput(code, (code, output) => {     res.json(output);   }); } export { executeHandler }; ``` # Task Fix the following issue! TypeError: next is not a function   at ChildProcess.&lt;anonymous&gt; (file:///Users/ko/projects-new/Junior/src/execute/executeAndForwardOutput.js:27:7)   at ChildProcess.emit (node:events:537:28)   at maybeClose (node:internal/child_process:1091:16)   at Socket.&lt;anonymous&gt; (node:internal/child_process:449:11)   at Socket.emit (node:events:537:28)   at Pipe.&lt;anonymous&gt; (node:net:747:14) # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
133,important,0.1742,"write, start, code, example, plan, work, need, end, execute, main","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Ask for contents of subdirectories if needed. Some files are printed in the working set. Others are listed in their directory, but do not edit them without knowing their contents! # Working set package.json: ``` {   ""name"": ""@aijunior/dev"",   ""version"": ""0.1.3"",   ""description"": ""Your AI Contributor which codes itself"",   ""type"": ""module"",   ""main"": ""src/main.js"",   ""bin"": {     ""junior"": ""src/main.js"",     ""junior-web"": ""src/web.js"",     ""junior-init"": ""src/init.js""   },   ""scripts"": {     ""cli"": ""node src/main.js"",     ""start"": ""node src/web.js"",     ""build:css"": ""postcss ./src/frontend/styles.css -o ./dist/styles.css"",     ""update-logo"": ""node ./scripts/updateLogo.js"",     ""delete-branches"": ""node ./scripts/deleteBranchesCommand.js""   },   ""keywords"": [     ""cli"",     ""uppercase""   ],   ""author"": """",   ""license"": ""GPL"",   ""dependencies"": {     ""@types/js-yaml"": ""^4.0.5"",     ""autoprefixer"": ""^10.4.14"",     ""chatgpt"": ""^5.2.4"",     ""cors"": ""^2.8.5"",     ""docsify-cli"": ""^4.4.4"",     ""ejs"": ""^3.1.9"",     ""express"": ""^4.18.2"",     ""highlight.js"": ""^11.8.0"",     ""js-yaml"": ""^4.1.0"",     ""markdown-it"": ""^13.0.1"",     ""marked"": ""^5.1.0"",     ""postcss"": ""^8.4.26"",     ""postcss-nested"": ""^6.0.1"",     ""sharp"": ""^0.32.4"",     ""simple-git"": ""^3.19.1"",     ""solid-js"": ""^1.7.7"",     ""tailwindcss"": ""^3.3.3"",     ""vite"": ""^4.3.9"",     ""vite-plugin-solid"": ""^2.7.0"",     ""ws"": ""^8.13.0""   },   ""directories"": {     ""doc"": ""docs""   },   ""repository"": {     ""type"": ""git"",     ""url"": ""git+   },   ""bugs"": {     ""url"": ""   },   ""homepage"": "" } ``` src/git/deleteBranchesCommand.js: ``` import clearBranches from \'./clearBranches\'; const exceptions = process.argv.slice(2); async function run() {   try {     await clearBranches(exceptions);     console.log(\'Branches deleted successfully.\');   } catch (err) {     console.error(`An error occurred while deleting branches: ${err}`);     process.exit(1);   } } run(); ``` src/git/deleteBranches.js: err! # Task Move the following files to the specified target dirs! Find out the best target dir if it is not specified! You need to follow dependencies to maintain coherence. Before executing, write a concise plan! The plan should show:  - How do you avoid breaking other parts of the code.  - If you had to choose, your way of thinking. rename deleteBranchesCommand to clearBranchesCommand # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
134,important,0.1707,"write, start, code, example, plan, work, need, end, execute, main","['# Working set src/execute/executeAndForwardOutput.js: ``` import { writeFile } from \'fs/promises\'; import { spawn } from \'child_process\'; import { makeExecutable } from \'./makeExecutable.js\'; async function executeAndForwardOutput(code, next) {   try {     if (code == null || !code.startsWith(\'#!\')) {       throw new Error(\'Code does not start with a shebang\');     }     await writeFile(\'./change.sh\', code);     await makeExecutable(\'./change.sh\');          const child = spawn(\'./change.sh\', [], { shell: true });     let commandOutput = \'\';     child.stdout.on(\'data\', (data) => {       console.log(`${data}`);       commandOutput += data;     });     child.stderr.on(\'data\', (data) => {       console.error(`${data}`);       commandOutput += data;     });     child.on(\'close\', (code) => {       next(code, commandOutput);     });   } catch (err) {     console.log(err);   } } export { executeAndForwardOutput }; ``` src/backend/handlers/executeHandler.js: ``` import { executeAndForwardOutput } from \'../../execute/executeAndForwardOutput.js\'; import { extractCode } from \'../../execute/extractCode.js\'; async function executeHandler(req, res) {   let code = req.body.change;   // Check if code starts with shebang   if (!code.startsWith(""#!"")) {     code = extractCode(code);   }      const output = await executeAndForwardOutput(code);   res.json(output); } export { executeHandler }; ``` # Task Fix the following issue! TypeError: next is not a function   at ChildProcess.&lt;anonymous&gt; (file:///Users/ko/projects-new/Junior/src/execute/executeAndForwardOutput.js:27:7)   at ChildProcess.emit (node:events:537:28)   at maybeClose (node:internal/child_process:1091:16)   at Socket.&lt;anonymous&gt; (node:internal/child_process:449:11)   at Socket.emit (node:events:537:28)   at Pipe.&lt;anonymous&gt; (node:net:747:14) # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
135,important,0.1653,"write, start, code, example, plan, work, need, end, execute, main","['# Working set src/execute/executeCode.js: ``` import { confirmAndWriteCode } from \'./confirmAndWriteCode.js\'; import { executeAndForwardOutput } from \'./executeAndForwardOutput.js\'; const executeCode = async (code) => {   confirmAndWriteCode(code, () => executeAndForwardOutput(code)); } export { executeCode }; ``` src/execute/executeAndForwardOutput.js: ``` import { spawn } from \'child_process\'; import { startInteractiveSession } from ""../interactiveSession/startInteractiveSession.js""; import { rl } from \'../config.js\'; function executeAndForwardOutput(code) {   const child = spawn(code, { shell: true });   let last_command_result = \'\';   child.stdout.on(\'data\', (data) => {     console.log(`${data}`);     last_command_result += data;   });   child.stderr.on(\'data\', (data) => {     console.error(`${data}`);     last_command_result += data;   });   child.on(\'close\', (code) => {     if (code !== 0) {       console.log(`child process exited with code ${code}`);       last_command_result = ""Command failed. Output: n"" + last_command_result;     } else {       last_command_result = ""Command executed. Output: n"" + last_command_result;     }     startInteractiveSession()   }); } export { executeAndForwardOutput }; ``` src/execute/confirmAndWriteCode.js: ``` import { rl } from \'../config.js\'; function confirmAndWriteCode(code, next) {   rl.question(\' x1b[1mEXECUTE? [y/n] x1b[0m \', (answer) => {     if (answer.toLowerCase() === \'y\') {       console.log("" x1b[33mExecuting... x1b[0m"");       next();     } else {       console.log("" x1b[33mNot executing. x1b[0m"");     }   }); } export { confirmAndWriteCode }; ``` # Task Refactor the mentioned files! Look for   - unused imports   - unneeded comments   - ugly names   - misplaced files   - code repetition   - code smell When a file is bigger than 40 lines, split it: Identify the possible parts and create separate files! 1. Rename confirmAndWriteCode.js to confirmExecution.js Maintain dependencies and imports! 2. executeAndForwardOutput should not import startInteractiveSession, give it a &#34;next&#34; continuation instead. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
136,important,0.1613,"write, start, code, example, plan, work, need, end, execute, main","['# Working set ``` ./  .git/...  .gitignore  README.md  babel.config.js  change.sh  doc/...  node_modules/...  package-lock.json  package.json  prompt/...  prompt.md  prompt.yaml  secret.sh  src/... ``` ``` src/  attention/...  backend/...  config.js  execute/...  frontend/...  index.html  interactiveSession/...  main.js  prompt/...  startServer.js  startVite.js  vite.config.js  web.js ``` ``` src/execute/  executeCode.js  extractCode.js ``` src/execute/extractCode.js: ``` function extractCode(res) {   const match = res.match(/```(sh|bash)([ s S]*?)```/);   return match ? match[2].trim() : null; } export { extractCode }; ``` src/execute/executeCode.js: ``` #!/usr/bin/env node import { startInteractiveSession } from ""../interactiveSession/startInteractiveSession.js""; import { exec } from \'child_process\'; const executeCode = async (cod, last_command_result, parent_message_id, rl) => {   rl.question(\' x1b[1mEXECUTE? [y/n] x1b[0m \', async (answer) => {     console.log("""");     if (answer.toLowerCase() === \'y\' || answer === """") {       exec(cod, (error, stdout, stderr) => {         if (error) {           console.error(`${error.message}`);           last_command_result = ""Command failed. Output: n"" + error.message + "" n"";         } else {           if (stdout.length > 0) {             console.log(`${stdout}`);           }           if (stderr.length > 0) {             console.log(`${stderr}`);           }           last_command_result = ""Command executed. Output: n"" + stdout + "" n"" + stderr + "" n"";         }         startInteractiveSession(last_command_result, parent_message_id, rl)       });     } else {       last_command_result = ""Command skipped. n"";       startInteractiveSession(last_command_result, parent_message_id, rl);     }   }); } export { executeCode }; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: 1. The executed code should be written to ./change.sh before executing. 2. While executing the code, I do not see output in the terminal. Forward it! 3. executeCode.js is too big. We need to split in two logically. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
137,important,0.1544,"write, start, code, example, plan, work, need, end, execute, main","['Browse You are an Odoo implementation expert working on the Odoo Project app.   Your task is to come up with an enhancement to the Odoo source code that would insert the current number of project sub-tasks as a dyanamic tab label in the Task view as an addition to the current tab title ""Sub-tasks"".    Your approach should modify the template that defines the ""Sub-tasks"" tab, identify the model and field that holds the sub-tasks count and modify the template file to include dynamic content in the tab title.  Your result  should the required code changes to implement this enhancement. ']"
138,important,0.1476,"write, start, code, example, plan, work, need, end, execute, main","['Here is how to do arrays of structs in Python: ``` import ctypes from random import randint class STRUCT_2(ctypes.Structure):     #_pack_=2     _fields_ = [(\'field_1\', ctypes.c_short),                 (\'field_2\', ctypes.c_short),                 (\'field_3\', ctypes.c_short),                 (\'field_4\', ctypes.c_short),                 (\'field_5\', ctypes.c_short),                 (\'field_6\', ctypes.c_short),                 (\'field_7\', ctypes.c_short),                 (\'field_8\', ctypes.c_short)] class STRUCT_1(ctypes.Structure):     #_pack_=2     _fields_ = [(\'elements\', ctypes.c_short),                 #an array of structs                 (\'STRUCT_ARRAY\', ctypes.POINTER(STRUCT_2))]     def __init__(self,num_of_structs):         elems = (STRUCT_2 * num_of_structs)()         self.STRUCT_ARRAY = ctypes.cast(elems,ctypes.POINTER(STRUCT_2))         self.elements = num_of_structs         for num in range(0,num_of_structs):             self.STRUCT_ARRAY[num].field_1 = 1             self.STRUCT_ARRAY[num].field_2 = 2             self.STRUCT_ARRAY[num].field_3 = 3             self.STRUCT_ARRAY[num].field_4 = 4 for num in range(0,100):     test = STRUCT_1(num)     print(""%i done"" % num) ``` Is there a way to map this arrays of structs using ctypes into a NumPy array? I do not want to do any copy, I want the NumPy array to map directly to memory.']"
139,important,0.1464,"write, start, code, example, plan, work, need, end, execute, main","['You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Ask for contents of subdirectories if needed. Some files are printed in the working set. Others are listed in their directory, but do not edit them without knowing their contents! # Working set package.json: ``` {   ""name"": ""@aijunior/dev"",   ""version"": ""0.1.3"",   ""description"": ""Your AI Contributor which codes itself"",   ""type"": ""module"",   ""main"": ""src/main.js"",   ""bin"": {     ""junior"": ""src/main.js"",     ""junior-web"": ""src/web.js"",     ""junior-init"": ""src/init.js""   },   ""scripts"": {     ""cli"": ""node src/main.js"",     ""start"": ""node src/web.js"",     ""build:css"": ""postcss ./src/frontend/styles.css -o ./dist/styles.css"",     ""update-logo"": ""node ./scripts/updateLogo.js"",     ""delete-branches"": ""node ./scripts/clearBranchesCommand.js""   },   ""keywords"": [     ""cli"",     ""uppercase""   ],   ""author"": """",   ""license"": ""GPL"",   ""dependencies"": {     ""@types/js-yaml"": ""^4.0.5"",     ""autoprefixer"": ""^10.4.14"",     ""chatgpt"": ""^5.2.4"",     ""cors"": ""^2.8.5"",     ""docsify-cli"": ""^4.4.4"",     ""ejs"": ""^3.1.9"",     ""express"": ""^4.18.2"",     ""highlight.js"": ""^11.8.0"",     ""js-yaml"": ""^4.1.0"",     ""markdown-it"": ""^13.0.1"",     ""marked"": ""^5.1.0"",     ""postcss"": ""^8.4.26"",     ""postcss-nested"": ""^6.0.1"",     ""sharp"": ""^0.32.4"",     ""simple-git"": ""^3.19.1"",     ""solid-js"": ""^1.7.7"",     ""tailwindcss"": ""^3.3.3"",     ""vite"": ""^4.3.9"",     ""vite-plugin-solid"": ""^2.7.0"",     ""ws"": ""^8.13.0""   },   ""directories"": {     ""doc"": ""docs""   },   ""repository"": {     ""type"": ""git"",     ""url"": ""git+   },   ""bugs"": {     ""url"": ""   },   ""homepage"": "" } ``` src/git/clearBranches.js: ``` import { promisify } from \'util\'; import { exec as execCb } from \'child_process\'; const exec = promisify(execCb); export default async function deleteBranches(exceptions = []) {   try {     const { stdout: currentBranch } = await exec(\'git rev-parse --abbrev-ref HEAD\');     const { stdout: allBranches } = await exec(\'git for-each-ref --format=""%(refname:short)"" refs/heads\');     const branches = allBranches.split(\' n\').filter(branch => branch !== currentBranch.trim() && !exceptions.includes(branch));     for (const branch of branches) {       await executeCommand(`git branch -d ${branch}`);     }   } catch (err) {     console.error(`An error occurred: ${err}`);   } } async function executeCommand(command) {   try {     console.log(`Running command: ${command}`);     const { stdout } = await exec(command);     console.log(`stdout: ${stdout}`);   } catch (err) {     throw err;   } } ``` # Task Move the following files to the specified target dirs! Find out the best target dir if it is not specified! You need to follow dependencies to maintain coherence. Before executing, write a concise plan! The plan should show:  - How do you avoid breaking other parts of the code.  - If you had to choose, your way of thinking. rename delete-branches to clear-branches rename deleteBranches to clearBranches # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
140,large,0.5074,"user, get, new, test, class, say, web, public, base, int","['The total length of the content that I want to send you is too large to send in only one piece.          For sending you that content, I will follow this rule:          [START PART 1/10] this is the content of the part 1 out of 10 in total [END PART 1/10]          Then you just answer: ""Received part 1/10""          And when I tell you ""ALL PARTS SENT"", then you can continue processing the data and answering my requests.']"
141,large,0.4927,"user, get, new, test, class, say, web, public, base, int","[""What's this GitHub issue mean? Fix VALIDHACKS for Images and make it default ($300 bounty) When you read images out of bounds, they will return 0s. Currently the compiler is unaware of this and still gates the load. Figure out when we don't need it and disable it. Images are used in the openpilot model openpilot/go.sh that have this extra gated load. Safely remove it! Must be well tested for bounty, it's easy to do this subtly wrong. Simple example of issue: GPU=1 DEBUG=4 FORWARD_ONLY=1 IMAGE=2 python3 test/test_ops.py TestOps.test_simple_padding_conv2d generates float4 val0 = ((((lidx0*(-1))<0)*(lidx0<3)))?(read_imagef(data1, smp, (int2)(((lidx0+1)%2),(((lidx0+1)/2)+(-1))))):(float4)(0.0f,0.0f,0.0f,0.0f); # (lidx0 ranges from 0-3) instead of float4 val0 = read_imagef(data1, smp, (int2)(lidx0-1,0)) to read image dtypes.imagef((1, 2, 4)) # the last 4 is the float4, this is a 2x1 image That gate is not needed if you remove the %2 and subtract 2 from the index. You also then don't need the y index at all. See validhacks in to_image_idx for the old (broken) code that hacked this. The symbolic engine should be good enough now to do this properly.""]"
142,large,0.3992,"user, get, new, test, class, say, web, public, base, int","['I\'m having trouble understanding the instructions: """""" Given a viewport into a larger grid, calculate the total number of cells in the grid. The grid consists of cells, each labeled with an index. The labeling starts at 1 in the first cell located in the top left corner of the grid and increments by 1 with each step. The final cell in the bottom right corner of the grid is the size of the grid. The viewport shows only a small portion of the (square) grid. Provide the answer directly, or the mathematical representation e.g (rows * cols).  """""" Can you explain it in another way?']"
143,large,0.3803,"user, get, new, test, class, say, web, public, base, int","[""I'm trying to set up the github action for running npm test but it complains that there's no package-lock.json""]"
144,large,0.3537,"user, get, new, test, class, say, web, public, base, int","['ok the console errors are gone but nothing renders when i backfill - I need something to look at besides the name of the current user index.html        Banzuke Surfing Game                     -->       Welcome to Banzuke Surfing Game!          Select your Rikishi and start playing!              Rikishi 1         Rikishi 2                   Start Playing          Admin Panel     Switch user:          Switch User     Backfill contest results:               Backfill Results             game.js export default class Game {     constructor() {         this.user = this.getUser();         this.initialize();     }     startPlaying() {         var rikishi = document.querySelector(\'#rikishi\').value;         var picks = this.getPicks();         var message = ""You selected: "" + rikishi + "" nPrevious Picks: "" + JSON.stringify(picks);         this.updatePicks(rikishi); // Update the picks with the new selection         return message;     }     getUser() {         // get user from local storage         var user = localStorage.getItem(\'user\');         if (!user) {             user = \'admin\';             localStorage.setItem(\'user\', user);         }         return user;     }     getPicks() {         var picks = JSON.parse(localStorage.getItem(this.user));         if (!picks) {             picks = {};         }         return picks;     }     updatePicks(rikishi) {         var picks = this.getPicks();         var currentContest = new Date().getMonth();         if ([0, 2, 4, 6, 8, 10].includes(currentContest)) {             var contestName = new Date().toLocaleString(\'default\', { month: \'long\' }) + \' \' + new Date().getFullYear();             picks[contestName] = rikishi;             localStorage.setItem(this.user, JSON.stringify(picks));         }     }     switchUser() {         var newUser = document.querySelector(\'#userSwitch\').value;         localStorage.setItem(\'user\', newUser);         document.querySelector(\'#user\').textContent = \'Current user: \' + newUser;         this.user = newUser;     }     backfillResults() {         var contestName = document.querySelector(\'#backfillContest\').value;         var rikishi = document.querySelector(\'#backfillRikishi\').value;         var picks = this.getPicks();         picks[contestName] = rikishi;         localStorage.setItem(this.user, JSON.stringify(picks));     }     initialize() {         var userElement = document.querySelector(\'#user\');         if (userElement) {             userElement.textContent = \'Current user: \' + this.user;         }     } } function initGame() {   const game = new Game();   document.querySelector(""#startPlayingButton"").addEventListener(\'click\', () => game.startPlaying());   document.querySelector(""#switchUserButton"").addEventListener(\'click\', () => game.switchUser());   document.querySelector(""#backfillResultsButton"").addEventListener(\'click\', () => game.backfillResults()); } if (typeof window !== \'undefined\') {     window.onload = initGame; }']"
145,large,0.3506,"user, get, new, test, class, say, web, public, base, int","[""I am building a JavaScript application for a sumo wrestling game. In this game, players select a wrestler for each basho in a wave. I need to build a 'Pick' object that represents a pick made by a player. It should contain the wrestler's name and potentially other relevant details.""]"
146,large,0.3147,"user, get, new, test, class, say, web, public, base, int",['How many sunflower plants does it take to make 1 l of sunflower oil']
147,large,0.3098,"user, get, new, test, class, say, web, public, base, int",['You are a Python expert. How can I create a deep copy of a variable?']
148,large,0.3033,"user, get, new, test, class, say, web, public, base, int","['None of the localStorage stuff renders on the page, although I can open the debugging console and verify that it\'s there. I don\'t know if this console error is related: Error with Permissions-Policy header: Origin trial controlled feature not enabled: \'interest-cohort\'. index.html        Banzuke Surfing Game                     -->       Welcome to Banzuke Surfing Game!          Select your Rikishi and start playing!              Rikishi 1         Rikishi 2                   Start Playing          Backfilled Results:          Admin Panel     Switch user:          Switch User     Backfill contest results:               Backfill Results                  game.js export default class Game {     constructor() {         this.user = this.getUser();         this.initialize();     }     startPlaying() {         var rikishi = document.querySelector(\'#rikishi\').value;         var picks = this.getPicks();         var message = ""You selected: "" + rikishi + "" nPrevious Picks: "" + JSON.stringify(picks);         this.updatePicks(rikishi); // Update the picks with the new selection         return message;     }     getUser() {         // get user from local storage         var user = localStorage.getItem(\'user\');         if (!user) {             user = \'admin\';             localStorage.setItem(\'user\', user);         }         return user;     }     getPicks() {         var picks = JSON.parse(localStorage.getItem(this.user));         if (!picks) {             picks = {};         }         return picks;     }     updatePicks(rikishi) {         var picks = this.getPicks();         var currentContest = new Date().getMonth();         if ([0, 2, 4, 6, 8, 10].includes(currentContest)) {             var contestName = new Date().toLocaleString(\'default\', { month: \'long\' }) + \' \' + new Date().getFullYear();             picks[contestName] = rikishi;             localStorage.setItem(this.user, JSON.stringify(picks));         }     }     switchUser() {         var newUser = document.querySelector(\'#userSwitch\').value;         localStorage.setItem(\'user\', newUser);         document.querySelector(\'#user\').textContent = \'Current user: \' + newUser;         this.user = newUser;     }     backfillResults() {         var contestName = document.querySelector(\'#backfillContest\').value;         var rikishi = document.querySelector(\'#backfillRikishi\').value;         var picks = this.getPicks();         picks[contestName] = rikishi;         localStorage.setItem(this.user, JSON.stringify(picks));         this.provideFeedback(\'Backfilled results for \' + contestName + \' with \' + rikishi); // Provide feedback         this.displayBackfilledResults(); // Display the updated results     }     displayBackfilledResults() {         var picks = this.getPicks();         var resultsElement = document.querySelector(\'#backfilledResults\');         // Clear previous results         resultsElement.textContent = \'\';         // Display each contest result         for (var contest in picks) {             var rikishi = picks[contest];             var resultText = document.createTextNode(contest + \': \' + rikishi);             var resultDiv = document.createElement(\'div\');             resultDiv.appendChild(resultText);             resultsElement.appendChild(resultDiv);         }     }     provideFeedback(message) {         document.querySelector(\'#feedback\').textContent = message;     }     initialize() {         var userElement = document.querySelector(\'#user\');         if (userElement) {             userElement.textContent = \'Current user: \' + this.user;         }         this.displayBackfilledResults(); // Display the initial results     } } function initGame() {   const game = new Game();   document.querySelector(""#startPlayingButton"").addEventListener(\'click\', () => game.startPlaying());   document.querySelector(""#switchUserButton"").addEventListener(\'click\', () => game.switchUser());   document.querySelector(""#backfillResultsButton"").addEventListener(\'click\', () => game.backfillResults()); } if (typeof window !== \'undefined\') {     window.onload = initGame; }']"
149,large,0.2963,"user, get, new, test, class, say, web, public, base, int","[""My codebase has a lot of old Go code which uses camel case file names like `tlsConfigHelper.go`. I'd like for all of these files to be renamed to use snake case like `tls_config_helper.go`. Can you write a bash script which will do this?""]"
150,letter,0.3809,"import, src, file, export, component, frontend, default, service, solid, plan","['Please write me a Python script that enlarge a 224x225 icon.png to 225x225, padding white pixels on the left side']"
151,letter,0.3264,"import, src, file, export, component, frontend, default, service, solid, plan","[""I'm using Rust programming language. How do I add two unsigned 32-bit integers?""]"
152,letter,0.2972,"import, src, file, export, component, frontend, default, service, solid, plan","['# Working set src/frontend/App.jsx: ``` import GenerateButton from \'./components/GenerateButton\'; import ExecuteButton from \'./components/ExecuteButton\'; import RollbackButton from \'./components/RollbackButton\'; import CommitButton from \'./components/CommitButton\'; import PromptDisplay from \'./components/PromptDisplay\'; import TasksList from \'./components/TasksList\'; import PromptDescriptor from \'./components/PromptDescriptor\'; import NavBar from \'./components/NavBar\'; import ExecutionResultDisplay from \'./components/ExecutionResultDisplay\'; import GitStatusDisplay from \'./components/GitStatusDisplay\'; import CommitMessageInput from \'./components/CommitMessageInput\'; const App = () => {   return (                                                                                                                              ); }; export default App; ``` src/frontend/components/TasksList.jsx: ``` import { onMount, createEffect } from \'solid-js\'; import { fetchTasks } from \'../fetchTasks\'; import { handleTaskChange } from \'../service/handleTaskChange\'; import { selectedTask, setSelectedTask } from \'../model/selectedTask\'; import { promptDescriptor } from \'../model/promptDescriptor\'; import { parseYamlAndGetTask } from \'../service/parseYamlAndGetTask\'; const TasksList = () => {   const tasks = fetchTasks();   createEffect(() => {     const descriptor = promptDescriptor();     if (descriptor !== \'\') {       const task = parseYamlAndGetTask(descriptor);       setSelectedTask(task);     }   });   return (            Task:        handleTaskChange(e)}>         {tasks().map(task => {task})}               ); }; export default TasksList; ``` src/frontend/tailwind.config.cjs: ``` module.exports = {   darkMode: \'class\',   content: [__dirname + \'/**/*.html\', __dirname + \'/**/*.jsx\'],   theme: {     screens: {       \'xs\': \'320px\',       \'sm\': \'640px\',       \'md\': \'768px\',       \'lg\': \'1024px\',       \'xl\': \'1280px\',       \'2xl\': \'1536px\',     },     extend: {       // Extend the spacing for larger gaps       spacing: {         \'72\': \'18rem\',         \'84\': \'21rem\',         \'96\': \'24rem\',         \'128\': \'32rem\',       },       // Extend the button styles for larger buttons       fontSize: {         \'btn\': \'1.5rem\',       },       padding: {         \'btn\': \'1.5rem\',       },       // Extend the maxWidth for desktop container       maxWidth: {         \'desktop\': \'640px\',       },       // Extend the colors for dark and light mode       colors: {         light: {           text: \'#1a202c\',           background: \'#f7fafc\',         },         dark: {           text: \'#f7fafc\',           background: \'#1a202c\',         },       },     },   },   variants: {     extend: {},   },   plugins: [], } ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Make TaskList dark theme-aware! Generate new colors in tailwind config that can be generally used for emphasizing a compoment with a background color and replace the hardcoded bg-gray-100 ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
153,letter,0.2917,"import, src, file, export, component, frontend, default, service, solid, plan","['# Working set src/frontend/App.jsx: ``` import NotesInput from \'./components/NotesInput\'; import StartButton from \'./components/StartButton\'; import PromptDisplay from \'./components/PromptDisplay\'; import TasksList from \'./components/TasksList\'; import PromptDescriptor from \'./components/PromptDescriptor\'; import NavBar from \'./components/NavBar\'; import { notes, setNotes } from \'./stores/notes\'; import { setPrompt } from \'./stores/prompt\'; const App = () => {   return (                                                       ); }; export default App; ``` tailwind.config.js: ``` module.exports = {   content: [\'./src/**/*.html\', \'./src/**/*.js\', \'./src/**/*.jsx\', \'./src/**/*.tsx\', \'./src/**/*.ts\'],   theme: {     screens: {       \'sm\': \'640px\',       \'md\': \'768px\',       \'lg\': \'1024px\',       \'xl\': \'1280px\',       \'2xl\': \'1536px\',     },     extend: {       // Extend the spacing for larger gaps       spacing: {         \'72\': \'18rem\',         \'84\': \'21rem\',         \'96\': \'24rem\',         \'128\': \'32rem\',       },       // Extend the button styles for larger buttons       fontSize: {         \'btn\': \'1.5rem\',       },       padding: {         \'btn\': \'1.5rem\',       },       // Extend the maxWidth for desktop container       maxWidth: {         \'desktop\': \'640px\',       },     },   },   variants: {     extend: {},   },   plugins: [], } ``` src/frontend/index.jsx: ``` import ""./styles/styles.css""; import { render } from \'solid-js/web\'; import App from \'./App\'; render(App, document.getElementById(\'app\')); ``` src/index.html: ```         Junior           ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: Do not allow any component to be wider than the content area. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
154,letter,0.2852,"import, src, file, export, component, frontend, default, service, solid, plan","['# Working set src/frontend/index.html: ```               Junior           ``` src/frontend/App.jsx: ``` import GenerateButton from \'./components/GenerateButton\'; import ExecuteButton from \'./components/ExecuteButton\'; import RollbackButton from \'./components/RollbackButton\'; import CommitButton from \'./components/CommitButton\'; import PromptDisplay from \'./components/PromptDisplay\'; import TasksList from \'./components/TasksList\'; import PromptDescriptor from \'./components/PromptDescriptor\'; import NavBar from \'./components/NavBar\'; import ExecutionResultDisplay from \'./components/ExecutionResultDisplay\'; import GitStatusDisplay from \'./components/GitStatusDisplay\'; import CommitMessageInput from \'./components/CommitMessageInput\'; const App = () => {   return (                                                                                                                              ); }; export default App; ``` src/frontend/components/ThemeSwitcher.jsx: ``` import { createEffect, createSignal } from \'solid-js\'; const ThemeSwitcher = () => {   const [theme, setTheme] = createSignal(window.matchMedia(\'(prefers-color-scheme: dark)\').matches ? \'dark\' : \'light\');   createEffect(() => {     const currentTheme = theme();     document.body.className = currentTheme === \'dark\' ? \'dark\' : \'light\'; // Fixed line for light mode     localStorage.setItem(\'theme\', currentTheme);   });   const toggleTheme = () => {     setTheme(theme() === \'dark\' ? \'light\' : \'dark\');   };   return (            {theme() === \'dark\' ? \' \' : \' \'} {/* Unicode symbols for dark and light modes */}        ); }; export default ThemeSwitcher; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Move bg-main text-text to the body! Preserve existing classes on the body when switching theme! ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
155,letter,0.2836,"import, src, file, export, component, frontend, default, service, solid, plan","['# Working set src/frontend/App.jsx: ``` import GenerateButton from \'./components/GenerateButton\'; import ExecuteButton from \'./components/ExecuteButton\'; import RollbackButton from \'./components/RollbackButton\'; import CommitButton from \'./components/CommitButton\'; import PromptDisplay from \'./components/PromptDisplay\'; import TasksList from \'./components/TasksList\'; import PromptDescriptor from \'./components/PromptDescriptor\'; import NavBar from \'./components/NavBar\'; import ExecutionResultDisplay from \'./components/ExecutionResultDisplay\'; import GitStatusDisplay from \'./components/GitStatusDisplay\'; import CommitMessageInput from \'./components/CommitMessageInput\'; const App = () => {   return (                                                                                                                              ); }; export default App; ``` src/frontend/components/ExecuteButton.jsx: ``` import { executeChange } from \'../service/executeChange\'; import { setExecutionResult } from \'../stores/executionResult\'; const ExecuteButton = () => {   const handleExecuteChange = async () => {     const change = await navigator.clipboard.readText();     const response = await executeChange(change);     setExecutionResult(response.output);     console.log(response.output);   };   return (     Paste & Execute Change   ); }; export default ExecuteButton; ``` src/frontend/stores/executionResult.js: ``` import { createSignal } from \'solid-js\'; export const [executionResult, setExecutionResult] = createSignal(\'\'); ``` src/frontend/components/CommitButton.jsx: ``` import { postCommit } from \'../service/postCommit\'; import { commitMessage, setCommitMessage } from \'../stores/commitMessage\'; import { fetchGitStatus } from \'../service/fetchGitStatus\'; import { setExecutionResult } from \'../stores/executionResult\'; // Importing the necessary function to clear execution result import { setPrompt } from \'../stores/prompt\'; // Importing setPrompt to clear the prompt const CommitButton = () => {   const handleCommit = async () => {     const response = await postCommit(commitMessage());     console.log(response.message);     const status = await fetchGitStatus();     console.log(status);     setExecutionResult(\'\'); // Clearing the execution result after commit     setCommitMessage(\'\'); // Clearing the commit message after commit     setPrompt(\'\'); // Clearing the prompt after commit   };   return (     Commit   ); }; export default CommitButton; ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: - Create a signal in src/frontend/stores/change.js - Save the pasted change after it was executed. - Clear the change after commit. ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
156,letter,0.2822,"import, src, file, export, component, frontend, default, service, solid, plan","['# Working set src/frontend/App.jsx: ``` import NotesInput from \'./components/NotesInput\'; import StartButton from \'./components/StartButton\'; import PromptDisplay from \'./components/PromptDisplay\'; import TasksList from \'./components/TasksList\'; import PromptDescriptor from \'./components/PromptDescriptor\'; import NavBar from \'./components/NavBar\'; import { notes, setNotes } from \'./stores/notes\'; import { setPrompt } from \'./stores/prompt\'; const App = () => {   return (                                                       ); }; export default App; ``` tailwind.config.js: ``` module.exports = {   content: [\'./src/**/*.html\', \'./src/**/*.js\', \'./src/**/*.jsx\', \'./src/**/*.tsx\', \'./src/**/*.ts\'],   theme: {     screens: {       \'sm\': \'640px\',       \'md\': \'768px\',       \'lg\': \'1024px\',       \'xl\': \'1280px\',       \'2xl\': \'1536px\',     },     extend: {       // Extend the spacing for larger gaps       spacing: {         \'72\': \'18rem\',         \'84\': \'21rem\',         \'96\': \'24rem\',         \'128\': \'32rem\',       },       // Extend the button styles for larger buttons       fontSize: {         \'btn\': \'1.5rem\',       },       padding: {         \'btn\': \'1.5rem\',       },       // Extend the maxWidth for desktop container       maxWidth: {         \'desktop\': \'1000px\',       },     },   },   variants: {     extend: {},   },   plugins: [], } ``` src/frontend/index.jsx: ``` import ""./styles/styles.css""; import { render } from \'solid-js/web\'; import App from \'./App\'; render(App, document.getElementById(\'app\')); ``` src/index.html: ```         Junior           ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: On desktop, center the content on the screen (currently it is on the left) and change max width to 640px. # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
157,letter,0.2812,"import, src, file, export, component, frontend, default, service, solid, plan","['# Working set src/frontend/App.jsx: ``` import NotesInput from \'./components/NotesInput\'; import StartButton from \'./components/StartButton\'; import PromptDisplay from \'./components/PromptDisplay\'; import TasksList from \'./components/TasksList\'; import PromptDescriptor from \'./components/PromptDescriptor\'; import NavBar from \'./components/NavBar\'; import { notes, setNotes } from \'./stores/notes\'; import { setPrompt } from \'./stores/prompt\'; const App = () => {   return (                                                       ); }; export default App; ``` tailwind.config.js: ``` module.exports = {   content: [\'./src/**/*.html\', \'./src/**/*.js\', \'./src/**/*.jsx\', \'./src/**/*.tsx\', \'./src/**/*.ts\'],   theme: {     screens: {       \'sm\': \'640px\',       \'md\': \'768px\',       \'lg\': \'1024px\',       \'xl\': \'1280px\',       \'2xl\': \'1536px\',     },     extend: {       // Extend the spacing for larger gaps       spacing: {         \'72\': \'18rem\',         \'84\': \'21rem\',         \'96\': \'24rem\',         \'128\': \'32rem\',       },       // Extend the button styles for larger buttons       fontSize: {         \'btn\': \'1.5rem\',       },       padding: {         \'btn\': \'1.5rem\',       },       // Extend the maxWidth for desktop container       maxWidth: {         \'desktop\': \'640px\',       },     },   },   variants: {     extend: {},   },   plugins: [], } ``` src/frontend/index.jsx: ``` import ""./styles/styles.css""; import { render } from \'solid-js/web\'; import App from \'./App\'; render(App, document.getElementById(\'app\')); ``` src/index.html: ```         Junior           ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! - Every js file should only export a single function! - Use ES6 imports! Requirements: Make it mobile friendly! Also add necessary headers to the html! It is a solidjs app # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files without substitution. Assume OSX. npm and jq are installed. Do NOT write any text outside the script (the plan goes into it)! EXAMPLE START ```sh #!/bin/sh # Goal: [Task description, max 7 words] # Plan: # 1. [...] [Commands solving the task] ``` EXAMPLE END ']"
158,letter,0.2782,"import, src, file, export, component, frontend, default, service, solid, plan","['# Working set src/frontend/App.jsx: ``` import GenerateButton from \'./components/GenerateButton\'; import ExecuteButton from \'./components/ExecuteButton\'; import RollbackButton from \'./components/RollbackButton\'; import CommitButton from \'./components/CommitButton\'; import PromptDisplay from \'./components/PromptDisplay\'; import TasksList from \'./components/TasksList\'; import PromptDescriptor from \'./components/PromptDescriptor\'; import NavBar from \'./components/NavBar\'; import ExecutionResultDisplay from \'./components/ExecutionResultDisplay\'; import GitStatusDisplay from \'./components/GitStatusDisplay\'; const App = () => {   return (                                                                                                                     ); }; export default App; ``` src/frontend/components/CommitButton.jsx: ``` import { postCommit } from \'../service/postCommit\'; import CommitMessageInput from \'./CommitMessageInput\'; import { commitMessage } from \'../stores/commitMessage\'; const CommitButton = () => {   const handleCommit = async () => {     const response = await postCommit(commitMessage());     console.log(response.message);   };   return (                   Commit        ); }; export default CommitButton; ``` src/frontend/components/CommitMessageInput.jsx: ``` import { commitMessage, setCommitMessage } from \'../stores/commitMessage\'; const CommitMessageInput = (props) => {   const handleChange = (e) => {     setCommitMessage(e.target.value);   };   return (        ); }; export default CommitMessageInput; ``` # Task Refactor! Move the commit message from CommitButton.jsx to App.jsx. No need for the wrapper div in CommitButton ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, prefer heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
159,letter,0.2706,"import, src, file, export, component, frontend, default, service, solid, plan","['# Working set src/frontend/index.html: ```               Junior           ``` src/frontend/App.jsx: ``` import GenerateButton from \'./components/GenerateButton\'; import ExecuteButton from \'./components/ExecuteButton\'; import RollbackButton from \'./components/RollbackButton\'; import CommitButton from \'./components/CommitButton\'; import PromptDisplay from \'./components/PromptDisplay\'; import TasksList from \'./components/TasksList\'; import PromptDescriptor from \'./components/PromptDescriptor\'; import NavBar from \'./components/NavBar\'; import ExecutionResultDisplay from \'./components/ExecutionResultDisplay\'; import GitStatusDisplay from \'./components/GitStatusDisplay\'; import CommitMessageInput from \'./components/CommitMessageInput\'; const App = () => {   return (                                                                                                                              ); }; export default App; ``` src/frontend/tailwind.config.cjs: ``` module.exports = {   darkMode: \'class\', // Add this line   content: [__dirname + \'/**/*.html\', __dirname + \'/**/*.jsx\'],   theme: {     screens: {       \'xs\': \'320px\',       \'sm\': \'640px\',       \'md\': \'768px\',       \'lg\': \'1024px\',       \'xl\': \'1280px\',       \'2xl\': \'1536px\',     },     extend: {       // Extend the spacing for larger gaps       spacing: {         \'72\': \'18rem\',         \'84\': \'21rem\',         \'96\': \'24rem\',         \'128\': \'32rem\',       },       // Extend the button styles for larger buttons       fontSize: {         \'btn\': \'1.5rem\',       },       padding: {         \'btn\': \'1.5rem\',       },       // Extend the maxWidth for desktop container       maxWidth: {         \'desktop\': \'640px\',       },     },   },   variants: {     extend: {},   },   plugins: [], } ``` # Task Implement the following feature! - Create a plan! - Create new files when needed! Requirements: Set up text and bg colors for the app, separately for dark and light theme. Add tailwind classes to the id=&#34;app&#34; div or in App.jsx if needed for it to change colors based on the theme. ## Project Specifics - Every js file should *only export a single function*! - Use *ES6 imports*! - Prefer *async/await* over promises! - The frontend uses *Solidjs*, edit .jsx file accordingly # Output Format Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task. Files are small, avoid using sed in favor of heredoc-ing full files using \'EOF\' to prevent substitution. OS: OSX Installed tools: npm, jq Do NOT write any text outside the script! EXAMPLE START ```sh #!/bin/sh set -e goal=[Task description, max 7 words] echo ""Plan:"" echo ""1. [...]"" [Commands solving the task] echo "" 033[32mDone: $goal 033[0m n"" ``` EXAMPLE END ']"
